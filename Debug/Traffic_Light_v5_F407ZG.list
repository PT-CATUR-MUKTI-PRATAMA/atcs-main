
Traffic_Light_v5_F407ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de94  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e0  0800e028  0800e028  0000f028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea08  0800ea08  00010098  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea08  0800ea08  0000fa08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea10  0800ea10  00010098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea10  0800ea10  0000fa10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea14  0800ea14  0000fa14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800ea18  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010098  2**0
                  CONTENTS
 10 .bss          00016d00  20000098  20000098  00010098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20016d98  20016d98  00010098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001820c  00000000  00000000  000100c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003978  00000000  00000000  000282d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  0002bc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000103a  00000000  00000000  0002d108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b65  00000000  00000000  0002e142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f742  00000000  00000000  00054ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4cb5  00000000  00000000  000743e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015909e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067a0  00000000  00000000  001590e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0015f884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e00c 	.word	0x0800e00c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800e00c 	.word	0x0800e00c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b96a 	b.w	8000e84 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	460c      	mov	r4, r1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d14e      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd4:	4694      	mov	ip, r2
 8000bd6:	458c      	cmp	ip, r1
 8000bd8:	4686      	mov	lr, r0
 8000bda:	fab2 f282 	clz	r2, r2
 8000bde:	d962      	bls.n	8000ca6 <__udivmoddi4+0xde>
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0320 	rsb	r3, r2, #32
 8000be6:	4091      	lsls	r1, r2
 8000be8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf0:	4319      	orrs	r1, r3
 8000bf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f f68c 	uxth.w	r6, ip
 8000bfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c06:	fb07 1114 	mls	r1, r7, r4, r1
 8000c0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0e:	fb04 f106 	mul.w	r1, r4, r6
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c1e:	f080 8112 	bcs.w	8000e46 <__udivmoddi4+0x27e>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 810f 	bls.w	8000e46 <__udivmoddi4+0x27e>
 8000c28:	3c02      	subs	r4, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a59      	subs	r1, r3, r1
 8000c2e:	fa1f f38e 	uxth.w	r3, lr
 8000c32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c36:	fb07 1110 	mls	r1, r7, r0, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb00 f606 	mul.w	r6, r0, r6
 8000c42:	429e      	cmp	r6, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x94>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c4e:	f080 80fc 	bcs.w	8000e4a <__udivmoddi4+0x282>
 8000c52:	429e      	cmp	r6, r3
 8000c54:	f240 80f9 	bls.w	8000e4a <__udivmoddi4+0x282>
 8000c58:	4463      	add	r3, ip
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	1b9b      	subs	r3, r3, r6
 8000c5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c62:	2100      	movs	r1, #0
 8000c64:	b11d      	cbz	r5, 8000c6e <__udivmoddi4+0xa6>
 8000c66:	40d3      	lsrs	r3, r2
 8000c68:	2200      	movs	r2, #0
 8000c6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d905      	bls.n	8000c82 <__udivmoddi4+0xba>
 8000c76:	b10d      	cbz	r5, 8000c7c <__udivmoddi4+0xb4>
 8000c78:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4608      	mov	r0, r1
 8000c80:	e7f5      	b.n	8000c6e <__udivmoddi4+0xa6>
 8000c82:	fab3 f183 	clz	r1, r3
 8000c86:	2900      	cmp	r1, #0
 8000c88:	d146      	bne.n	8000d18 <__udivmoddi4+0x150>
 8000c8a:	42a3      	cmp	r3, r4
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xcc>
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	f0c0 80f0 	bcc.w	8000e74 <__udivmoddi4+0x2ac>
 8000c94:	1a86      	subs	r6, r0, r2
 8000c96:	eb64 0303 	sbc.w	r3, r4, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d0e6      	beq.n	8000c6e <__udivmoddi4+0xa6>
 8000ca0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ca4:	e7e3      	b.n	8000c6e <__udivmoddi4+0xa6>
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	f040 8090 	bne.w	8000dcc <__udivmoddi4+0x204>
 8000cac:	eba1 040c 	sub.w	r4, r1, ip
 8000cb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb4:	fa1f f78c 	uxth.w	r7, ip
 8000cb8:	2101      	movs	r1, #1
 8000cba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cca:	fb07 f006 	mul.w	r0, r7, r6
 8000cce:	4298      	cmp	r0, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x11c>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x11a>
 8000cdc:	4298      	cmp	r0, r3
 8000cde:	f200 80cd 	bhi.w	8000e7c <__udivmoddi4+0x2b4>
 8000ce2:	4626      	mov	r6, r4
 8000ce4:	1a1c      	subs	r4, r3, r0
 8000ce6:	fa1f f38e 	uxth.w	r3, lr
 8000cea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cee:	fb08 4410 	mls	r4, r8, r0, r4
 8000cf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cf6:	fb00 f707 	mul.w	r7, r0, r7
 8000cfa:	429f      	cmp	r7, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x148>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x146>
 8000d08:	429f      	cmp	r7, r3
 8000d0a:	f200 80b0 	bhi.w	8000e6e <__udivmoddi4+0x2a6>
 8000d0e:	4620      	mov	r0, r4
 8000d10:	1bdb      	subs	r3, r3, r7
 8000d12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d16:	e7a5      	b.n	8000c64 <__udivmoddi4+0x9c>
 8000d18:	f1c1 0620 	rsb	r6, r1, #32
 8000d1c:	408b      	lsls	r3, r1
 8000d1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d22:	431f      	orrs	r7, r3
 8000d24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d28:	fa04 f301 	lsl.w	r3, r4, r1
 8000d2c:	ea43 030c 	orr.w	r3, r3, ip
 8000d30:	40f4      	lsrs	r4, r6
 8000d32:	fa00 f801 	lsl.w	r8, r0, r1
 8000d36:	0c38      	lsrs	r0, r7, #16
 8000d38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d40:	fa1f fc87 	uxth.w	ip, r7
 8000d44:	fb00 441e 	mls	r4, r0, lr, r4
 8000d48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d50:	45a1      	cmp	r9, r4
 8000d52:	fa02 f201 	lsl.w	r2, r2, r1
 8000d56:	d90a      	bls.n	8000d6e <__udivmoddi4+0x1a6>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d5e:	f080 8084 	bcs.w	8000e6a <__udivmoddi4+0x2a2>
 8000d62:	45a1      	cmp	r9, r4
 8000d64:	f240 8081 	bls.w	8000e6a <__udivmoddi4+0x2a2>
 8000d68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d6c:	443c      	add	r4, r7
 8000d6e:	eba4 0409 	sub.w	r4, r4, r9
 8000d72:	fa1f f983 	uxth.w	r9, r3
 8000d76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d86:	45a4      	cmp	ip, r4
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x1d2>
 8000d8a:	193c      	adds	r4, r7, r4
 8000d8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d90:	d267      	bcs.n	8000e62 <__udivmoddi4+0x29a>
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d965      	bls.n	8000e62 <__udivmoddi4+0x29a>
 8000d96:	3b02      	subs	r3, #2
 8000d98:	443c      	add	r4, r7
 8000d9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000da2:	eba4 040c 	sub.w	r4, r4, ip
 8000da6:	429c      	cmp	r4, r3
 8000da8:	46ce      	mov	lr, r9
 8000daa:	469c      	mov	ip, r3
 8000dac:	d351      	bcc.n	8000e52 <__udivmoddi4+0x28a>
 8000dae:	d04e      	beq.n	8000e4e <__udivmoddi4+0x286>
 8000db0:	b155      	cbz	r5, 8000dc8 <__udivmoddi4+0x200>
 8000db2:	ebb8 030e 	subs.w	r3, r8, lr
 8000db6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dba:	fa04 f606 	lsl.w	r6, r4, r6
 8000dbe:	40cb      	lsrs	r3, r1
 8000dc0:	431e      	orrs	r6, r3
 8000dc2:	40cc      	lsrs	r4, r1
 8000dc4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	e750      	b.n	8000c6e <__udivmoddi4+0xa6>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f103 	lsr.w	r1, r0, r3
 8000dd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ddc:	4094      	lsls	r4, r2
 8000dde:	430c      	orrs	r4, r1
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de8:	fa1f f78c 	uxth.w	r7, ip
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3110 	mls	r1, r8, r0, r3
 8000df4:	0c23      	lsrs	r3, r4, #16
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f107 	mul.w	r1, r0, r7
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x24c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e0a:	d22c      	bcs.n	8000e66 <__udivmoddi4+0x29e>
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	d92a      	bls.n	8000e66 <__udivmoddi4+0x29e>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4463      	add	r3, ip
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e24:	fb01 f307 	mul.w	r3, r1, r7
 8000e28:	42a3      	cmp	r3, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x276>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e34:	d213      	bcs.n	8000e5e <__udivmoddi4+0x296>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d911      	bls.n	8000e5e <__udivmoddi4+0x296>
 8000e3a:	3902      	subs	r1, #2
 8000e3c:	4464      	add	r4, ip
 8000e3e:	1ae4      	subs	r4, r4, r3
 8000e40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e44:	e739      	b.n	8000cba <__udivmoddi4+0xf2>
 8000e46:	4604      	mov	r4, r0
 8000e48:	e6f0      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e706      	b.n	8000c5c <__udivmoddi4+0x94>
 8000e4e:	45c8      	cmp	r8, r9
 8000e50:	d2ae      	bcs.n	8000db0 <__udivmoddi4+0x1e8>
 8000e52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e5a:	3801      	subs	r0, #1
 8000e5c:	e7a8      	b.n	8000db0 <__udivmoddi4+0x1e8>
 8000e5e:	4631      	mov	r1, r6
 8000e60:	e7ed      	b.n	8000e3e <__udivmoddi4+0x276>
 8000e62:	4603      	mov	r3, r0
 8000e64:	e799      	b.n	8000d9a <__udivmoddi4+0x1d2>
 8000e66:	4630      	mov	r0, r6
 8000e68:	e7d4      	b.n	8000e14 <__udivmoddi4+0x24c>
 8000e6a:	46d6      	mov	lr, sl
 8000e6c:	e77f      	b.n	8000d6e <__udivmoddi4+0x1a6>
 8000e6e:	4463      	add	r3, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e74d      	b.n	8000d10 <__udivmoddi4+0x148>
 8000e74:	4606      	mov	r6, r0
 8000e76:	4623      	mov	r3, r4
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e70f      	b.n	8000c9c <__udivmoddi4+0xd4>
 8000e7c:	3e02      	subs	r6, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	e730      	b.n	8000ce4 <__udivmoddi4+0x11c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <CRC16>:
//    free(byteArray);
//    return crc;
//}

uint16_t CRC16(const char *data)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	uint16_t crc = 0xFFFF;
 8000e90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e94:	82fb      	strh	r3, [r7, #22]
    // Iterate over each character of the input string
    for (size_t i = 0; data[i] != '\0'; ++i)
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	e013      	b.n	8000ec4 <CRC16+0x3c>
    {
        uint8_t byte = (uint8_t)data[i];
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	73fb      	strb	r3, [r7, #15]
        crc = (crc >> 8) ^ crc16_table[(crc ^ byte) & 0xFF];
 8000ea6:	8afb      	ldrh	r3, [r7, #22]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	8af9      	ldrh	r1, [r7, #22]
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	404b      	eors	r3, r1
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	490a      	ldr	r1, [pc, #40]	@ (8000ee0 <CRC16+0x58>)
 8000eb6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000eba:	4053      	eors	r3, r2
 8000ebc:	82fb      	strh	r3, [r7, #22]
    for (size_t i = 0; data[i] != '\0'; ++i)
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1e5      	bne.n	8000e9c <CRC16+0x14>
    }

    return crc;
 8000ed0:	8afb      	ldrh	r3, [r7, #22]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	0800e584 	.word	0x0800e584

08000ee4 <RequestData_Driver>:
//Variabel arus setiap SG dan tegangan
uint16_t VoltDC[3], VoltAC[3];
uint16_t I_LAMP[36];


void RequestData_Driver(UART_HandleTypeDef *huart, uint8_t driver_id){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	char txbuff[10];
	sprintf(txbuff, "$%d#", driver_id);
 8000ef0:	78fa      	ldrb	r2, [r7, #3]
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	4912      	ldr	r1, [pc, #72]	@ (8000f40 <RequestData_Driver+0x5c>)
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f00a ffcb 	bl	800be94 <siprintf>

	HAL_GPIO_WritePin(PORT, PIN, 1);
 8000efe:	2201      	movs	r2, #1
 8000f00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f04:	480f      	ldr	r0, [pc, #60]	@ (8000f44 <RequestData_Driver+0x60>)
 8000f06:	f007 ff31 	bl	8008d6c <HAL_GPIO_WritePin>
	HAL_UART_Transmit(huart, (uint8_t*)txbuff, strlen(txbuff),1000);
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f95e 	bl	80001d0 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	f107 010c 	add.w	r1, r7, #12
 8000f1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f009 fdf1 	bl	800ab08 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(PORT, PIN, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f2c:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <RequestData_Driver+0x60>)
 8000f2e:	f007 ff1d 	bl	8008d6c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f32:	200a      	movs	r0, #10
 8000f34:	f007 f93c 	bl	80081b0 <HAL_Delay>
}
 8000f38:	bf00      	nop
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	0800e028 	.word	0x0800e028
 8000f44:	40020000 	.word	0x40020000

08000f48 <Receive_485>:

void Receive_485(UART_HandleTypeDef *huart)
{ //fungsi harus dipanggil di dalam interupt USART
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0f8      	sub	sp, #480	@ 0x1e0
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000f52:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8000f56:	6018      	str	r0, [r3, #0]
	static uint16_t cnt = 0;
	static char bufferData[100];
	char parsedData[20][20];
	uint16_t driverData[20];

	if(rxData == '@')
 8000f58:	4b8c      	ldr	r3, [pc, #560]	@ (800118c <Receive_485+0x244>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b40      	cmp	r3, #64	@ 0x40
 8000f5e:	d140      	bne.n	8000fe2 <Receive_485+0x9a>
	{
		for(int p=0; p<20; p++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000f66:	e021      	b.n	8000fac <Receive_485+0x64>
		{
			for(int q=0; q<20; q++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8000f6e:	e014      	b.n	8000f9a <Receive_485+0x52>
			{
				parsedData[p][q]='\0';
 8000f70:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000f74:	f5a3 71d6 	sub.w	r1, r3, #428	@ 0x1ac
 8000f78:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	18ca      	adds	r2, r1, r3
 8000f86:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8000f8a:	4413      	add	r3, r2
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
			for(int q=0; q<20; q++)
 8000f90:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8000f94:	3301      	adds	r3, #1
 8000f96:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8000f9a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8000f9e:	2b13      	cmp	r3, #19
 8000fa0:	dde6      	ble.n	8000f70 <Receive_485+0x28>
		for(int p=0; p<20; p++)
 8000fa2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000fac:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8000fb0:	2b13      	cmp	r3, #19
 8000fb2:	ddd9      	ble.n	8000f68 <Receive_485+0x20>
			}
		}
		for(int p=0; p<100; p++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8000fba:	e00a      	b.n	8000fd2 <Receive_485+0x8a>
		{
			bufferData[p] = '\0';
 8000fbc:	4a74      	ldr	r2, [pc, #464]	@ (8001190 <Receive_485+0x248>)
 8000fbe:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000fc2:	4413      	add	r3, r2
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
		for(int p=0; p<100; p++)
 8000fc8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000fcc:	3301      	adds	r3, #1
 8000fce:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8000fd2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000fd6:	2b63      	cmp	r3, #99	@ 0x63
 8000fd8:	ddf0      	ble.n	8000fbc <Receive_485+0x74>
		}
		cnt = 0;
 8000fda:	4b6e      	ldr	r3, [pc, #440]	@ (8001194 <Receive_485+0x24c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	801a      	strh	r2, [r3, #0]
 8000fe0:	e0c6      	b.n	8001170 <Receive_485+0x228>
	}

	else if(rxData == '&')
 8000fe2:	4b6a      	ldr	r3, [pc, #424]	@ (800118c <Receive_485+0x244>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b26      	cmp	r3, #38	@ 0x26
 8000fe8:	f040 80a8 	bne.w	800113c <Receive_485+0x1f4>
	{
		for(int p=0, q=0, r=0; p < strlen(bufferData); p++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000ffe:	e044      	b.n	800108a <Receive_485+0x142>
		{
			if(bufferData[p] != ',')
 8001000:	4a63      	ldr	r2, [pc, #396]	@ (8001190 <Receive_485+0x248>)
 8001002:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001006:	4413      	add	r3, r2
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b2c      	cmp	r3, #44	@ 0x2c
 800100c:	d01a      	beq.n	8001044 <Receive_485+0xfc>
			{
				parsedData[q][r] = bufferData[p];
 800100e:	4a60      	ldr	r2, [pc, #384]	@ (8001190 <Receive_485+0x248>)
 8001010:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001014:	4413      	add	r3, r2
 8001016:	7818      	ldrb	r0, [r3, #0]
 8001018:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800101c:	f5a3 71d6 	sub.w	r1, r3, #428	@ 0x1ac
 8001020:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	18ca      	adds	r2, r1, r3
 800102e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001032:	4413      	add	r3, r2
 8001034:	4602      	mov	r2, r0
 8001036:	701a      	strb	r2, [r3, #0]
				r++;
 8001038:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800103c:	3301      	adds	r3, #1
 800103e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001042:	e01d      	b.n	8001080 <Receive_485+0x138>
			}
			else
			{
				driverData[q] = atoi(parsedData[q]);
 8001044:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001048:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	4618      	mov	r0, r3
 8001058:	f00a fd66 	bl	800bb28 <atoi>
 800105c:	4603      	mov	r3, r0
 800105e:	b299      	uxth	r1, r3
 8001060:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001064:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001068:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800106c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				q++;
 8001070:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001074:	3301      	adds	r3, #1
 8001076:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
				r=0;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
		for(int p=0, q=0, r=0; p < strlen(bufferData); p++)
 8001080:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001084:	3301      	adds	r3, #1
 8001086:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800108a:	4841      	ldr	r0, [pc, #260]	@ (8001190 <Receive_485+0x248>)
 800108c:	f7ff f8a0 	bl	80001d0 <strlen>
 8001090:	4602      	mov	r2, r0
 8001092:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001096:	429a      	cmp	r2, r3
 8001098:	d8b2      	bhi.n	8001000 <Receive_485+0xb8>
			}
		}

		driverID = driverData[0];
 800109a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800109e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
		VoltDC[driverID-1] = driverData[1];
 80010a8:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
 80010ac:	3b01      	subs	r3, #1
 80010ae:	f507 72f0 	add.w	r2, r7, #480	@ 0x1e0
 80010b2:	f5a2 72ea 	sub.w	r2, r2, #468	@ 0x1d4
 80010b6:	8851      	ldrh	r1, [r2, #2]
 80010b8:	4a37      	ldr	r2, [pc, #220]	@ (8001198 <Receive_485+0x250>)
 80010ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		VoltAC[driverID-1] = driverData[2];
 80010be:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f507 72f0 	add.w	r2, r7, #480	@ 0x1e0
 80010c8:	f5a2 72ea 	sub.w	r2, r2, #468	@ 0x1d4
 80010cc:	8891      	ldrh	r1, [r2, #4]
 80010ce:	4a33      	ldr	r2, [pc, #204]	@ (800119c <Receive_485+0x254>)
 80010d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t f=(3+(driverID-1)*12); f<(15+(driverID-1)*12); f++){
 80010d4:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
 80010d8:	461a      	mov	r2, r3
 80010da:	0052      	lsls	r2, r2, #1
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	3b09      	subs	r3, #9
 80010e4:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
 80010e8:	e01a      	b.n	8001120 <Receive_485+0x1d8>
			I_LAMP[f-3] = driverData[f-((driverID-1)*12)];
 80010ea:	f897 11c7 	ldrb.w	r1, [r7, #455]	@ 0x1c7
 80010ee:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
 80010f2:	1e5a      	subs	r2, r3, #1
 80010f4:	4613      	mov	r3, r2
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4419      	add	r1, r3
 80010fe:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
 8001102:	3b03      	subs	r3, #3
 8001104:	f507 72f0 	add.w	r2, r7, #480	@ 0x1e0
 8001108:	f5a2 72ea 	sub.w	r2, r2, #468	@ 0x1d4
 800110c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001110:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <Receive_485+0x258>)
 8001112:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t f=(3+(driverID-1)*12); f<(15+(driverID-1)*12); f++){
 8001116:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
 800111a:	3301      	adds	r3, #1
 800111c:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
 8001120:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
 8001124:	1e5a      	subs	r2, r3, #1
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	f103 020e 	add.w	r2, r3, #14
 8001132:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
 8001136:	429a      	cmp	r2, r3
 8001138:	dad7      	bge.n	80010ea <Receive_485+0x1a2>
 800113a:	e019      	b.n	8001170 <Receive_485+0x228>
		}
	}

	else
	{
		bufferData[cnt] = rxData;
 800113c:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <Receive_485+0x24c>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b12      	ldr	r3, [pc, #72]	@ (800118c <Receive_485+0x244>)
 8001144:	7819      	ldrb	r1, [r3, #0]
 8001146:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <Receive_485+0x248>)
 8001148:	5499      	strb	r1, [r3, r2]
		cnt++;
 800114a:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <Receive_485+0x24c>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	b29a      	uxth	r2, r3
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <Receive_485+0x24c>)
 8001154:	801a      	strh	r2, [r3, #0]
		cnt=cnt%100;
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <Receive_485+0x24c>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	4a12      	ldr	r2, [pc, #72]	@ (80011a4 <Receive_485+0x25c>)
 800115c:	fba2 1203 	umull	r1, r2, r2, r3
 8001160:	0952      	lsrs	r2, r2, #5
 8001162:	2164      	movs	r1, #100	@ 0x64
 8001164:	fb01 f202 	mul.w	r2, r1, r2
 8001168:	1a9b      	subs	r3, r3, r2
 800116a:	b29a      	uxth	r2, r3
 800116c:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <Receive_485+0x24c>)
 800116e:	801a      	strh	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(huart, (uint8_t*)&rxData, 1);
 8001170:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001174:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001178:	2201      	movs	r2, #1
 800117a:	4904      	ldr	r1, [pc, #16]	@ (800118c <Receive_485+0x244>)
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	f009 fd4e 	bl	800ac1e <HAL_UART_Receive_IT>
}
 8001182:	bf00      	nop
 8001184:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200000b4 	.word	0x200000b4
 8001190:	20000110 	.word	0x20000110
 8001194:	20000174 	.word	0x20000174
 8001198:	200000b8 	.word	0x200000b8
 800119c:	200000c0 	.word	0x200000c0
 80011a0:	200000c8 	.word	0x200000c8
 80011a4:	51eb851f 	.word	0x51eb851f

080011a8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ba:	4b21      	ldr	r3, [pc, #132]	@ (8001240 <MX_ADC1_Init+0x98>)
 80011bc:	4a21      	ldr	r2, [pc, #132]	@ (8001244 <MX_ADC1_Init+0x9c>)
 80011be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <MX_ADC1_Init+0x98>)
 80011c2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <MX_ADC1_Init+0x98>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <MX_ADC1_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <MX_ADC1_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011da:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <MX_ADC1_Init+0x98>)
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e2:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <MX_ADC1_Init+0x98>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e8:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <MX_ADC1_Init+0x98>)
 80011ea:	4a17      	ldr	r2, [pc, #92]	@ (8001248 <MX_ADC1_Init+0xa0>)
 80011ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ee:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <MX_ADC1_Init+0x98>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <MX_ADC1_Init+0x98>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011fa:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <MX_ADC1_Init+0x98>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001202:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <MX_ADC1_Init+0x98>)
 8001204:	2201      	movs	r2, #1
 8001206:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001208:	480d      	ldr	r0, [pc, #52]	@ (8001240 <MX_ADC1_Init+0x98>)
 800120a:	f006 fff5 	bl	80081f8 <HAL_ADC_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001214:	f004 fe5e 	bl	8005ed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001218:	230c      	movs	r3, #12
 800121a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800121c:	2301      	movs	r3, #1
 800121e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	@ (8001240 <MX_ADC1_Init+0x98>)
 800122a:	f007 f829 	bl	8008280 <HAL_ADC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001234:	f004 fe4e 	bl	8005ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000178 	.word	0x20000178
 8001244:	40012000 	.word	0x40012000
 8001248:	0f000001 	.word	0x0f000001

0800124c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	@ 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a17      	ldr	r2, [pc, #92]	@ (80012c8 <HAL_ADC_MspInit+0x7c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d127      	bne.n	80012be <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <HAL_ADC_MspInit+0x80>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001276:	4a15      	ldr	r2, [pc, #84]	@ (80012cc <HAL_ADC_MspInit+0x80>)
 8001278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800127c:	6453      	str	r3, [r2, #68]	@ 0x44
 800127e:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <HAL_ADC_MspInit+0x80>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <HAL_ADC_MspInit+0x80>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a0e      	ldr	r2, [pc, #56]	@ (80012cc <HAL_ADC_MspInit+0x80>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <HAL_ADC_MspInit+0x80>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = SENSOR_GRID_Pin|SENSOR_BATT_Pin|VREF_Pin;
 80012a6:	2307      	movs	r3, #7
 80012a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012aa:	2303      	movs	r3, #3
 80012ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <HAL_ADC_MspInit+0x84>)
 80012ba:	f007 fba3 	bl	8008a04 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	@ 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40012000 	.word	0x40012000
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020800 	.word	0x40020800

080012d4 <ConvertDecimalToBase64>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

void ConvertDecimalToBase64(uint32_t numDecimal,char* result)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
    uint8_t indx = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	73fb      	strb	r3, [r7, #15]
    if(numDecimal > 0)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d042      	beq.n	800136e <ConvertDecimalToBase64+0x9a>
    {
        while (numDecimal > 0)
 80012e8:	e010      	b.n	800130c <ConvertDecimalToBase64+0x38>
        {
        	result[indx++] = Base64Table[numDecimal % 64];
 80012ea:	4b26      	ldr	r3, [pc, #152]	@ (8001384 <ConvertDecimalToBase64+0xb0>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012f4:	441a      	add	r2, r3
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	1c59      	adds	r1, r3, #1
 80012fa:	73f9      	strb	r1, [r7, #15]
 80012fc:	4619      	mov	r1, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	440b      	add	r3, r1
 8001302:	7812      	ldrb	r2, [r2, #0]
 8001304:	701a      	strb	r2, [r3, #0]
        	numDecimal /= 64;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	099b      	lsrs	r3, r3, #6
 800130a:	607b      	str	r3, [r7, #4]
        while (numDecimal > 0)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1eb      	bne.n	80012ea <ConvertDecimalToBase64+0x16>
        }
        result[indx] = '\0';
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	4413      	add	r3, r2
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]

        // Reverse the string
        for (uint8_t i = 0, j = strlen(result)-1; i < j; i++, j--)
 800131c:	2300      	movs	r3, #0
 800131e:	73bb      	strb	r3, [r7, #14]
 8001320:	6838      	ldr	r0, [r7, #0]
 8001322:	f7fe ff55 	bl	80001d0 <strlen>
 8001326:	4603      	mov	r3, r0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	3b01      	subs	r3, #1
 800132c:	737b      	strb	r3, [r7, #13]
 800132e:	e019      	b.n	8001364 <ConvertDecimalToBase64+0x90>
        {
        	static char temp;
            temp = result[i];
 8001330:	7bbb      	ldrb	r3, [r7, #14]
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	4413      	add	r3, r2
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <ConvertDecimalToBase64+0xb4>)
 800133a:	701a      	strb	r2, [r3, #0]
            result[i] = result[j];
 800133c:	7b7b      	ldrb	r3, [r7, #13]
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	441a      	add	r2, r3
 8001342:	7bbb      	ldrb	r3, [r7, #14]
 8001344:	6839      	ldr	r1, [r7, #0]
 8001346:	440b      	add	r3, r1
 8001348:	7812      	ldrb	r2, [r2, #0]
 800134a:	701a      	strb	r2, [r3, #0]
            result[j] = temp;
 800134c:	7b7b      	ldrb	r3, [r7, #13]
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	4413      	add	r3, r2
 8001352:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <ConvertDecimalToBase64+0xb4>)
 8001354:	7812      	ldrb	r2, [r2, #0]
 8001356:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0, j = strlen(result)-1; i < j; i++, j--)
 8001358:	7bbb      	ldrb	r3, [r7, #14]
 800135a:	3301      	adds	r3, #1
 800135c:	73bb      	strb	r3, [r7, #14]
 800135e:	7b7b      	ldrb	r3, [r7, #13]
 8001360:	3b01      	subs	r3, #1
 8001362:	737b      	strb	r3, [r7, #13]
 8001364:	7bba      	ldrb	r2, [r7, #14]
 8001366:	7b7b      	ldrb	r3, [r7, #13]
 8001368:	429a      	cmp	r2, r3
 800136a:	d3e1      	bcc.n	8001330 <ConvertDecimalToBase64+0x5c>
    {
    	result[0]=0;
    	result[1]='\0';
    }

}
 800136c:	e006      	b.n	800137c <ConvertDecimalToBase64+0xa8>
    	result[0]=0;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
    	result[1]='\0';
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000000 	.word	0x20000000
 8001388:	200001c0 	.word	0x200001c0
 800138c:	00000000 	.word	0x00000000

08001390 <ConvertBase64ToDecimal>:

uint32_t ConvertBase64ToDecimal(const char *encoded)
{
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
    uint32_t val = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
    uint8_t length = strlen(encoded);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7fe ff17 	bl	80001d0 <strlen>
 80013a2:	4603      	mov	r3, r0
 80013a4:	75fb      	strb	r3, [r7, #23]
    for (uint32_t indx = 0; indx < length; indx++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
 80013aa:	e045      	b.n	8001438 <ConvertBase64ToDecimal+0xa8>
    {
        int power = length - (indx + 1);
 80013ac:	7dfa      	ldrb	r2, [r7, #23]
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	3b01      	subs	r3, #1
 80013b4:	613b      	str	r3, [r7, #16]
        const char *pos = strchr(Base64Table, encoded[indx]);
 80013b6:	4b28      	ldr	r3, [pc, #160]	@ (8001458 <ConvertBase64ToDecimal+0xc8>)
 80013b8:	6818      	ldr	r0, [r3, #0]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	4619      	mov	r1, r3
 80013c4:	f00a fde0 	bl	800bf88 <strchr>
 80013c8:	60f8      	str	r0, [r7, #12]
        if (pos == NULL)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <ConvertBase64ToDecimal+0x44>
        {
            // Character didnt present execution
            return 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e036      	b.n	8001442 <ConvertBase64ToDecimal+0xb2>
        }
        val += (uint32_t)(pos - Base64Table) * pow(BASE, power);
 80013d4:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <ConvertBase64ToDecimal+0xc8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f891 	bl	8000504 <__aeabi_ui2d>
 80013e2:	4604      	mov	r4, r0
 80013e4:	460d      	mov	r5, r1
 80013e6:	6938      	ldr	r0, [r7, #16]
 80013e8:	f7ff f89c 	bl	8000524 <__aeabi_i2d>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	ec43 2b11 	vmov	d1, r2, r3
 80013f4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8001450 <ConvertBase64ToDecimal+0xc0>
 80013f8:	f00b fea8 	bl	800d14c <pow>
 80013fc:	ec53 2b10 	vmov	r2, r3, d0
 8001400:	4620      	mov	r0, r4
 8001402:	4629      	mov	r1, r5
 8001404:	f7ff f8f8 	bl	80005f8 <__aeabi_dmul>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4614      	mov	r4, r2
 800140e:	461d      	mov	r5, r3
 8001410:	69f8      	ldr	r0, [r7, #28]
 8001412:	f7ff f877 	bl	8000504 <__aeabi_ui2d>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4620      	mov	r0, r4
 800141c:	4629      	mov	r1, r5
 800141e:	f7fe ff35 	bl	800028c <__adddf3>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	f7ff fb95 	bl	8000b58 <__aeabi_d2uiz>
 800142e:	4603      	mov	r3, r0
 8001430:	61fb      	str	r3, [r7, #28]
    for (uint32_t indx = 0; indx < length; indx++)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	3301      	adds	r3, #1
 8001436:	61bb      	str	r3, [r7, #24]
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	429a      	cmp	r2, r3
 800143e:	d3b5      	bcc.n	80013ac <ConvertBase64ToDecimal+0x1c>
    }
    return val;
 8001440:	69fb      	ldr	r3, [r7, #28]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3720      	adds	r7, #32
 8001446:	46bd      	mov	sp, r7
 8001448:	bdb0      	pop	{r4, r5, r7, pc}
 800144a:	bf00      	nop
 800144c:	f3af 8000 	nop.w
 8001450:	00000000 	.word	0x00000000
 8001454:	40500000 	.word	0x40500000
 8001458:	20000000 	.word	0x20000000

0800145c <GenerateKey>:
 * *) Combine all section to frame data below
 *    $encryptionKey64:DATA:CRC#
 */

uint32_t GenerateKey(uint32_t timeBase)
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b08b      	sub	sp, #44	@ 0x2c
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
    uint8_t number[] = {2, 3, 4, 5, 6, 7, 8, 9};
 8001464:	4a33      	ldr	r2, [pc, #204]	@ (8001534 <GenerateKey+0xd8>)
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800146e:	e883 0003 	stmia.w	r3, {r0, r1}
    size_t size = sizeof(number) / sizeof(number[0]);
 8001472:	2308      	movs	r3, #8
 8001474:	61bb      	str	r3, [r7, #24]

    srand(timeBase);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f00a fb5a 	bl	800bb30 <srand>

    if (size > 1)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d93a      	bls.n	80014f8 <GenerateKey+0x9c>
    {
        for (uint8_t i = 0; i < size - 1; i++)
 8001482:	2300      	movs	r3, #0
 8001484:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001488:	e030      	b.n	80014ec <GenerateKey+0x90>
        {
          size_t j = i + rand() / (RAND_MAX / (size - i) + 1);
 800148a:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 800148e:	f00a fb7d 	bl	800bb8c <rand>
 8001492:	4603      	mov	r3, r0
 8001494:	4619      	mov	r1, r3
 8001496:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80014a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a6:	3301      	adds	r3, #1
 80014a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80014ac:	4423      	add	r3, r4
 80014ae:	617b      	str	r3, [r7, #20]

          uint8_t tempNumber = number[j];
 80014b0:	f107 0208 	add.w	r2, r7, #8
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	4413      	add	r3, r2
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	74fb      	strb	r3, [r7, #19]
          number[j] = number[i];
 80014bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014c0:	3328      	adds	r3, #40	@ 0x28
 80014c2:	443b      	add	r3, r7
 80014c4:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 80014c8:	f107 0208 	add.w	r2, r7, #8
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	4413      	add	r3, r2
 80014d0:	460a      	mov	r2, r1
 80014d2:	701a      	strb	r2, [r3, #0]
          number[i] = tempNumber;
 80014d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014d8:	3328      	adds	r3, #40	@ 0x28
 80014da:	443b      	add	r3, r7
 80014dc:	7cfa      	ldrb	r2, [r7, #19]
 80014de:	f803 2c20 	strb.w	r2, [r3, #-32]
        for (uint8_t i = 0; i < size - 1; i++)
 80014e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014e6:	3301      	adds	r3, #1
 80014e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80014ec:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d3c8      	bcc.n	800148a <GenerateKey+0x2e>
        }
    }

    uint32_t randomNumber = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
    for (uint8_t i = 0; i < 4; i++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	77fb      	strb	r3, [r7, #31]
 8001500:	e00f      	b.n	8001522 <GenerateKey+0xc6>
    {
        randomNumber = randomNumber * 10 + number[i];
 8001502:	6a3a      	ldr	r2, [r7, #32]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	461a      	mov	r2, r3
 800150e:	7ffb      	ldrb	r3, [r7, #31]
 8001510:	3328      	adds	r3, #40	@ 0x28
 8001512:	443b      	add	r3, r7
 8001514:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001518:	4413      	add	r3, r2
 800151a:	623b      	str	r3, [r7, #32]
    for (uint8_t i = 0; i < 4; i++)
 800151c:	7ffb      	ldrb	r3, [r7, #31]
 800151e:	3301      	adds	r3, #1
 8001520:	77fb      	strb	r3, [r7, #31]
 8001522:	7ffb      	ldrb	r3, [r7, #31]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d9ec      	bls.n	8001502 <GenerateKey+0xa6>
    }

    return randomNumber;
 8001528:	6a3b      	ldr	r3, [r7, #32]
}
 800152a:	4618      	mov	r0, r3
 800152c:	372c      	adds	r7, #44	@ 0x2c
 800152e:	46bd      	mov	sp, r7
 8001530:	bd90      	pop	{r4, r7, pc}
 8001532:	bf00      	nop
 8001534:	0800e1d0 	.word	0x0800e1d0

08001538 <SeparateData>:
 * origin : D1;D2D3;.....;Dn
 * target : char data[0][] = D1; char data[1][] = D2; .....
 *
 */
uint32_t SeparateData(char dataIn[], char result[][MAX_VARIABLE_CHARACTER])
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    uint32_t dataIndex = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
    char *token = strtok(dataIn, ";");
 8001546:	4913      	ldr	r1, [pc, #76]	@ (8001594 <SeparateData+0x5c>)
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f00a fd3d 	bl	800bfc8 <strtok>
 800154e:	60b8      	str	r0, [r7, #8]
    while (token != NULL && dataIndex < MAX_VARIABLE)
 8001550:	e013      	b.n	800157a <SeparateData+0x42>
    {
        strcpy(result[dataIndex], token);
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	461a      	mov	r2, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	4413      	add	r3, r2
 8001562:	68b9      	ldr	r1, [r7, #8]
 8001564:	4618      	mov	r0, r3
 8001566:	f00a fe14 	bl	800c192 <strcpy>
        dataIndex++;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3301      	adds	r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
        token = strtok(NULL, ";");
 8001570:	4908      	ldr	r1, [pc, #32]	@ (8001594 <SeparateData+0x5c>)
 8001572:	2000      	movs	r0, #0
 8001574:	f00a fd28 	bl	800bfc8 <strtok>
 8001578:	60b8      	str	r0, [r7, #8]
    while (token != NULL && dataIndex < MAX_VARIABLE)
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <SeparateData+0x50>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001586:	d3e4      	bcc.n	8001552 <SeparateData+0x1a>
    }
    return dataIndex;
 8001588:	68fb      	ldr	r3, [r7, #12]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	0800e1d8 	.word	0x0800e1d8

08001598 <ShuffleData>:
 *   Function to shuffle the position of elements
 * in the two-dimensional array based on shuffleKey
 *
 */
void ShuffleData(char data[][MAX_VARIABLE_CHARACTER], uint32_t size, uint32_t key)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b092      	sub	sp, #72	@ 0x48
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
    uint32_t keyDigits[4];
    uint32_t cycleShuffle = size / 10;
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	4a40      	ldr	r2, [pc, #256]	@ (80016a8 <ShuffleData+0x110>)
 80015a8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ac:	08db      	lsrs	r3, r3, #3
 80015ae:	637b      	str	r3, [r7, #52]	@ 0x34

    if(cycleShuffle != 0)
 80015b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d074      	beq.n	80016a0 <ShuffleData+0x108>
    {
        // Extracting the individual digits from shuffleKey
        for (int32_t i = 3; i >= 0; i--)
 80015b6:	2303      	movs	r3, #3
 80015b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80015ba:	e018      	b.n	80015ee <ShuffleData+0x56>
        {
            keyDigits[i] = key % 10;
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4b3a      	ldr	r3, [pc, #232]	@ (80016a8 <ShuffleData+0x110>)
 80015c0:	fba3 2301 	umull	r2, r3, r3, r1
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	1aca      	subs	r2, r1, r3
 80015d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	3348      	adds	r3, #72	@ 0x48
 80015d6:	443b      	add	r3, r7
 80015d8:	f843 2c2c 	str.w	r2, [r3, #-44]
            key /= 10;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a32      	ldr	r2, [pc, #200]	@ (80016a8 <ShuffleData+0x110>)
 80015e0:	fba2 2303 	umull	r2, r3, r2, r3
 80015e4:	08db      	lsrs	r3, r3, #3
 80015e6:	607b      	str	r3, [r7, #4]
        for (int32_t i = 3; i >= 0; i--)
 80015e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015ea:	3b01      	subs	r3, #1
 80015ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80015ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	dae3      	bge.n	80015bc <ShuffleData+0x24>
        }

        // Shuffle loop
		for(uint32_t i=0; i < cycleShuffle; i++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80015f8:	e04e      	b.n	8001698 <ShuffleData+0x100>
		{
			uint32_t factor = 10 * i;
 80015fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	633b      	str	r3, [r7, #48]	@ 0x30
			// Swap position
            uint32_t nowIndex = factor;
 8001606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001608:	63fb      	str	r3, [r7, #60]	@ 0x3c
            for (uint32_t j = 0; j < 4; j++)
 800160a:	2300      	movs	r3, #0
 800160c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800160e:	e03d      	b.n	800168c <ShuffleData+0xf4>
            {
                char temp[MAX_VARIABLE_CHARACTER];
                uint32_t thenIndex = factor+keyDigits[j]-1;
 8001610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	3348      	adds	r3, #72	@ 0x48
 8001616:	443b      	add	r3, r7
 8001618:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800161c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800161e:	4413      	add	r3, r2
 8001620:	3b01      	subs	r3, #1
 8001622:	62fb      	str	r3, [r7, #44]	@ 0x2c

                strcpy(temp, data[nowIndex]);
 8001624:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	461a      	mov	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	441a      	add	r2, r3
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4611      	mov	r1, r2
 800163a:	4618      	mov	r0, r3
 800163c:	f00a fda9 	bl	800c192 <strcpy>
                strcpy(data[nowIndex], data[thenIndex]);
 8001640:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1898      	adds	r0, r3, r2
 8001650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f00a fd96 	bl	800c192 <strcpy>
                strcpy(data[thenIndex], temp);
 8001666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	461a      	mov	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4413      	add	r3, r2
 8001676:	f107 0210 	add.w	r2, r7, #16
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f00a fd88 	bl	800c192 <strcpy>

                nowIndex = thenIndex;
 8001682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001684:	63fb      	str	r3, [r7, #60]	@ 0x3c
            for (uint32_t j = 0; j < 4; j++)
 8001686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001688:	3301      	adds	r3, #1
 800168a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800168c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800168e:	2b03      	cmp	r3, #3
 8001690:	d9be      	bls.n	8001610 <ShuffleData+0x78>
		for(uint32_t i=0; i < cycleShuffle; i++)
 8001692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001694:	3301      	adds	r3, #1
 8001696:	643b      	str	r3, [r7, #64]	@ 0x40
 8001698:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800169a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800169c:	429a      	cmp	r2, r3
 800169e:	d3ac      	bcc.n	80015fa <ShuffleData+0x62>
            }
		}
    }
}
 80016a0:	bf00      	nop
 80016a2:	3748      	adds	r7, #72	@ 0x48
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	cccccccd 	.word	0xcccccccd

080016ac <CombineData>:
 * Combine the elements of the two-dimensional array into a single string
 * Default separator used (;)
 *
 */
void CombineData(char dataIn[][MAX_VARIABLE_CHARACTER], uint32_t size, char *result)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	@ 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
    strcpy(result, ""); // Clear the combinedData array
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 80016be:	2300      	movs	r3, #0
 80016c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016c2:	e05e      	b.n	8001782 <CombineData+0xd6>
    {
    	uint32_t tempData = atoi(dataIn[i]);
 80016c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	461a      	mov	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4413      	add	r3, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f00a fa27 	bl	800bb28 <atoi>
 80016da:	4603      	mov	r3, r0
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24
    	char tempArray[16];

    	// Convert to base 64 before combining the data
    	ConvertDecimalToBase64(tempData, tempArray);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80016e6:	f7ff fdf5 	bl	80012d4 <ConvertDecimalToBase64>
    	for(uint32_t j = 0; j < strlen(tempArray); j++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016ee:	e01f      	b.n	8001730 <CombineData+0x84>
    	{
    		dataIn[i][j]=tempArray[j];
 80016f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	461a      	mov	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	441a      	add	r2, r3
 8001700:	f107 0114 	add.w	r1, r7, #20
 8001704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001706:	440b      	add	r3, r1
 8001708:	7819      	ldrb	r1, [r3, #0]
 800170a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800170c:	4413      	add	r3, r2
 800170e:	460a      	mov	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
    		dataIn[i][j+1]='\0';
 8001712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	461a      	mov	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	441a      	add	r2, r3
 8001722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001724:	3301      	adds	r3, #1
 8001726:	2100      	movs	r1, #0
 8001728:	54d1      	strb	r1, [r2, r3]
    	for(uint32_t j = 0; j < strlen(tempArray); j++)
 800172a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172c:	3301      	adds	r3, #1
 800172e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe fd4b 	bl	80001d0 <strlen>
 800173a:	4602      	mov	r2, r0
 800173c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800173e:	4293      	cmp	r3, r2
 8001740:	d3d6      	bcc.n	80016f0 <CombineData+0x44>
    	}

        strcat(result, dataIn[i]);
 8001742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	461a      	mov	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4413      	add	r3, r2
 8001752:	4619      	mov	r1, r3
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f00a fc08 	bl	800bf6a <strcat>
        if (i < size - 1)
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1e5a      	subs	r2, r3, #1
 800175e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001760:	429a      	cmp	r2, r3
 8001762:	d90b      	bls.n	800177c <CombineData+0xd0>
        {
        	// Add a semicolon separator if it's not the last element
            strcat(result, ";");
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7fe fd33 	bl	80001d0 <strlen>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	4908      	ldr	r1, [pc, #32]	@ (8001794 <CombineData+0xe8>)
 8001774:	461a      	mov	r2, r3
 8001776:	460b      	mov	r3, r1
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	8013      	strh	r3, [r2, #0]
    for (int i = 0; i < size; i++)
 800177c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800177e:	3301      	adds	r3, #1
 8001780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	429a      	cmp	r2, r3
 8001788:	d89c      	bhi.n	80016c4 <CombineData+0x18>
        }
    }
}
 800178a:	bf00      	nop
 800178c:	bf00      	nop
 800178e:	3730      	adds	r7, #48	@ 0x30
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	0800e1d8 	.word	0x0800e1d8

08001798 <ReplaceDictionary>:
 *            Replace dictionary of data
 * Pattern of replaced data depend on dictionaryKey
 *
 */
void ReplaceDictionary(char *data, uint32_t key)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08e      	sub	sp, #56	@ 0x38
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
	uint32_t size = strlen(data);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7fe fd14 	bl	80001d0 <strlen>
 80017a8:	62b8      	str	r0, [r7, #40]	@ 0x28

	uint32_t keyDigits[4];
    for (int32_t i = 3; i >= 0; i--)
 80017aa:	2303      	movs	r3, #3
 80017ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ae:	e018      	b.n	80017e2 <ReplaceDictionary+0x4a>
    {
        keyDigits[i] = key % 10;
 80017b0:	6839      	ldr	r1, [r7, #0]
 80017b2:	4b34      	ldr	r3, [pc, #208]	@ (8001884 <ReplaceDictionary+0xec>)
 80017b4:	fba3 2301 	umull	r2, r3, r3, r1
 80017b8:	08da      	lsrs	r2, r3, #3
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	1aca      	subs	r2, r1, r3
 80017c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	3338      	adds	r3, #56	@ 0x38
 80017ca:	443b      	add	r3, r7
 80017cc:	f843 2c30 	str.w	r2, [r3, #-48]
        key /= 10;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001884 <ReplaceDictionary+0xec>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	08db      	lsrs	r3, r3, #3
 80017da:	603b      	str	r3, [r7, #0]
    for (int32_t i = 3; i >= 0; i--)
 80017dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017de:	3b01      	subs	r3, #1
 80017e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80017e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	dae3      	bge.n	80017b0 <ReplaceDictionary+0x18>
    }

    for (uint8_t i = 0; i < 4; i++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80017ee:	e040      	b.n	8001872 <ReplaceDictionary+0xda>
    {
        uint32_t currentIndex = keyDigits[i];
 80017f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	3338      	adds	r3, #56	@ 0x38
 80017f8:	443b      	add	r3, r7
 80017fa:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24

        for (uint32_t j = 0; j < size; j++)
 8001800:	2300      	movs	r3, #0
 8001802:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001804:	e02c      	b.n	8001860 <ReplaceDictionary+0xc8>
        {
            if ((j + 1) % currentIndex == 0)
 8001806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001808:	3301      	adds	r3, #1
 800180a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800180c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001810:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001812:	fb01 f202 	mul.w	r2, r1, r2
 8001816:	1a9b      	subs	r3, r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d11e      	bne.n	800185a <ReplaceDictionary+0xc2>
            {
                // copying memory address of encrypt table
                const char *destinationCharPtr = dictionaryTable[i];
 800181c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001820:	4a19      	ldr	r2, [pc, #100]	@ (8001888 <ReplaceDictionary+0xf0>)
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	623b      	str	r3, [r7, #32]
                // Find index character of string compared by base table
                char *ptr = strchr(Base64SeparatorValue, data[j]);
 8001828:	4b18      	ldr	r3, [pc, #96]	@ (800188c <ReplaceDictionary+0xf4>)
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001830:	4413      	add	r3, r2
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	f00a fba7 	bl	800bf88 <strchr>
 800183a:	61f8      	str	r0, [r7, #28]
                uint8_t sourceIndex = ptr - Base64SeparatorValue;
 800183c:	4b13      	ldr	r3, [pc, #76]	@ (800188c <ReplaceDictionary+0xf4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	76fb      	strb	r3, [r7, #27]
                // Save replacement character to temporary char variable
                char destinationChar = destinationCharPtr[sourceIndex];
 8001846:	7efb      	ldrb	r3, [r7, #27]
 8001848:	6a3a      	ldr	r2, [r7, #32]
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	76bb      	strb	r3, [r7, #26]
                data[j]=destinationChar;
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001854:	4413      	add	r3, r2
 8001856:	7eba      	ldrb	r2, [r7, #26]
 8001858:	701a      	strb	r2, [r3, #0]
        for (uint32_t j = 0; j < size; j++)
 800185a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185c:	3301      	adds	r3, #1
 800185e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001860:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001864:	429a      	cmp	r2, r3
 8001866:	d3ce      	bcc.n	8001806 <ReplaceDictionary+0x6e>
    for (uint8_t i = 0; i < 4; i++)
 8001868:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800186c:	3301      	adds	r3, #1
 800186e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001872:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001876:	2b03      	cmp	r3, #3
 8001878:	d9ba      	bls.n	80017f0 <ReplaceDictionary+0x58>
            }

        }
    }
}
 800187a:	bf00      	nop
 800187c:	bf00      	nop
 800187e:	3738      	adds	r7, #56	@ 0x38
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	cccccccd 	.word	0xcccccccd
 8001888:	20000008 	.word	0x20000008
 800188c:	20000004 	.word	0x20000004

08001890 <EncryptData>:


void EncryptData(char *data, char topic)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08e      	sub	sp, #56	@ 0x38
 8001894:	af04      	add	r7, sp, #16
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	70fb      	strb	r3, [r7, #3]
	// Generate encryptKey
	uint32_t shuffleKey = GenerateKey(HAL_GetTick());
 800189c:	f006 fc7c 	bl	8008198 <HAL_GetTick>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fdda 	bl	800145c <GenerateKey>
 80018a8:	6278      	str	r0, [r7, #36]	@ 0x24
	//HAL_Delay(100);
	uint32_t dictionaryKey = GenerateKey(TIM2->CNT);
 80018aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fdd3 	bl	800145c <GenerateKey>
 80018b6:	6238      	str	r0, [r7, #32]
	//HAL_Delay(100);
	uint32_t encryptKey = (shuffleKey * 10000) + dictionaryKey;
 80018b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80018be:	fb02 f303 	mul.w	r3, r2, r3
 80018c2:	6a3a      	ldr	r2, [r7, #32]
 80018c4:	4413      	add	r3, r2
 80018c6:	61fb      	str	r3, [r7, #28]
	char encryptKey64[10];
	ConvertDecimalToBase64(encryptKey, encryptKey64);
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	4619      	mov	r1, r3
 80018ce:	69f8      	ldr	r0, [r7, #28]
 80018d0:	f7ff fd00 	bl	80012d4 <ConvertDecimalToBase64>

	// Separate the data
	uint32_t dataCount = SeparateData(data, arrayData);
 80018d4:	491c      	ldr	r1, [pc, #112]	@ (8001948 <EncryptData+0xb8>)
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fe2e 	bl	8001538 <SeparateData>
 80018dc:	61b8      	str	r0, [r7, #24]

	// Shuffle data position
	ShuffleData(arrayData, dataCount, shuffleKey);
 80018de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018e0:	69b9      	ldr	r1, [r7, #24]
 80018e2:	4819      	ldr	r0, [pc, #100]	@ (8001948 <EncryptData+0xb8>)
 80018e4:	f7ff fe58 	bl	8001598 <ShuffleData>

	// Combine data
	CombineData(arrayData, dataCount, combinedData);
 80018e8:	4a18      	ldr	r2, [pc, #96]	@ (800194c <EncryptData+0xbc>)
 80018ea:	69b9      	ldr	r1, [r7, #24]
 80018ec:	4816      	ldr	r0, [pc, #88]	@ (8001948 <EncryptData+0xb8>)
 80018ee:	f7ff fedd 	bl	80016ac <CombineData>

	// Change dictionary
	ReplaceDictionary(combinedData, dictionaryKey);
 80018f2:	6a39      	ldr	r1, [r7, #32]
 80018f4:	4815      	ldr	r0, [pc, #84]	@ (800194c <EncryptData+0xbc>)
 80018f6:	f7ff ff4f 	bl	8001798 <ReplaceDictionary>

	// Add colon and dollar
	sprintf(encryptedData,"$%c:%c:%s:%s:",topic, sourceInfo, encryptKey64, combinedData);
 80018fa:	78fa      	ldrb	r2, [r7, #3]
 80018fc:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <EncryptData+0xc0>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	4b12      	ldr	r3, [pc, #72]	@ (800194c <EncryptData+0xbc>)
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	460b      	mov	r3, r1
 800190e:	4911      	ldr	r1, [pc, #68]	@ (8001954 <EncryptData+0xc4>)
 8001910:	4811      	ldr	r0, [pc, #68]	@ (8001958 <EncryptData+0xc8>)
 8001912:	f00a fabf 	bl	800be94 <siprintf>

	// Calculate CRC16 Modbus
	uint16_t crc = CRC16(encryptedData);
 8001916:	4810      	ldr	r0, [pc, #64]	@ (8001958 <EncryptData+0xc8>)
 8001918:	f7ff fab6 	bl	8000e88 <CRC16>
 800191c:	4603      	mov	r3, r0
 800191e:	82fb      	strh	r3, [r7, #22]
	sprintf(encryptedData,"$%c:%c:%s:%s:%04X#\n\n",topic, sourceInfo, encryptKey64, combinedData, crc);
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <EncryptData+0xc0>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	4619      	mov	r1, r3
 8001928:	8afb      	ldrh	r3, [r7, #22]
 800192a:	9302      	str	r3, [sp, #8]
 800192c:	4b07      	ldr	r3, [pc, #28]	@ (800194c <EncryptData+0xbc>)
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	460b      	mov	r3, r1
 8001938:	4908      	ldr	r1, [pc, #32]	@ (800195c <EncryptData+0xcc>)
 800193a:	4807      	ldr	r0, [pc, #28]	@ (8001958 <EncryptData+0xc8>)
 800193c:	f00a faaa 	bl	800be94 <siprintf>
}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	@ 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200001c4 	.word	0x200001c4
 800194c:	20001164 	.word	0x20001164
 8001950:	20000018 	.word	0x20000018
 8001954:	0800e1dc 	.word	0x0800e1dc
 8001958:	20001934 	.word	0x20001934
 800195c:	0800e1ec 	.word	0x0800e1ec

08001960 <SeparateSections>:
 * Section-3 : decryptKey
 * Section-4 : data
 * Section-5 : crc
 */
uint8_t SeparateSections (char* dataIn, char result[][BUFFER_SIZE])
{
 8001960:	b580      	push	{r7, lr}
 8001962:	f6ad 3dc8 	subw	sp, sp, #3016	@ 0xbc8
 8001966:	af00      	add	r7, sp, #0
 8001968:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 800196c:	f6a3 33c4 	subw	r3, r3, #3012	@ 0xbc4
 8001970:	6018      	str	r0, [r3, #0]
 8001972:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 8001976:	f6a3 33c8 	subw	r3, r3, #3016	@ 0xbc8
 800197a:	6019      	str	r1, [r3, #0]
	//copy data to temp data
	char tempData[BUFFER_SIZE];
	strcpy(tempData,dataIn);
 800197c:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 8001980:	f6a3 33c4 	subw	r3, r3, #3012	@ 0xbc4
 8001984:	f107 0208 	add.w	r2, r7, #8
 8001988:	6819      	ldr	r1, [r3, #0]
 800198a:	4610      	mov	r0, r2
 800198c:	f00a fc01 	bl	800c192 <strcpy>

    // Separate data into sections based on the ":" separator
    char *token = strtok(tempData, ":");
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	491b      	ldr	r1, [pc, #108]	@ (8001a04 <SeparateSections+0xa4>)
 8001996:	4618      	mov	r0, r3
 8001998:	f00a fb16 	bl	800bfc8 <strtok>
 800199c:	f8c7 0bc4 	str.w	r0, [r7, #3012]	@ 0xbc4
    uint8_t sections = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 3bc3 	strb.w	r3, [r7, #3011]	@ 0xbc3
    // Iterate through the sections
    while (token != NULL)
 80019a6:	e01b      	b.n	80019e0 <SeparateSections+0x80>
    {
    	strcpy(result[sections],token);
 80019a8:	f897 3bc3 	ldrb.w	r3, [r7, #3011]	@ 0xbc3
 80019ac:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80019b0:	fb02 f303 	mul.w	r3, r2, r3
 80019b4:	f607 32c8 	addw	r2, r7, #3016	@ 0xbc8
 80019b8:	f6a2 32c8 	subw	r2, r2, #3016	@ 0xbc8
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	4413      	add	r3, r2
 80019c0:	f8d7 1bc4 	ldr.w	r1, [r7, #3012]	@ 0xbc4
 80019c4:	4618      	mov	r0, r3
 80019c6:	f00a fbe4 	bl	800c192 <strcpy>
        token = strtok(NULL, ":");
 80019ca:	490e      	ldr	r1, [pc, #56]	@ (8001a04 <SeparateSections+0xa4>)
 80019cc:	2000      	movs	r0, #0
 80019ce:	f00a fafb 	bl	800bfc8 <strtok>
 80019d2:	f8c7 0bc4 	str.w	r0, [r7, #3012]	@ 0xbc4
        sections++;
 80019d6:	f897 3bc3 	ldrb.w	r3, [r7, #3011]	@ 0xbc3
 80019da:	3301      	adds	r3, #1
 80019dc:	f887 3bc3 	strb.w	r3, [r7, #3011]	@ 0xbc3
    while (token != NULL)
 80019e0:	f8d7 3bc4 	ldr.w	r3, [r7, #3012]	@ 0xbc4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1df      	bne.n	80019a8 <SeparateSections+0x48>
    }

    if(sections != 5)
 80019e8:	f897 3bc3 	ldrb.w	r3, [r7, #3011]	@ 0xbc3
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d002      	beq.n	80019f6 <SeparateSections+0x96>
    {
    	sections = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f887 3bc3 	strb.w	r3, [r7, #3011]	@ 0xbc3
    }

    return sections;
 80019f6:	f897 3bc3 	ldrb.w	r3, [r7, #3011]	@ 0xbc3
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	f607 37c8 	addw	r7, r7, #3016	@ 0xbc8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	0800e204 	.word	0x0800e204

08001a08 <CompareCRC>:
/*
 * Extract section of data
 * Eliminate the colon symbol after calculating CRC16
 */
uint16_t CompareCRC(char* data)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
    uint16_t getCRC;
    uint16_t calcCRC;
    uint8_t crcOk=0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	77fb      	strb	r3, [r7, #31]
	size_t length = strlen(data);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7fe fbdb 	bl	80001d0 <strlen>
 8001a1a:	61b8      	str	r0, [r7, #24]

	if(length >= 5)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d92d      	bls.n	8001a7e <CompareCRC+0x76>
	{
		// Get CRC value from raw data
    	char temp[6];
        strcpy(temp, data + length - 5);
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	3b05      	subs	r3, #5
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	441a      	add	r2, r3
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f00a fbae 	bl	800c192 <strcpy>
        temp[4]='\0';
 8001a36:	2300      	movs	r3, #0
 8001a38:	743b      	strb	r3, [r7, #16]
        // convert from hexa to integer
        char *endptr;
        getCRC = strtol(temp, &endptr, 16);
 8001a3a:	f107 0108 	add.w	r1, r7, #8
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	2210      	movs	r2, #16
 8001a44:	4618      	mov	r0, r3
 8001a46:	f00a f959 	bl	800bcfc <strtol>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	82fb      	strh	r3, [r7, #22]
        if (*endptr != '\0')
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <CompareCRC+0x52>
        {
        	// return error
            return 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e015      	b.n	8001a86 <CompareCRC+0x7e>
        }

        // Delete the last 5 characters
        data[length - 5] = '\0';
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	3b05      	subs	r3, #5
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
        calcCRC = CRC16(data);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fa0e 	bl	8000e88 <CRC16>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	82bb      	strh	r3, [r7, #20]

        // Compare the CRC value
        if(getCRC == calcCRC)
 8001a70:	8afa      	ldrh	r2, [r7, #22]
 8001a72:	8abb      	ldrh	r3, [r7, #20]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d104      	bne.n	8001a82 <CompareCRC+0x7a>
        {
        	crcOk = 1;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	77fb      	strb	r3, [r7, #31]
 8001a7c:	e001      	b.n	8001a82 <CompareCRC+0x7a>
        }
	}
    else
    {
        // Handle the case where the data is too short
        return 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e001      	b.n	8001a86 <CompareCRC+0x7e>
    }

	return crcOk;
 8001a82:	7ffb      	ldrb	r3, [r7, #31]
 8001a84:	b29b      	uxth	r3, r3
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3720      	adds	r7, #32
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <ReverseShuffleData>:
 *   Function to shuffle the position of elements
 * in the two-dimensional array based on shuffleKey
 *
 */
void ReverseShuffleData(char data[][MAX_VARIABLE_CHARACTER], uint32_t size, uint32_t key)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b092      	sub	sp, #72	@ 0x48
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
    uint32_t keyDigits[4];
    uint32_t cycleShuffle = size / 10;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	4a40      	ldr	r2, [pc, #256]	@ (8001ba0 <ReverseShuffleData+0x110>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	08db      	lsrs	r3, r3, #3
 8001aa6:	637b      	str	r3, [r7, #52]	@ 0x34

    if(cycleShuffle != 0)
 8001aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d074      	beq.n	8001b98 <ReverseShuffleData+0x108>
    {
        // Extracting the individual digits from shuffleKey
        for (int32_t i = 3; i >= 0; i--)
 8001aae:	2303      	movs	r3, #3
 8001ab0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ab2:	e018      	b.n	8001ae6 <ReverseShuffleData+0x56>
        {
            keyDigits[i] = key % 10;
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba0 <ReverseShuffleData+0x110>)
 8001ab8:	fba3 2301 	umull	r2, r3, r3, r1
 8001abc:	08da      	lsrs	r2, r3, #3
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	1aca      	subs	r2, r1, r3
 8001ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	3348      	adds	r3, #72	@ 0x48
 8001ace:	443b      	add	r3, r7
 8001ad0:	f843 2c2c 	str.w	r2, [r3, #-44]
            key /= 10;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a32      	ldr	r2, [pc, #200]	@ (8001ba0 <ReverseShuffleData+0x110>)
 8001ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8001adc:	08db      	lsrs	r3, r3, #3
 8001ade:	607b      	str	r3, [r7, #4]
        for (int32_t i = 3; i >= 0; i--)
 8001ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ae6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	dae3      	bge.n	8001ab4 <ReverseShuffleData+0x24>
        }

        // Shuffle loop
        for(uint32_t i=0; i < cycleShuffle; i++)
 8001aec:	2300      	movs	r3, #0
 8001aee:	643b      	str	r3, [r7, #64]	@ 0x40
 8001af0:	e04e      	b.n	8001b90 <ReverseShuffleData+0x100>
		{
			uint32_t factor = 10 * i;
 8001af2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	633b      	str	r3, [r7, #48]	@ 0x30
			// Swap position
            uint32_t nowIndex = factor;
 8001afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
            for (int32_t j = 3; j >= 0; j--)
 8001b02:	2303      	movs	r3, #3
 8001b04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b06:	e03d      	b.n	8001b84 <ReverseShuffleData+0xf4>
            {
                char temp[MAX_VARIABLE_CHARACTER];
                uint32_t thenIndex = factor+keyDigits[j]-1;
 8001b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	3348      	adds	r3, #72	@ 0x48
 8001b0e:	443b      	add	r3, r7
 8001b10:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8001b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b16:	4413      	add	r3, r2
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                strcpy(temp, data[nowIndex]);
 8001b1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	461a      	mov	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	441a      	add	r2, r3
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f00a fb2d 	bl	800c192 <strcpy>
                strcpy(data[nowIndex], data[thenIndex]);
 8001b38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1898      	adds	r0, r3, r2
 8001b48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f00a fb1a 	bl	800c192 <strcpy>
                strcpy(data[thenIndex], temp);
 8001b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	461a      	mov	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f107 0210 	add.w	r2, r7, #16
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f00a fb0c 	bl	800c192 <strcpy>

                nowIndex = thenIndex;
 8001b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            for (int32_t j = 3; j >= 0; j--)
 8001b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b80:	3b01      	subs	r3, #1
 8001b82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	dabe      	bge.n	8001b08 <ReverseShuffleData+0x78>
        for(uint32_t i=0; i < cycleShuffle; i++)
 8001b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d3ac      	bcc.n	8001af2 <ReverseShuffleData+0x62>
            }
		}
    }
}
 8001b98:	bf00      	nop
 8001b9a:	3748      	adds	r7, #72	@ 0x48
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	cccccccd 	.word	0xcccccccd

08001ba4 <ReverseReplaceDictionary>:
 *            Replace dictionary of data
 * Pattern of replaced data depend on dictionaryKey
 *
 */
void ReverseReplaceDictionary(char *data, uint32_t key)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08e      	sub	sp, #56	@ 0x38
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
	uint32_t size = strlen(data);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7fe fb0e 	bl	80001d0 <strlen>
 8001bb4:	62b8      	str	r0, [r7, #40]	@ 0x28

	uint32_t keyDigits[4];
    for (int32_t i = 3; i >= 0 ; i--)
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bba:	e018      	b.n	8001bee <ReverseReplaceDictionary+0x4a>
    {
        keyDigits[i] = key % 10;
 8001bbc:	6839      	ldr	r1, [r7, #0]
 8001bbe:	4b37      	ldr	r3, [pc, #220]	@ (8001c9c <ReverseReplaceDictionary+0xf8>)
 8001bc0:	fba3 2301 	umull	r2, r3, r3, r1
 8001bc4:	08da      	lsrs	r2, r3, #3
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	1aca      	subs	r2, r1, r3
 8001bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	3338      	adds	r3, #56	@ 0x38
 8001bd6:	443b      	add	r3, r7
 8001bd8:	f843 2c30 	str.w	r2, [r3, #-48]
        key /= 10;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	4a2f      	ldr	r2, [pc, #188]	@ (8001c9c <ReverseReplaceDictionary+0xf8>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	603b      	str	r3, [r7, #0]
    for (int32_t i = 3; i >= 0 ; i--)
 8001be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bea:	3b01      	subs	r3, #1
 8001bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	dae3      	bge.n	8001bbc <ReverseReplaceDictionary+0x18>
    }

    for (int8_t i = 3; i >= 0; i--)
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001bfa:	e045      	b.n	8001c88 <ReverseReplaceDictionary+0xe4>
    {
        uint32_t currentIndex = keyDigits[i];
 8001bfc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	3338      	adds	r3, #56	@ 0x38
 8001c04:	443b      	add	r3, r7
 8001c06:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001c0a:	627b      	str	r3, [r7, #36]	@ 0x24

        for (uint32_t j = 0; j < size; j++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c10:	e02f      	b.n	8001c72 <ReverseReplaceDictionary+0xce>
        {
            if ((j + 1) % currentIndex == 0)
 8001c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c14:	3301      	adds	r3, #1
 8001c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c18:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c1e:	fb01 f202 	mul.w	r2, r1, r2
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d121      	bne.n	8001c6c <ReverseReplaceDictionary+0xc8>
            {
                // copying memory address of encrypt table
                const char *destinationCharPtr = Base64SeparatorValue;
 8001c28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca0 <ReverseReplaceDictionary+0xfc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	623b      	str	r3, [r7, #32]
                // Find index character of string compared by base table
                char *ptr = strchr(dictionaryTable[i], data[j]);
 8001c2e:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001c32:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca4 <ReverseReplaceDictionary+0x100>)
 8001c34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c3c:	4413      	add	r3, r2
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	f00a f9a1 	bl	800bf88 <strchr>
 8001c46:	61f8      	str	r0, [r7, #28]
                uint8_t sourceIndex = ptr - dictionaryTable[i];
 8001c48:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001c4c:	4a15      	ldr	r2, [pc, #84]	@ (8001ca4 <ReverseReplaceDictionary+0x100>)
 8001c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	76fb      	strb	r3, [r7, #27]
                // Save replacement character to temporary char variable
                char destinationChar = destinationCharPtr[sourceIndex];
 8001c58:	7efb      	ldrb	r3, [r7, #27]
 8001c5a:	6a3a      	ldr	r2, [r7, #32]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	76bb      	strb	r3, [r7, #26]
                data[j]=destinationChar;
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c66:	4413      	add	r3, r2
 8001c68:	7eba      	ldrb	r2, [r7, #26]
 8001c6a:	701a      	strb	r2, [r3, #0]
        for (uint32_t j = 0; j < size; j++)
 8001c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6e:	3301      	adds	r3, #1
 8001c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d3cb      	bcc.n	8001c12 <ReverseReplaceDictionary+0x6e>
    for (int8_t i = 3; i >= 0; i--)
 8001c7a:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001c88:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	dab5      	bge.n	8001bfc <ReverseReplaceDictionary+0x58>
            }

        }
    }
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3738      	adds	r7, #56	@ 0x38
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	cccccccd 	.word	0xcccccccd
 8001ca0:	20000004 	.word	0x20000004
 8001ca4:	20000008 	.word	0x20000008

08001ca8 <DecryptData>:


uint32_t DecryptData(char *data)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	// Separate 3 sections
	uint8_t numSection = SeparateSections (data,sectionsData);
 8001cb0:	4928      	ldr	r1, [pc, #160]	@ (8001d54 <DecryptData+0xac>)
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fe54 	bl	8001960 <SeparateSections>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	75fb      	strb	r3, [r7, #23]
	uint32_t numData;

	// Calculate CRC
	uint8_t isCrcOk = CompareCRC(data);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff fea3 	bl	8001a08 <CompareCRC>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	75bb      	strb	r3, [r7, #22]

	if(isCrcOk && (numSection==5))
 8001cc6:	7dbb      	ldrb	r3, [r7, #22]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d03e      	beq.n	8001d4a <DecryptData+0xa2>
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
 8001cce:	2b05      	cmp	r3, #5
 8001cd0:	d13b      	bne.n	8001d4a <DecryptData+0xa2>
	{
		// Get shuffleKey and dictionaryKey
		uint32_t numDecimal = ConvertBase64ToDecimal(sectionsData[2]);
 8001cd2:	4821      	ldr	r0, [pc, #132]	@ (8001d58 <DecryptData+0xb0>)
 8001cd4:	f7ff fb5c 	bl	8001390 <ConvertBase64ToDecimal>
 8001cd8:	6138      	str	r0, [r7, #16]
		uint32_t shuffleKey = numDecimal / 10000;
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8001d5c <DecryptData+0xb4>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	0b5b      	lsrs	r3, r3, #13
 8001ce4:	60fb      	str	r3, [r7, #12]
		uint32_t dictionaryKey = numDecimal % 10000;
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8001d5c <DecryptData+0xb4>)
 8001cea:	fba2 1203 	umull	r1, r2, r2, r3
 8001cee:	0b52      	lsrs	r2, r2, #13
 8001cf0:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001cf4:	fb01 f202 	mul.w	r2, r1, r2
 8001cf8:	1a9b      	subs	r3, r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]

		// Reverse replace dictionary
		ReverseReplaceDictionary(sectionsData[3],dictionaryKey);
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	4818      	ldr	r0, [pc, #96]	@ (8001d60 <DecryptData+0xb8>)
 8001d00:	f7ff ff50 	bl	8001ba4 <ReverseReplaceDictionary>

		//Separate the data
		numData = SeparateData(sectionsData[3],parsedData);
 8001d04:	4917      	ldr	r1, [pc, #92]	@ (8001d64 <DecryptData+0xbc>)
 8001d06:	4816      	ldr	r0, [pc, #88]	@ (8001d60 <DecryptData+0xb8>)
 8001d08:	f7ff fc16 	bl	8001538 <SeparateData>
 8001d0c:	61f8      	str	r0, [r7, #28]

		// Reverse shuffle data
		ReverseShuffleData(parsedData, numData, shuffleKey);
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	69f9      	ldr	r1, [r7, #28]
 8001d12:	4814      	ldr	r0, [pc, #80]	@ (8001d64 <DecryptData+0xbc>)
 8001d14:	f7ff febc 	bl	8001a90 <ReverseShuffleData>

		// Convert to decimal base
	    for (int i = 0; i < numData; i++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	e011      	b.n	8001d42 <DecryptData+0x9a>
	    {
	    	finalValue [i] = ConvertBase64ToDecimal(parsedData[i]);
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4a0e      	ldr	r2, [pc, #56]	@ (8001d64 <DecryptData+0xbc>)
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fb2f 	bl	8001390 <ConvertBase64ToDecimal>
 8001d32:	4602      	mov	r2, r0
 8001d34:	490c      	ldr	r1, [pc, #48]	@ (8001d68 <DecryptData+0xc0>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for (int i = 0; i < numData; i++)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	69fa      	ldr	r2, [r7, #28]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d8e9      	bhi.n	8001d1e <DecryptData+0x76>
	    }
	}
	return numData;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200024ec 	.word	0x200024ec
 8001d58:	20003c5c 	.word	0x20003c5c
 8001d5c:	d1b71759 	.word	0xd1b71759
 8001d60:	20004814 	.word	0x20004814
 8001d64:	20005f84 	.word	0x20005f84
 8001d68:	20006f24 	.word	0x20006f24

08001d6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08e      	sub	sp, #56	@ 0x38
 8001d70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
 8001d86:	4ba7      	ldr	r3, [pc, #668]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4aa6      	ldr	r2, [pc, #664]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001d8c:	f043 0310 	orr.w	r3, r3, #16
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4ba4      	ldr	r3, [pc, #656]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	623b      	str	r3, [r7, #32]
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
 8001da2:	4ba0      	ldr	r3, [pc, #640]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	4a9f      	ldr	r2, [pc, #636]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dae:	4b9d      	ldr	r3, [pc, #628]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	61fb      	str	r3, [r7, #28]
 8001db8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	4b99      	ldr	r3, [pc, #612]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	4a98      	ldr	r2, [pc, #608]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001dc4:	f043 0320 	orr.w	r3, r3, #32
 8001dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dca:	4b96      	ldr	r3, [pc, #600]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	61bb      	str	r3, [r7, #24]
 8001dd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	4b92      	ldr	r3, [pc, #584]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	4a91      	ldr	r2, [pc, #580]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de6:	4b8f      	ldr	r3, [pc, #572]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	4b8b      	ldr	r3, [pc, #556]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	4a8a      	ldr	r2, [pc, #552]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e02:	4b88      	ldr	r3, [pc, #544]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b84      	ldr	r3, [pc, #528]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4a83      	ldr	r2, [pc, #524]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b81      	ldr	r3, [pc, #516]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	4b7d      	ldr	r3, [pc, #500]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	4a7c      	ldr	r2, [pc, #496]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3a:	4b7a      	ldr	r3, [pc, #488]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	4b76      	ldr	r3, [pc, #472]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	4a75      	ldr	r2, [pc, #468]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e56:	4b73      	ldr	r3, [pc, #460]	@ (8002024 <MX_GPIO_Init+0x2b8>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RTC_POWER_Pin|SG8_3_Pin|SG5_3_Pin|SG5_2_Pin
 8001e62:	2200      	movs	r2, #0
 8001e64:	f243 1138 	movw	r1, #12600	@ 0x3138
 8001e68:	486f      	ldr	r0, [pc, #444]	@ (8002028 <MX_GPIO_Init+0x2bc>)
 8001e6a:	f006 ff7f 	bl	8008d6c <HAL_GPIO_WritePin>
                          |MEM_WP_Pin|RST_USR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_INT_EN_GPIO_Port, RS485_INT_EN_Pin, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2180      	movs	r1, #128	@ 0x80
 8001e72:	486e      	ldr	r0, [pc, #440]	@ (800202c <MX_GPIO_Init+0x2c0>)
 8001e74:	f006 ff7a 	bl	8008d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SG8_2_Pin|SG8_1_Pin|SG7_3_Pin|SG7_2_Pin
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f648 01ff 	movw	r1, #35071	@ 0x88ff
 8001e7e:	486c      	ldr	r0, [pc, #432]	@ (8002030 <MX_GPIO_Init+0x2c4>)
 8001e80:	f006 ff74 	bl	8008d6c <HAL_GPIO_WritePin>
                          |SG7_1_Pin|SG6_3_Pin|SG6_2_Pin|SG6_1_Pin
                          |EN_485_Pin|IND_ALARM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SG5_1_Pin|SG2_3_Pin|SG2_2_Pin|SG2_1_Pin
 8001e84:	2200      	movs	r2, #0
 8001e86:	f64f 71f9 	movw	r1, #65529	@ 0xfff9
 8001e8a:	486a      	ldr	r0, [pc, #424]	@ (8002034 <MX_GPIO_Init+0x2c8>)
 8001e8c:	f006 ff6e 	bl	8008d6c <HAL_GPIO_WritePin>
                          |SG1_3_Pin|SG1_2_Pin|SG1_1_Pin|SG11_3_Pin
                          |SG11_2_Pin|SG11_1_Pin|SG10_3_Pin|SG10_2_Pin
                          |SG10_1_Pin|SG9_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SG4_3_Pin|SG4_2_Pin|SG4_1_Pin|SG3_3_Pin
 8001e90:	2200      	movs	r2, #0
 8001e92:	f64f 4103 	movw	r1, #64515	@ 0xfc03
 8001e96:	4868      	ldr	r0, [pc, #416]	@ (8002038 <MX_GPIO_Init+0x2cc>)
 8001e98:	f006 ff68 	bl	8008d6c <HAL_GPIO_WritePin>
                          |SG3_2_Pin|SG3_1_Pin|SG9_2_Pin|SG9_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CPU_PROCESS_Pin|IND_GPS_Pin|IND_FLASHER_Pin|IND_HOLD_Pin
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f44f 417c 	mov.w	r1, #64512	@ 0xfc00
 8001ea2:	4866      	ldr	r0, [pc, #408]	@ (800203c <MX_GPIO_Init+0x2d0>)
 8001ea4:	f006 ff62 	bl	8008d6c <HAL_GPIO_WritePin>
                          |IND_SKIP_Pin|DO4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DO3_Pin|DO2_Pin|DO1_Pin|SG12_3_Pin
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f24e 011c 	movw	r1, #57372	@ 0xe01c
 8001eae:	4864      	ldr	r0, [pc, #400]	@ (8002040 <MX_GPIO_Init+0x2d4>)
 8001eb0:	f006 ff5c 	bl	8008d6c <HAL_GPIO_WritePin>
                          |SG12_2_Pin|SG12_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FB_SG8_3_Pin|FB_SG8_2_Pin|FB_SG8_1_Pin|FB_SG7_3_Pin
 8001eb4:	f44f 737f 	mov.w	r3, #1020	@ 0x3fc
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |FB_SG7_2_Pin|FB_SG1_3_Pin|FB_SG1_2_Pin|FB_SG1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	485b      	ldr	r0, [pc, #364]	@ (8002038 <MX_GPIO_Init+0x2cc>)
 8001eca:	f006 fd9b 	bl	8008a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = RTC_POWER_Pin|SG8_3_Pin|SG5_3_Pin|SG5_2_Pin
 8001ece:	f243 1338 	movw	r3, #12600	@ 0x3138
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |MEM_WP_Pin|RST_USR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4850      	ldr	r0, [pc, #320]	@ (8002028 <MX_GPIO_Init+0x2bc>)
 8001ee8:	f006 fd8c 	bl	8008a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FB_SG7_1_Pin|FB_SG6_3_Pin|FB_SG6_2_Pin|FB_SG6_1_Pin
 8001eec:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |FB_SG5_3_Pin|FB_SG5_2_Pin|FB_SG5_1_Pin|INPUT_FLASHER_Pin
                          |INPUT_HOLD_Pin|INPUT_SKIP_Pin|FB_SG4_1_Pin|FB_SG3_3_Pin
                          |FB_SG3_2_Pin|FB_SG3_1_Pin|FB_SG2_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001efe:	4619      	mov	r1, r3
 8001f00:	484a      	ldr	r0, [pc, #296]	@ (800202c <MX_GPIO_Init+0x2c0>)
 8001f02:	f006 fd7f 	bl	8008a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_INT_EN_Pin;
 8001f06:	2380      	movs	r3, #128	@ 0x80
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RS485_INT_EN_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4843      	ldr	r0, [pc, #268]	@ (800202c <MX_GPIO_Init+0x2c0>)
 8001f1e:	f006 fd71 	bl	8008a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SG8_2_Pin|SG8_1_Pin|SG7_3_Pin|SG7_2_Pin
 8001f22:	f648 03ff 	movw	r3, #35071	@ 0x88ff
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SG7_1_Pin|SG6_3_Pin|SG6_2_Pin|SG6_1_Pin
                          |EN_485_Pin|IND_ALARM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2300      	movs	r3, #0
 8001f32:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f38:	4619      	mov	r1, r3
 8001f3a:	483d      	ldr	r0, [pc, #244]	@ (8002030 <MX_GPIO_Init+0x2c4>)
 8001f3c:	f006 fd62 	bl	8008a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = SG5_1_Pin|SG2_3_Pin|SG2_2_Pin|SG2_1_Pin
 8001f40:	f64f 73f9 	movw	r3, #65529	@ 0xfff9
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SG1_3_Pin|SG1_2_Pin|SG1_1_Pin|SG11_3_Pin
                          |SG11_2_Pin|SG11_1_Pin|SG10_3_Pin|SG10_2_Pin
                          |SG10_1_Pin|SG9_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f46:	2301      	movs	r3, #1
 8001f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f56:	4619      	mov	r1, r3
 8001f58:	4836      	ldr	r0, [pc, #216]	@ (8002034 <MX_GPIO_Init+0x2c8>)
 8001f5a:	f006 fd53 	bl	8008a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = FB_SG4_3_Pin|FB_SG4_2_Pin;
 8001f5e:	2306      	movs	r3, #6
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f62:	2300      	movs	r3, #0
 8001f64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4830      	ldr	r0, [pc, #192]	@ (8002034 <MX_GPIO_Init+0x2c8>)
 8001f72:	f006 fd47 	bl	8008a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FB_SG2_2_Pin|FB_SG2_1_Pin|DI4_Pin|DI3_Pin
 8001f76:	f641 73e3 	movw	r3, #8163	@ 0x1fe3
 8001f7a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DI2_Pin|DI1_Pin|FB_SG10_1_Pin|FB_SG9_3_Pin
                          |FB_SG9_2_Pin|FB_SG9_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f88:	4619      	mov	r1, r3
 8001f8a:	482d      	ldr	r0, [pc, #180]	@ (8002040 <MX_GPIO_Init+0x2d4>)
 8001f8c:	f006 fd3a 	bl	8008a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SG4_3_Pin|SG4_2_Pin|SG4_1_Pin|SG3_3_Pin
 8001f90:	f64f 4303 	movw	r3, #64515	@ 0xfc03
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SG3_2_Pin|SG3_1_Pin|SG9_2_Pin|SG9_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f96:	2301      	movs	r3, #1
 8001f98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4823      	ldr	r0, [pc, #140]	@ (8002038 <MX_GPIO_Init+0x2cc>)
 8001faa:	f006 fd2b 	bl	8008a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CPU_PROCESS_Pin|IND_GPS_Pin|IND_FLASHER_Pin|IND_HOLD_Pin
 8001fae:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |IND_SKIP_Pin|DO4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	481d      	ldr	r0, [pc, #116]	@ (800203c <MX_GPIO_Init+0x2d0>)
 8001fc8:	f006 fd1c 	bl	8008a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = DO3_Pin|DO2_Pin|DO1_Pin|SG12_3_Pin
 8001fcc:	f24e 031c 	movw	r3, #57372	@ 0xe01c
 8001fd0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SG12_2_Pin|SG12_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4816      	ldr	r0, [pc, #88]	@ (8002040 <MX_GPIO_Init+0x2d4>)
 8001fe6:	f006 fd0d 	bl	8008a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	480c      	ldr	r0, [pc, #48]	@ (8002030 <MX_GPIO_Init+0x2c4>)
 8002000:	f006 fd00 	bl	8008a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FB_SG12_3_Pin|FB_SG12_2_Pin|FB_SG12_1_Pin|FB_SG11_3_Pin
 8002004:	23ff      	movs	r3, #255	@ 0xff
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24
                          |FB_SG11_2_Pin|FB_SG11_1_Pin|FB_SG10_3_Pin|FB_SG10_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002008:	2300      	movs	r3, #0
 800200a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002010:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002014:	4619      	mov	r1, r3
 8002016:	4809      	ldr	r0, [pc, #36]	@ (800203c <MX_GPIO_Init+0x2d0>)
 8002018:	f006 fcf4 	bl	8008a04 <HAL_GPIO_Init>

}
 800201c:	bf00      	nop
 800201e:	3738      	adds	r7, #56	@ 0x38
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800
 8002028:	40020800 	.word	0x40020800
 800202c:	40021400 	.word	0x40021400
 8002030:	40020000 	.word	0x40020000
 8002034:	40020400 	.word	0x40020400
 8002038:	40021000 	.word	0x40021000
 800203c:	40020c00 	.word	0x40020c00
 8002040:	40021800 	.word	0x40021800

08002044 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002048:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <MX_I2C3_Init+0x50>)
 800204a:	4a13      	ldr	r2, [pc, #76]	@ (8002098 <MX_I2C3_Init+0x54>)
 800204c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800204e:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <MX_I2C3_Init+0x50>)
 8002050:	4a12      	ldr	r2, [pc, #72]	@ (800209c <MX_I2C3_Init+0x58>)
 8002052:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002054:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <MX_I2C3_Init+0x50>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800205a:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <MX_I2C3_Init+0x50>)
 800205c:	2200      	movs	r2, #0
 800205e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002060:	4b0c      	ldr	r3, [pc, #48]	@ (8002094 <MX_I2C3_Init+0x50>)
 8002062:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002066:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002068:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <MX_I2C3_Init+0x50>)
 800206a:	2200      	movs	r2, #0
 800206c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800206e:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <MX_I2C3_Init+0x50>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002074:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <MX_I2C3_Init+0x50>)
 8002076:	2200      	movs	r2, #0
 8002078:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800207a:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <MX_I2C3_Init+0x50>)
 800207c:	2200      	movs	r2, #0
 800207e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002080:	4804      	ldr	r0, [pc, #16]	@ (8002094 <MX_I2C3_Init+0x50>)
 8002082:	f006 fea7 	bl	8008dd4 <HAL_I2C_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800208c:	f003 ff22 	bl	8005ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20007564 	.word	0x20007564
 8002098:	40005c00 	.word	0x40005c00
 800209c:	000186a0 	.word	0x000186a0

080020a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	@ 0x28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a29      	ldr	r2, [pc, #164]	@ (8002164 <HAL_I2C_MspInit+0xc4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d14b      	bne.n	800215a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	4b28      	ldr	r3, [pc, #160]	@ (8002168 <HAL_I2C_MspInit+0xc8>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	4a27      	ldr	r2, [pc, #156]	@ (8002168 <HAL_I2C_MspInit+0xc8>)
 80020cc:	f043 0304 	orr.w	r3, r3, #4
 80020d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d2:	4b25      	ldr	r3, [pc, #148]	@ (8002168 <HAL_I2C_MspInit+0xc8>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	4b21      	ldr	r3, [pc, #132]	@ (8002168 <HAL_I2C_MspInit+0xc8>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	4a20      	ldr	r2, [pc, #128]	@ (8002168 <HAL_I2C_MspInit+0xc8>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002168 <HAL_I2C_MspInit+0xc8>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002100:	2312      	movs	r3, #18
 8002102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002108:	2303      	movs	r3, #3
 800210a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800210c:	2304      	movs	r3, #4
 800210e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4619      	mov	r1, r3
 8002116:	4815      	ldr	r0, [pc, #84]	@ (800216c <HAL_I2C_MspInit+0xcc>)
 8002118:	f006 fc74 	bl	8008a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800211c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002122:	2312      	movs	r3, #18
 8002124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212a:	2303      	movs	r3, #3
 800212c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800212e:	2304      	movs	r3, #4
 8002130:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4619      	mov	r1, r3
 8002138:	480d      	ldr	r0, [pc, #52]	@ (8002170 <HAL_I2C_MspInit+0xd0>)
 800213a:	f006 fc63 	bl	8008a04 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <HAL_I2C_MspInit+0xc8>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	4a08      	ldr	r2, [pc, #32]	@ (8002168 <HAL_I2C_MspInit+0xc8>)
 8002148:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800214c:	6413      	str	r3, [r2, #64]	@ 0x40
 800214e:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_I2C_MspInit+0xc8>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800215a:	bf00      	nop
 800215c:	3728      	adds	r7, #40	@ 0x28
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40005c00 	.word	0x40005c00
 8002168:	40023800 	.word	0x40023800
 800216c:	40020800 	.word	0x40020800
 8002170:	40020000 	.word	0x40020000

08002174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002178:	f005 ffa8 	bl	80080cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800217c:	f000 f9d6 	bl	800252c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002180:	f7ff fdf4 	bl	8001d6c <MX_GPIO_Init>
  MX_RTC_Init();
 8002184:	f003 feac 	bl	8005ee0 <MX_RTC_Init>
  MX_I2C3_Init();
 8002188:	f7ff ff5c 	bl	8002044 <MX_I2C3_Init>
  MX_TIM2_Init();
 800218c:	f005 fc76 	bl	8007a7c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002190:	f005 fdea 	bl	8007d68 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002194:	f005 fe12 	bl	8007dbc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8002198:	f005 fe3a 	bl	8007e10 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800219c:	f7ff f804 	bl	80011a8 <MX_ADC1_Init>
  MX_UART4_Init();
 80021a0:	f005 fdb8 	bl	8007d14 <MX_UART4_Init>
  MX_TIM3_Init();
 80021a4:	f005 fcb8 	bl	8007b18 <MX_TIM3_Init>
  MX_TIM4_Init();
 80021a8:	f005 fd04 	bl	8007bb4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  state.power =1;
 80021ac:	4ba6      	ldr	r3, [pc, #664]	@ (8002448 <main+0x2d4>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim2);
 80021b2:	48a6      	ldr	r0, [pc, #664]	@ (800244c <main+0x2d8>)
 80021b4:	f008 f828 	bl	800a208 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80021b8:	48a5      	ldr	r0, [pc, #660]	@ (8002450 <main+0x2dc>)
 80021ba:	f008 f825 	bl	800a208 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80021be:	48a5      	ldr	r0, [pc, #660]	@ (8002454 <main+0x2e0>)
 80021c0:	f008 f822 	bl	800a208 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart6, Rx_data_a,1);
 80021c4:	2201      	movs	r2, #1
 80021c6:	49a4      	ldr	r1, [pc, #656]	@ (8002458 <main+0x2e4>)
 80021c8:	48a4      	ldr	r0, [pc, #656]	@ (800245c <main+0x2e8>)
 80021ca:	f008 fd28 	bl	800ac1e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, Rx_data_i,1);
 80021ce:	2201      	movs	r2, #1
 80021d0:	49a3      	ldr	r1, [pc, #652]	@ (8002460 <main+0x2ec>)
 80021d2:	48a4      	ldr	r0, [pc, #656]	@ (8002464 <main+0x2f0>)
 80021d4:	f008 fd23 	bl	800ac1e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxData, 1);
 80021d8:	2201      	movs	r2, #1
 80021da:	49a3      	ldr	r1, [pc, #652]	@ (8002468 <main+0x2f4>)
 80021dc:	48a3      	ldr	r0, [pc, #652]	@ (800246c <main+0x2f8>)
 80021de:	f008 fd1e 	bl	800ac1e <HAL_UART_Receive_IT>

  HAL_GPIO_WritePin(RTC_POWER_GPIO_Port, RTC_POWER_Pin, 1);
 80021e2:	2201      	movs	r2, #1
 80021e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021e8:	48a1      	ldr	r0, [pc, #644]	@ (8002470 <main+0x2fc>)
 80021ea:	f006 fdbf 	bl	8008d6c <HAL_GPIO_WritePin>
  set_RTC();
 80021ee:	f003 f9e3 	bl	80055b8 <set_RTC>
  kedip_startup();
 80021f2:	f003 fd8f 	bl	8005d14 <kedip_startup>

  Setting_Initial_PLAN_Phase_2();
 80021f6:	f003 fafd 	bl	80057f4 <Setting_Initial_PLAN_Phase_2>

  state.system=1;
 80021fa:	4b93      	ldr	r3, [pc, #588]	@ (8002448 <main+0x2d4>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	705a      	strb	r2, [r3, #1]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 // Pengambilan kondisi state dari Saklar menjadi state hardware (agreate state button dan server takeover)

	 if(((Switch_Flasher == 1) || (command.flasher==1)) && state_ATCS<=status_ERROR)
 8002200:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002204:	489b      	ldr	r0, [pc, #620]	@ (8002474 <main+0x300>)
 8002206:	f006 fd99 	bl	8008d3c <HAL_GPIO_ReadPin>
 800220a:	4603      	mov	r3, r0
 800220c:	2b01      	cmp	r3, #1
 800220e:	d003      	beq.n	8002218 <main+0xa4>
 8002210:	4b99      	ldr	r3, [pc, #612]	@ (8002478 <main+0x304>)
 8002212:	795b      	ldrb	r3, [r3, #5]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d113      	bne.n	8002240 <main+0xcc>
 8002218:	4b98      	ldr	r3, [pc, #608]	@ (800247c <main+0x308>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b64      	cmp	r3, #100	@ 0x64
 800221e:	d80f      	bhi.n	8002240 <main+0xcc>
	 {
		 state.normal=0;
 8002220:	4b89      	ldr	r3, [pc, #548]	@ (8002448 <main+0x2d4>)
 8002222:	2200      	movs	r2, #0
 8002224:	709a      	strb	r2, [r3, #2]
		 state.flasher=1;
 8002226:	4b88      	ldr	r3, [pc, #544]	@ (8002448 <main+0x2d4>)
 8002228:	2201      	movs	r2, #1
 800222a:	715a      	strb	r2, [r3, #5]
		 state.hold=0;
 800222c:	4b86      	ldr	r3, [pc, #536]	@ (8002448 <main+0x2d4>)
 800222e:	2200      	movs	r2, #0
 8002230:	70da      	strb	r2, [r3, #3]
		 state.skip=0;
 8002232:	4b85      	ldr	r3, [pc, #532]	@ (8002448 <main+0x2d4>)
 8002234:	2200      	movs	r2, #0
 8002236:	711a      	strb	r2, [r3, #4]
		 state.alarm=0;
 8002238:	4b83      	ldr	r3, [pc, #524]	@ (8002448 <main+0x2d4>)
 800223a:	2200      	movs	r2, #0
 800223c:	719a      	strb	r2, [r3, #6]
 800223e:	e066      	b.n	800230e <main+0x19a>
	 }
	 else if((Switch_Normal == 1) && state_ATCS<=status_ERROR)
 8002240:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002244:	488b      	ldr	r0, [pc, #556]	@ (8002474 <main+0x300>)
 8002246:	f006 fd79 	bl	8008d3c <HAL_GPIO_ReadPin>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d14f      	bne.n	80022f0 <main+0x17c>
 8002250:	4b8a      	ldr	r3, [pc, #552]	@ (800247c <main+0x308>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b64      	cmp	r3, #100	@ 0x64
 8002256:	d84b      	bhi.n	80022f0 <main+0x17c>
	 {
		 if((Switch_Hold == 1 && command.system == 0) || (command.hold == 1 && command.system == 1))
 8002258:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800225c:	4885      	ldr	r0, [pc, #532]	@ (8002474 <main+0x300>)
 800225e:	f006 fd6d 	bl	8008d3c <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	2b01      	cmp	r3, #1
 8002266:	d103      	bne.n	8002270 <main+0xfc>
 8002268:	4b83      	ldr	r3, [pc, #524]	@ (8002478 <main+0x304>)
 800226a:	785b      	ldrb	r3, [r3, #1]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d007      	beq.n	8002280 <main+0x10c>
 8002270:	4b81      	ldr	r3, [pc, #516]	@ (8002478 <main+0x304>)
 8002272:	78db      	ldrb	r3, [r3, #3]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d10d      	bne.n	8002294 <main+0x120>
 8002278:	4b7f      	ldr	r3, [pc, #508]	@ (8002478 <main+0x304>)
 800227a:	785b      	ldrb	r3, [r3, #1]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d109      	bne.n	8002294 <main+0x120>
		 {
			 state.normal=0;
 8002280:	4b71      	ldr	r3, [pc, #452]	@ (8002448 <main+0x2d4>)
 8002282:	2200      	movs	r2, #0
 8002284:	709a      	strb	r2, [r3, #2]
			 state.hold=1;
 8002286:	4b70      	ldr	r3, [pc, #448]	@ (8002448 <main+0x2d4>)
 8002288:	2201      	movs	r2, #1
 800228a:	70da      	strb	r2, [r3, #3]
			 state.skip=0;
 800228c:	4b6e      	ldr	r3, [pc, #440]	@ (8002448 <main+0x2d4>)
 800228e:	2200      	movs	r2, #0
 8002290:	711a      	strb	r2, [r3, #4]
 8002292:	e026      	b.n	80022e2 <main+0x16e>
		 }
		 else if((Switch_Skip == 1 && command.system == 0) || (command.skip == 1 && command.system == 1))
 8002294:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002298:	4876      	ldr	r0, [pc, #472]	@ (8002474 <main+0x300>)
 800229a:	f006 fd4f 	bl	8008d3c <HAL_GPIO_ReadPin>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d103      	bne.n	80022ac <main+0x138>
 80022a4:	4b74      	ldr	r3, [pc, #464]	@ (8002478 <main+0x304>)
 80022a6:	785b      	ldrb	r3, [r3, #1]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d007      	beq.n	80022bc <main+0x148>
 80022ac:	4b72      	ldr	r3, [pc, #456]	@ (8002478 <main+0x304>)
 80022ae:	791b      	ldrb	r3, [r3, #4]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d10d      	bne.n	80022d0 <main+0x15c>
 80022b4:	4b70      	ldr	r3, [pc, #448]	@ (8002478 <main+0x304>)
 80022b6:	785b      	ldrb	r3, [r3, #1]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d109      	bne.n	80022d0 <main+0x15c>
		 {
			 state.normal=0;
 80022bc:	4b62      	ldr	r3, [pc, #392]	@ (8002448 <main+0x2d4>)
 80022be:	2200      	movs	r2, #0
 80022c0:	709a      	strb	r2, [r3, #2]
			 state.hold=0;
 80022c2:	4b61      	ldr	r3, [pc, #388]	@ (8002448 <main+0x2d4>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	70da      	strb	r2, [r3, #3]
			 state.skip=1;
 80022c8:	4b5f      	ldr	r3, [pc, #380]	@ (8002448 <main+0x2d4>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	711a      	strb	r2, [r3, #4]
 80022ce:	e008      	b.n	80022e2 <main+0x16e>
		 }
		 else
		 {
			 state.normal=1;
 80022d0:	4b5d      	ldr	r3, [pc, #372]	@ (8002448 <main+0x2d4>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	709a      	strb	r2, [r3, #2]
			 state.hold=0;
 80022d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002448 <main+0x2d4>)
 80022d8:	2200      	movs	r2, #0
 80022da:	70da      	strb	r2, [r3, #3]
			 state.skip=0;
 80022dc:	4b5a      	ldr	r3, [pc, #360]	@ (8002448 <main+0x2d4>)
 80022de:	2200      	movs	r2, #0
 80022e0:	711a      	strb	r2, [r3, #4]
		 }
		 state.flasher=0;
 80022e2:	4b59      	ldr	r3, [pc, #356]	@ (8002448 <main+0x2d4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	715a      	strb	r2, [r3, #5]
		 state.alarm=0;
 80022e8:	4b57      	ldr	r3, [pc, #348]	@ (8002448 <main+0x2d4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	719a      	strb	r2, [r3, #6]
 80022ee:	e00e      	b.n	800230e <main+0x19a>
	 }
	 else
	 {
		 state.normal=0;
 80022f0:	4b55      	ldr	r3, [pc, #340]	@ (8002448 <main+0x2d4>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	709a      	strb	r2, [r3, #2]
		 state.flasher=0;
 80022f6:	4b54      	ldr	r3, [pc, #336]	@ (8002448 <main+0x2d4>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	715a      	strb	r2, [r3, #5]
		 state.hold=0;
 80022fc:	4b52      	ldr	r3, [pc, #328]	@ (8002448 <main+0x2d4>)
 80022fe:	2200      	movs	r2, #0
 8002300:	70da      	strb	r2, [r3, #3]
		 state.skip=0;
 8002302:	4b51      	ldr	r3, [pc, #324]	@ (8002448 <main+0x2d4>)
 8002304:	2200      	movs	r2, #0
 8002306:	711a      	strb	r2, [r3, #4]
		 state.alarm=1;
 8002308:	4b4f      	ldr	r3, [pc, #316]	@ (8002448 <main+0x2d4>)
 800230a:	2201      	movs	r2, #1
 800230c:	719a      	strb	r2, [r3, #6]
	 }

	 // State Hardware digunakan untuk menyalakan LED Indikator Status
	 HAL_GPIO_WritePin(IND_GPS_GPIO_Port, IND_GPS_Pin, state.normal);	// GPS tidak digunakan, digantikan dg indikator normal state.
 800230e:	4b4e      	ldr	r3, [pc, #312]	@ (8002448 <main+0x2d4>)
 8002310:	789b      	ldrb	r3, [r3, #2]
 8002312:	461a      	mov	r2, r3
 8002314:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002318:	4859      	ldr	r0, [pc, #356]	@ (8002480 <main+0x30c>)
 800231a:	f006 fd27 	bl	8008d6c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(IND_FLASHER_GPIO_Port, IND_FLASHER_Pin, state.flasher);
 800231e:	4b4a      	ldr	r3, [pc, #296]	@ (8002448 <main+0x2d4>)
 8002320:	795b      	ldrb	r3, [r3, #5]
 8002322:	461a      	mov	r2, r3
 8002324:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002328:	4855      	ldr	r0, [pc, #340]	@ (8002480 <main+0x30c>)
 800232a:	f006 fd1f 	bl	8008d6c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(IND_HOLD_GPIO_Port, IND_HOLD_Pin, state.hold);
 800232e:	4b46      	ldr	r3, [pc, #280]	@ (8002448 <main+0x2d4>)
 8002330:	78db      	ldrb	r3, [r3, #3]
 8002332:	461a      	mov	r2, r3
 8002334:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002338:	4851      	ldr	r0, [pc, #324]	@ (8002480 <main+0x30c>)
 800233a:	f006 fd17 	bl	8008d6c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(IND_SKIP_GPIO_Port, IND_SKIP_Pin, state.skip);
 800233e:	4b42      	ldr	r3, [pc, #264]	@ (8002448 <main+0x2d4>)
 8002340:	791b      	ldrb	r3, [r3, #4]
 8002342:	461a      	mov	r2, r3
 8002344:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002348:	484d      	ldr	r0, [pc, #308]	@ (8002480 <main+0x30c>)
 800234a:	f006 fd0f 	bl	8008d6c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(IND_ALARM_GPIO_Port, IND_ALARM_Pin, state.alarm);
 800234e:	4b3e      	ldr	r3, [pc, #248]	@ (8002448 <main+0x2d4>)
 8002350:	799b      	ldrb	r3, [r3, #6]
 8002352:	461a      	mov	r2, r3
 8002354:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002358:	484a      	ldr	r0, [pc, #296]	@ (8002484 <main+0x310>)
 800235a:	f006 fd07 	bl	8008d6c <HAL_GPIO_WritePin>

	 // Pengkondisian state hardware ke state ATCS software
	 old_state_ATCS = state_ATCS;
 800235e:	4b47      	ldr	r3, [pc, #284]	@ (800247c <main+0x308>)
 8002360:	781a      	ldrb	r2, [r3, #0]
 8002362:	4b49      	ldr	r3, [pc, #292]	@ (8002488 <main+0x314>)
 8002364:	701a      	strb	r2, [r3, #0]

	 if(state.normal == 1) 			state_ATCS = status_RUN;
 8002366:	4b38      	ldr	r3, [pc, #224]	@ (8002448 <main+0x2d4>)
 8002368:	789b      	ldrb	r3, [r3, #2]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d103      	bne.n	8002376 <main+0x202>
 800236e:	4b43      	ldr	r3, [pc, #268]	@ (800247c <main+0x308>)
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
 8002374:	e01a      	b.n	80023ac <main+0x238>
	 else if(state.flasher == 1) 	state_ATCS = status_FLASH;
 8002376:	4b34      	ldr	r3, [pc, #208]	@ (8002448 <main+0x2d4>)
 8002378:	795b      	ldrb	r3, [r3, #5]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d103      	bne.n	8002386 <main+0x212>
 800237e:	4b3f      	ldr	r3, [pc, #252]	@ (800247c <main+0x308>)
 8002380:	2204      	movs	r2, #4
 8002382:	701a      	strb	r2, [r3, #0]
 8002384:	e012      	b.n	80023ac <main+0x238>
	 else if(state.hold == 1) 		state_ATCS = status_HOLD;
 8002386:	4b30      	ldr	r3, [pc, #192]	@ (8002448 <main+0x2d4>)
 8002388:	78db      	ldrb	r3, [r3, #3]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d103      	bne.n	8002396 <main+0x222>
 800238e:	4b3b      	ldr	r3, [pc, #236]	@ (800247c <main+0x308>)
 8002390:	2202      	movs	r2, #2
 8002392:	701a      	strb	r2, [r3, #0]
 8002394:	e00a      	b.n	80023ac <main+0x238>
	 else if(state.skip == 1) 		state_ATCS = status_SKIP;
 8002396:	4b2c      	ldr	r3, [pc, #176]	@ (8002448 <main+0x2d4>)
 8002398:	791b      	ldrb	r3, [r3, #4]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d103      	bne.n	80023a6 <main+0x232>
 800239e:	4b37      	ldr	r3, [pc, #220]	@ (800247c <main+0x308>)
 80023a0:	2203      	movs	r2, #3
 80023a2:	701a      	strb	r2, [r3, #0]
 80023a4:	e002      	b.n	80023ac <main+0x238>
	 else state_ATCS = status_ERROR;
 80023a6:	4b35      	ldr	r3, [pc, #212]	@ (800247c <main+0x308>)
 80023a8:	2264      	movs	r2, #100	@ 0x64
 80023aa:	701a      	strb	r2, [r3, #0]

	// Pengkondisian Transisi Status ATCS
	 if(old_state_ATCS==status_RUN && state_ATCS == status_FLASH)
 80023ac:	4b36      	ldr	r3, [pc, #216]	@ (8002488 <main+0x314>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d10b      	bne.n	80023cc <main+0x258>
 80023b4:	4b31      	ldr	r3, [pc, #196]	@ (800247c <main+0x308>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d107      	bne.n	80023cc <main+0x258>
	 {
		 command_lamp_HIL(0, APILL_ALL_YELLOW);
 80023bc:	210a      	movs	r1, #10
 80023be:	2000      	movs	r0, #0
 80023c0:	f000 fb68 	bl	8002a94 <command_lamp_HIL>
		 HAL_Delay(1000);
 80023c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023c8:	f005 fef2 	bl	80081b0 <HAL_Delay>
	 }
	 if(old_state_ATCS==status_FLASH && state_ATCS==status_RUN)
 80023cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002488 <main+0x314>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d105      	bne.n	80023e0 <main+0x26c>
 80023d4:	4b29      	ldr	r3, [pc, #164]	@ (800247c <main+0x308>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <main+0x26c>
	 {
		 Reset_cycle_cond();
 80023dc:	f002 f85e 	bl	800449c <Reset_cycle_cond>
	 }
	 if(old_state_ATCS==status_HOLD && state_ATCS==status_RUN)
 80023e0:	4b29      	ldr	r3, [pc, #164]	@ (8002488 <main+0x314>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d10d      	bne.n	8002404 <main+0x290>
 80023e8:	4b24      	ldr	r3, [pc, #144]	@ (800247c <main+0x308>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d109      	bne.n	8002404 <main+0x290>
	 {
		 Reset_cycle_cond();
 80023f0:	f002 f854 	bl	800449c <Reset_cycle_cond>
		 command_lamp_HIL(0,APILL_ALL_RED);
 80023f4:	2109      	movs	r1, #9
 80023f6:	2000      	movs	r0, #0
 80023f8:	f000 fb4c 	bl	8002a94 <command_lamp_HIL>
		 HAL_Delay(5000);
 80023fc:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002400:	f005 fed6 	bl	80081b0 <HAL_Delay>
	 }

	// Mode Run Process
	if(state_ATCS==status_RUN)
 8002404:	4b1d      	ldr	r3, [pc, #116]	@ (800247c <main+0x308>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d14c      	bne.n	80024a6 <main+0x332>
	{
		if(Selected_PLAN<=7)
 800240c:	4b1f      	ldr	r3, [pc, #124]	@ (800248c <main+0x318>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b07      	cmp	r3, #7
 8002412:	d841      	bhi.n	8002498 <main+0x324>
		{
			green_conflict_check();
 8002414:	f002 f9a8 	bl	8004768 <green_conflict_check>
			update_second();
 8002418:	f002 fd50 	bl	8004ebc <update_second>
			if(timerun_cyc<PLAN_Cycle[Selected_PLAN])
 800241c:	4b1b      	ldr	r3, [pc, #108]	@ (800248c <main+0x318>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <main+0x31c>)
 8002424:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002428:	4b1a      	ldr	r3, [pc, #104]	@ (8002494 <main+0x320>)
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d908      	bls.n	8002442 <main+0x2ce>
			{
				//timerun_phs -> menyatakan lamanya fase sudah berjalan
				//timerun_cyc -> menyatakan lamanya cycle sudah berjalan
				Excute_Red_Time();
 8002430:	f000 ffd4 	bl	80033dc <Excute_Red_Time>
				Excute_Green_Time();
 8002434:	f001 faae 	bl	8003994 <Excute_Green_Time>
				Excute_Yellow_Time();
 8002438:	f001 fd86 	bl	8003f48 <Excute_Yellow_Time>
				Check_Phase_Time();
 800243c:	f001 ffd6 	bl	80043ec <Check_Phase_Time>
 8002440:	e6de      	b.n	8002200 <main+0x8c>
			}
			else
			{
				// Update PLAN yang akan dijalankan disini berdasarkan Schedulling
				Reset_cycle_cond();
 8002442:	f002 f82b 	bl	800449c <Reset_cycle_cond>
 8002446:	e6db      	b.n	8002200 <main+0x8c>
 8002448:	2000f444 	.word	0x2000f444
 800244c:	20016a50 	.word	0x20016a50
 8002450:	20016a98 	.word	0x20016a98
 8002454:	20016ae0 	.word	0x20016ae0
 8002458:	2000c3d8 	.word	0x2000c3d8
 800245c:	20016c00 	.word	0x20016c00
 8002460:	2000c3dc 	.word	0x2000c3dc
 8002464:	20016bb8 	.word	0x20016bb8
 8002468:	200000b4 	.word	0x200000b4
 800246c:	20016b70 	.word	0x20016b70
 8002470:	40020800 	.word	0x40020800
 8002474:	40021400 	.word	0x40021400
 8002478:	2000f44c 	.word	0x2000f44c
 800247c:	2000f453 	.word	0x2000f453
 8002480:	40020c00 	.word	0x40020c00
 8002484:	40020000 	.word	0x40020000
 8002488:	2000f454 	.word	0x2000f454
 800248c:	2000f48a 	.word	0x2000f48a
 8002490:	2000ee34 	.word	0x2000ee34
 8002494:	2000eb04 	.word	0x2000eb04
			}
		}
		else
		{
			Reset_cycle_cond();
 8002498:	f002 f800 	bl	800449c <Reset_cycle_cond>
			command_lamp_HIL(0, APILL_FLASH_Y_ALL);
 800249c:	210d      	movs	r1, #13
 800249e:	2000      	movs	r0, #0
 80024a0:	f000 faf8 	bl	8002a94 <command_lamp_HIL>
 80024a4:	e6ac      	b.n	8002200 <main+0x8c>
		}
	}


	else if(state_ATCS==status_FLASH)
 80024a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002518 <main+0x3a4>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d118      	bne.n	80024e0 <main+0x36c>
	{
		Running_Phase=0;
 80024ae:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <main+0x3a8>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	801a      	strh	r2, [r3, #0]
		timerun_phs=0;
 80024b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002520 <main+0x3ac>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	801a      	strh	r2, [r3, #0]
		timerun_cyc=0;
 80024ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002524 <main+0x3b0>)
 80024bc:	2200      	movs	r2, #0
 80024be:	801a      	strh	r2, [r3, #0]
		if(setting_changed)
 80024c0:	4b19      	ldr	r3, [pc, #100]	@ (8002528 <main+0x3b4>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d004      	beq.n	80024d2 <main+0x35e>
		{
			update_setting_from_extVar();
 80024c8:	f002 fec8 	bl	800525c <update_setting_from_extVar>
			setting_changed=0;
 80024cc:	4b16      	ldr	r3, [pc, #88]	@ (8002528 <main+0x3b4>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
		}
		command_lamp_HIL(0, APILL_FLASH_Y_ALL);
 80024d2:	210d      	movs	r1, #13
 80024d4:	2000      	movs	r0, #0
 80024d6:	f000 fadd 	bl	8002a94 <command_lamp_HIL>
		update_second_FLASH_HOLD_ERROR();
 80024da:	f002 fd31 	bl	8004f40 <update_second_FLASH_HOLD_ERROR>
 80024de:	e68f      	b.n	8002200 <main+0x8c>
	}

	else if(state_ATCS==status_HOLD)
 80024e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002518 <main+0x3a4>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d102      	bne.n	80024ee <main+0x37a>
	{
		update_second_FLASH_HOLD_ERROR();
 80024e8:	f002 fd2a 	bl	8004f40 <update_second_FLASH_HOLD_ERROR>
 80024ec:	e688      	b.n	8002200 <main+0x8c>
	}

	else if(state_ATCS==status_ERROR)
 80024ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002518 <main+0x3a4>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b64      	cmp	r3, #100	@ 0x64
 80024f4:	f47f ae84 	bne.w	8002200 <main+0x8c>
	{
		Running_Phase=0;
 80024f8:	4b08      	ldr	r3, [pc, #32]	@ (800251c <main+0x3a8>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	801a      	strh	r2, [r3, #0]
		timerun_phs=0;
 80024fe:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <main+0x3ac>)
 8002500:	2200      	movs	r2, #0
 8002502:	801a      	strh	r2, [r3, #0]
		timerun_cyc=0;
 8002504:	4b07      	ldr	r3, [pc, #28]	@ (8002524 <main+0x3b0>)
 8002506:	2200      	movs	r2, #0
 8002508:	801a      	strh	r2, [r3, #0]
		command_lamp_HIL(0, APILL_FLASH_Y_ALL);
 800250a:	210d      	movs	r1, #13
 800250c:	2000      	movs	r0, #0
 800250e:	f000 fac1 	bl	8002a94 <command_lamp_HIL>
		update_second_FLASH_HOLD_ERROR();
 8002512:	f002 fd15 	bl	8004f40 <update_second_FLASH_HOLD_ERROR>
	 if(((Switch_Flasher == 1) || (command.flasher==1)) && state_ATCS<=status_ERROR)
 8002516:	e673      	b.n	8002200 <main+0x8c>
 8002518:	2000f453 	.word	0x2000f453
 800251c:	2000eb00 	.word	0x2000eb00
 8002520:	2000eb02 	.word	0x2000eb02
 8002524:	2000eb04 	.word	0x2000eb04
 8002528:	2000f48b 	.word	0x2000f48b

0800252c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b094      	sub	sp, #80	@ 0x50
 8002530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002532:	f107 0320 	add.w	r3, r7, #32
 8002536:	2230      	movs	r2, #48	@ 0x30
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f009 fd0d 	bl	800bf5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002540:	f107 030c 	add.w	r3, r7, #12
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002550:	2300      	movs	r3, #0
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	4b29      	ldr	r3, [pc, #164]	@ (80025fc <SystemClock_Config+0xd0>)
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	4a28      	ldr	r2, [pc, #160]	@ (80025fc <SystemClock_Config+0xd0>)
 800255a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800255e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002560:	4b26      	ldr	r3, [pc, #152]	@ (80025fc <SystemClock_Config+0xd0>)
 8002562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800256c:	2300      	movs	r3, #0
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	4b23      	ldr	r3, [pc, #140]	@ (8002600 <SystemClock_Config+0xd4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a22      	ldr	r2, [pc, #136]	@ (8002600 <SystemClock_Config+0xd4>)
 8002576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	4b20      	ldr	r3, [pc, #128]	@ (8002600 <SystemClock_Config+0xd4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002588:	2309      	movs	r3, #9
 800258a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800258c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002592:	2301      	movs	r3, #1
 8002594:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002596:	2302      	movs	r3, #2
 8002598:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800259a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800259e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025a0:	2308      	movs	r3, #8
 80025a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80025a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80025a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025aa:	2302      	movs	r3, #2
 80025ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025ae:	2304      	movs	r3, #4
 80025b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025b2:	f107 0320 	add.w	r3, r7, #32
 80025b6:	4618      	mov	r0, r3
 80025b8:	f006 fd50 	bl	800905c <HAL_RCC_OscConfig>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80025c2:	f003 fc87 	bl	8005ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025c6:	230f      	movs	r3, #15
 80025c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ca:	2302      	movs	r3, #2
 80025cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80025d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025de:	f107 030c 	add.w	r3, r7, #12
 80025e2:	2105      	movs	r1, #5
 80025e4:	4618      	mov	r0, r3
 80025e6:	f006 ffb1 	bl	800954c <HAL_RCC_ClockConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80025f0:	f003 fc70 	bl	8005ed4 <Error_Handler>
  }
}
 80025f4:	bf00      	nop
 80025f6:	3750      	adds	r7, #80	@ 0x50
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40023800 	.word	0x40023800
 8002600:	40007000 	.word	0x40007000

08002604 <Send_Data_To_Server_Proc>:
/* USER CODE BEGIN 4 */
uint32_t All_SG_Status[2],status_cond;
char data_send[10000];

void Send_Data_To_Server_Proc(void)
{
 8002604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002606:	b0d7      	sub	sp, #348	@ 0x15c
 8002608:	af30      	add	r7, sp, #192	@ 0xc0
	uint8_t Mode_SG[12];
	uint8_t Alarm_status, Error_status;


		All_SG_Status[0] = 0;
 800260a:	4b46      	ldr	r3, [pc, #280]	@ (8002724 <Send_Data_To_Server_Proc+0x120>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
		All_SG_Status[1] = 0;
 8002610:	4b44      	ldr	r3, [pc, #272]	@ (8002724 <Send_Data_To_Server_Proc+0x120>)
 8002612:	2200      	movs	r2, #0
 8002614:	605a      	str	r2, [r3, #4]

		for(int y=0; y<12; y++)
 8002616:	2300      	movs	r3, #0
 8002618:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800261c:	e075      	b.n	800270a <Send_Data_To_Server_Proc+0x106>
		{
			if(SG_set[Running_Phase][y]==0) Mode_SG[y] =0;
 800261e:	4b42      	ldr	r3, [pc, #264]	@ (8002728 <Send_Data_To_Server_Proc+0x124>)
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	4619      	mov	r1, r3
 8002624:	4a41      	ldr	r2, [pc, #260]	@ (800272c <Send_Data_To_Server_Proc+0x128>)
 8002626:	460b      	mov	r3, r1
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	440b      	add	r3, r1
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	441a      	add	r2, r3
 8002630:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002634:	4413      	add	r3, r2
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d107      	bne.n	800264c <Send_Data_To_Server_Proc+0x48>
 800263c:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8002640:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002644:	4413      	add	r3, r2
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
 800264a:	e059      	b.n	8002700 <Send_Data_To_Server_Proc+0xfc>
			else if(SG_set[Running_Phase][y]>0 && SG_set[Running_Phase][y]<=8 && SG_set[Running_Phase][y]!=5) Mode_SG[y]=1;
 800264c:	4b36      	ldr	r3, [pc, #216]	@ (8002728 <Send_Data_To_Server_Proc+0x124>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	4a36      	ldr	r2, [pc, #216]	@ (800272c <Send_Data_To_Server_Proc+0x128>)
 8002654:	460b      	mov	r3, r1
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	440b      	add	r3, r1
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	441a      	add	r2, r3
 800265e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002662:	4413      	add	r3, r2
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d025      	beq.n	80026b6 <Send_Data_To_Server_Proc+0xb2>
 800266a:	4b2f      	ldr	r3, [pc, #188]	@ (8002728 <Send_Data_To_Server_Proc+0x124>)
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	4619      	mov	r1, r3
 8002670:	4a2e      	ldr	r2, [pc, #184]	@ (800272c <Send_Data_To_Server_Proc+0x128>)
 8002672:	460b      	mov	r3, r1
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	440b      	add	r3, r1
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	441a      	add	r2, r3
 800267c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002680:	4413      	add	r3, r2
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d816      	bhi.n	80026b6 <Send_Data_To_Server_Proc+0xb2>
 8002688:	4b27      	ldr	r3, [pc, #156]	@ (8002728 <Send_Data_To_Server_Proc+0x124>)
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	4619      	mov	r1, r3
 800268e:	4a27      	ldr	r2, [pc, #156]	@ (800272c <Send_Data_To_Server_Proc+0x128>)
 8002690:	460b      	mov	r3, r1
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	440b      	add	r3, r1
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	441a      	add	r2, r3
 800269a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800269e:	4413      	add	r3, r2
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b05      	cmp	r3, #5
 80026a4:	d007      	beq.n	80026b6 <Send_Data_To_Server_Proc+0xb2>
 80026a6:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80026aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026ae:	4413      	add	r3, r2
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]
 80026b4:	e024      	b.n	8002700 <Send_Data_To_Server_Proc+0xfc>
			else if(SG_set[Running_Phase][y] == 5 || SG_set[Running_Phase][y]>8) Mode_SG[y]=2;
 80026b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002728 <Send_Data_To_Server_Proc+0x124>)
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	4619      	mov	r1, r3
 80026bc:	4a1b      	ldr	r2, [pc, #108]	@ (800272c <Send_Data_To_Server_Proc+0x128>)
 80026be:	460b      	mov	r3, r1
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	440b      	add	r3, r1
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	441a      	add	r2, r3
 80026c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026cc:	4413      	add	r3, r2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b05      	cmp	r3, #5
 80026d2:	d00e      	beq.n	80026f2 <Send_Data_To_Server_Proc+0xee>
 80026d4:	4b14      	ldr	r3, [pc, #80]	@ (8002728 <Send_Data_To_Server_Proc+0x124>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	4619      	mov	r1, r3
 80026da:	4a14      	ldr	r2, [pc, #80]	@ (800272c <Send_Data_To_Server_Proc+0x128>)
 80026dc:	460b      	mov	r3, r1
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	440b      	add	r3, r1
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	441a      	add	r2, r3
 80026e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026ea:	4413      	add	r3, r2
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d906      	bls.n	8002700 <Send_Data_To_Server_Proc+0xfc>
 80026f2:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80026f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026fa:	4413      	add	r3, r2
 80026fc:	2202      	movs	r2, #2
 80026fe:	701a      	strb	r2, [r3, #0]
		for(int y=0; y<12; y++)
 8002700:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002704:	3301      	adds	r3, #1
 8002706:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800270a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800270e:	2b0b      	cmp	r3, #11
 8002710:	dd85      	ble.n	800261e <Send_Data_To_Server_Proc+0x1a>
		}


		for(int k=0; k<6; k++)
 8002712:	2300      	movs	r3, #0
 8002714:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002718:	e04f      	b.n	80027ba <Send_Data_To_Server_Proc+0x1b6>
		{
			for(int l=0; l<3; l++)
 800271a:	2300      	movs	r3, #0
 800271c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002720:	e042      	b.n	80027a8 <Send_Data_To_Server_Proc+0x1a4>
 8002722:	bf00      	nop
 8002724:	2000f490 	.word	0x2000f490
 8002728:	2000eb00 	.word	0x2000eb00
 800272c:	2000ecec 	.word	0x2000ecec
			{
				All_SG_Status[0] = (All_SG_Status[0] | (SG[k][l]<<(k*3+l)));
 8002730:	4b9d      	ldr	r3, [pc, #628]	@ (80029a8 <Send_Data_To_Server_Proc+0x3a4>)
 8002732:	6819      	ldr	r1, [r3, #0]
 8002734:	489d      	ldr	r0, [pc, #628]	@ (80029ac <Send_Data_To_Server_Proc+0x3a8>)
 8002736:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	18c2      	adds	r2, r0, r3
 8002742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002746:	4413      	add	r3, r2
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	441a      	add	r2, r3
 8002756:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800275a:	4413      	add	r3, r2
 800275c:	fa00 f303 	lsl.w	r3, r0, r3
 8002760:	430b      	orrs	r3, r1
 8002762:	4a91      	ldr	r2, [pc, #580]	@ (80029a8 <Send_Data_To_Server_Proc+0x3a4>)
 8002764:	6013      	str	r3, [r2, #0]
				All_SG_Status[1] = (All_SG_Status[1] | (SG[6+k][l]<<(k*3+l)));
 8002766:	4b90      	ldr	r3, [pc, #576]	@ (80029a8 <Send_Data_To_Server_Proc+0x3a4>)
 8002768:	6859      	ldr	r1, [r3, #4]
 800276a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800276e:	1d9a      	adds	r2, r3, #6
 8002770:	488e      	ldr	r0, [pc, #568]	@ (80029ac <Send_Data_To_Server_Proc+0x3a8>)
 8002772:	4613      	mov	r3, r2
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	4413      	add	r3, r2
 8002778:	18c2      	adds	r2, r0, r3
 800277a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800277e:	4413      	add	r3, r2
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	441a      	add	r2, r3
 800278e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002792:	4413      	add	r3, r2
 8002794:	fa00 f303 	lsl.w	r3, r0, r3
 8002798:	430b      	orrs	r3, r1
 800279a:	4a83      	ldr	r2, [pc, #524]	@ (80029a8 <Send_Data_To_Server_Proc+0x3a4>)
 800279c:	6053      	str	r3, [r2, #4]
			for(int l=0; l<3; l++)
 800279e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027a2:	3301      	adds	r3, #1
 80027a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80027a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	ddbf      	ble.n	8002730 <Send_Data_To_Server_Proc+0x12c>
		for(int k=0; k<6; k++)
 80027b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027b4:	3301      	adds	r3, #1
 80027b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80027ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027be:	2b05      	cmp	r3, #5
 80027c0:	ddab      	ble.n	800271a <Send_Data_To_Server_Proc+0x116>
			}
		}

		status_cond = 	(state.power<<0) +
 80027c2:	4b7b      	ldr	r3, [pc, #492]	@ (80029b0 <Send_Data_To_Server_Proc+0x3ac>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
						(state.system<<1) +
 80027c8:	4b79      	ldr	r3, [pc, #484]	@ (80029b0 <Send_Data_To_Server_Proc+0x3ac>)
 80027ca:	785b      	ldrb	r3, [r3, #1]
 80027cc:	005b      	lsls	r3, r3, #1
		status_cond = 	(state.power<<0) +
 80027ce:	441a      	add	r2, r3
						(state.normal<<2) +
 80027d0:	4b77      	ldr	r3, [pc, #476]	@ (80029b0 <Send_Data_To_Server_Proc+0x3ac>)
 80027d2:	789b      	ldrb	r3, [r3, #2]
 80027d4:	009b      	lsls	r3, r3, #2
						(state.system<<1) +
 80027d6:	441a      	add	r2, r3
						(state.hold<<3) +
 80027d8:	4b75      	ldr	r3, [pc, #468]	@ (80029b0 <Send_Data_To_Server_Proc+0x3ac>)
 80027da:	78db      	ldrb	r3, [r3, #3]
 80027dc:	00db      	lsls	r3, r3, #3
						(state.normal<<2) +
 80027de:	441a      	add	r2, r3
						(state.skip<<4) +
 80027e0:	4b73      	ldr	r3, [pc, #460]	@ (80029b0 <Send_Data_To_Server_Proc+0x3ac>)
 80027e2:	791b      	ldrb	r3, [r3, #4]
 80027e4:	011b      	lsls	r3, r3, #4
						(state.hold<<3) +
 80027e6:	441a      	add	r2, r3
						(state.flasher<<5) ;
 80027e8:	4b71      	ldr	r3, [pc, #452]	@ (80029b0 <Send_Data_To_Server_Proc+0x3ac>)
 80027ea:	795b      	ldrb	r3, [r3, #5]
 80027ec:	015b      	lsls	r3, r3, #5
						(state.skip<<4) +
 80027ee:	4413      	add	r3, r2
 80027f0:	461a      	mov	r2, r3
		status_cond = 	(state.power<<0) +
 80027f2:	4b70      	ldr	r3, [pc, #448]	@ (80029b4 <Send_Data_To_Server_Proc+0x3b0>)
 80027f4:	601a      	str	r2, [r3, #0]

		HAL_RTC_GetTime(&hrtc, &Run_Time, FORMAT_BIN);
 80027f6:	2200      	movs	r2, #0
 80027f8:	496f      	ldr	r1, [pc, #444]	@ (80029b8 <Send_Data_To_Server_Proc+0x3b4>)
 80027fa:	4870      	ldr	r0, [pc, #448]	@ (80029bc <Send_Data_To_Server_Proc+0x3b8>)
 80027fc:	f007 fac5 	bl	8009d8a <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8002800:	2200      	movs	r2, #0
 8002802:	496f      	ldr	r1, [pc, #444]	@ (80029c0 <Send_Data_To_Server_Proc+0x3bc>)
 8002804:	486d      	ldr	r0, [pc, #436]	@ (80029bc <Send_Data_To_Server_Proc+0x3b8>)
 8002806:	f007 fba2 	bl	8009f4e <HAL_RTC_GetDate>

		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 800280a:	4b6a      	ldr	r3, [pc, #424]	@ (80029b4 <Send_Data_To_Server_Proc+0x3b0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	677b      	str	r3, [r7, #116]	@ 0x74
							"%d;%d;%d;%d;%d;%d;"
							"%d;%d;%d;%d;%d;%d;"
							"%d;%d;%d;%d;" //TeganganAC,TeganganDC,Baterai,SuhuCPU
							"%d;%d;"       //Alarm, Error
							"",
				status_cond,Run_Time.Hours,Run_Time.Minutes,Run_Time.Seconds,sDate.Date,sDate.Month,
 8002810:	4b69      	ldr	r3, [pc, #420]	@ (80029b8 <Send_Data_To_Server_Proc+0x3b4>)
 8002812:	781b      	ldrb	r3, [r3, #0]
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 8002814:	469c      	mov	ip, r3
				status_cond,Run_Time.Hours,Run_Time.Minutes,Run_Time.Seconds,sDate.Date,sDate.Month,
 8002816:	4b68      	ldr	r3, [pc, #416]	@ (80029b8 <Send_Data_To_Server_Proc+0x3b4>)
 8002818:	785b      	ldrb	r3, [r3, #1]
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 800281a:	673b      	str	r3, [r7, #112]	@ 0x70
				status_cond,Run_Time.Hours,Run_Time.Minutes,Run_Time.Seconds,sDate.Date,sDate.Month,
 800281c:	4b66      	ldr	r3, [pc, #408]	@ (80029b8 <Send_Data_To_Server_Proc+0x3b4>)
 800281e:	789b      	ldrb	r3, [r3, #2]
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 8002820:	66fb      	str	r3, [r7, #108]	@ 0x6c
				status_cond,Run_Time.Hours,Run_Time.Minutes,Run_Time.Seconds,sDate.Date,sDate.Month,
 8002822:	4b67      	ldr	r3, [pc, #412]	@ (80029c0 <Send_Data_To_Server_Proc+0x3bc>)
 8002824:	789b      	ldrb	r3, [r3, #2]
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 8002826:	66bb      	str	r3, [r7, #104]	@ 0x68
				status_cond,Run_Time.Hours,Run_Time.Minutes,Run_Time.Seconds,sDate.Date,sDate.Month,
 8002828:	4b65      	ldr	r3, [pc, #404]	@ (80029c0 <Send_Data_To_Server_Proc+0x3bc>)
 800282a:	785b      	ldrb	r3, [r3, #1]
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 800282c:	667b      	str	r3, [r7, #100]	@ 0x64
				sDate.Year,129,90,90,1,0,
 800282e:	4b64      	ldr	r3, [pc, #400]	@ (80029c0 <Send_Data_To_Server_Proc+0x3bc>)
 8002830:	78db      	ldrb	r3, [r3, #3]
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 8002832:	663b      	str	r3, [r7, #96]	@ 0x60
 8002834:	4b5c      	ldr	r3, [pc, #368]	@ (80029a8 <Send_Data_To_Server_Proc+0x3a4>)
 8002836:	6819      	ldr	r1, [r3, #0]
 8002838:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800283a:	4b5b      	ldr	r3, [pc, #364]	@ (80029a8 <Send_Data_To_Server_Proc+0x3a4>)
 800283c:	6858      	ldr	r0, [r3, #4]
 800283e:	65b8      	str	r0, [r7, #88]	@ 0x58
				0,0,
				All_SG_Status[0],All_SG_Status[1],
				elapsed_time_green[0],elapsed_time_green[1],elapsed_time_green[2],elapsed_time_green[3],elapsed_time_green[4],elapsed_time_green[5],
 8002840:	4b60      	ldr	r3, [pc, #384]	@ (80029c4 <Send_Data_To_Server_Proc+0x3c0>)
 8002842:	881b      	ldrh	r3, [r3, #0]
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 8002844:	657b      	str	r3, [r7, #84]	@ 0x54
				elapsed_time_green[0],elapsed_time_green[1],elapsed_time_green[2],elapsed_time_green[3],elapsed_time_green[4],elapsed_time_green[5],
 8002846:	4b5f      	ldr	r3, [pc, #380]	@ (80029c4 <Send_Data_To_Server_Proc+0x3c0>)
 8002848:	885b      	ldrh	r3, [r3, #2]
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 800284a:	653b      	str	r3, [r7, #80]	@ 0x50
				elapsed_time_green[0],elapsed_time_green[1],elapsed_time_green[2],elapsed_time_green[3],elapsed_time_green[4],elapsed_time_green[5],
 800284c:	4b5d      	ldr	r3, [pc, #372]	@ (80029c4 <Send_Data_To_Server_Proc+0x3c0>)
 800284e:	889b      	ldrh	r3, [r3, #4]
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 8002850:	64fb      	str	r3, [r7, #76]	@ 0x4c
				elapsed_time_green[0],elapsed_time_green[1],elapsed_time_green[2],elapsed_time_green[3],elapsed_time_green[4],elapsed_time_green[5],
 8002852:	4b5c      	ldr	r3, [pc, #368]	@ (80029c4 <Send_Data_To_Server_Proc+0x3c0>)
 8002854:	88db      	ldrh	r3, [r3, #6]
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 8002856:	64bb      	str	r3, [r7, #72]	@ 0x48
				elapsed_time_green[0],elapsed_time_green[1],elapsed_time_green[2],elapsed_time_green[3],elapsed_time_green[4],elapsed_time_green[5],
 8002858:	4b5a      	ldr	r3, [pc, #360]	@ (80029c4 <Send_Data_To_Server_Proc+0x3c0>)
 800285a:	891b      	ldrh	r3, [r3, #8]
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 800285c:	647b      	str	r3, [r7, #68]	@ 0x44
				elapsed_time_green[0],elapsed_time_green[1],elapsed_time_green[2],elapsed_time_green[3],elapsed_time_green[4],elapsed_time_green[5],
 800285e:	4b59      	ldr	r3, [pc, #356]	@ (80029c4 <Send_Data_To_Server_Proc+0x3c0>)
 8002860:	895b      	ldrh	r3, [r3, #10]
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 8002862:	643b      	str	r3, [r7, #64]	@ 0x40
				elapsed_time_green[6],elapsed_time_green[7],elapsed_time_green[8],elapsed_time_green[9],elapsed_time_green[10],elapsed_time_green[11],
 8002864:	4b57      	ldr	r3, [pc, #348]	@ (80029c4 <Send_Data_To_Server_Proc+0x3c0>)
 8002866:	899b      	ldrh	r3, [r3, #12]
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 8002868:	63fb      	str	r3, [r7, #60]	@ 0x3c
				elapsed_time_green[6],elapsed_time_green[7],elapsed_time_green[8],elapsed_time_green[9],elapsed_time_green[10],elapsed_time_green[11],
 800286a:	4b56      	ldr	r3, [pc, #344]	@ (80029c4 <Send_Data_To_Server_Proc+0x3c0>)
 800286c:	89db      	ldrh	r3, [r3, #14]
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 800286e:	63bb      	str	r3, [r7, #56]	@ 0x38
				elapsed_time_green[6],elapsed_time_green[7],elapsed_time_green[8],elapsed_time_green[9],elapsed_time_green[10],elapsed_time_green[11],
 8002870:	4b54      	ldr	r3, [pc, #336]	@ (80029c4 <Send_Data_To_Server_Proc+0x3c0>)
 8002872:	8a1b      	ldrh	r3, [r3, #16]
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 8002874:	637b      	str	r3, [r7, #52]	@ 0x34
				elapsed_time_green[6],elapsed_time_green[7],elapsed_time_green[8],elapsed_time_green[9],elapsed_time_green[10],elapsed_time_green[11],
 8002876:	4b53      	ldr	r3, [pc, #332]	@ (80029c4 <Send_Data_To_Server_Proc+0x3c0>)
 8002878:	8a5b      	ldrh	r3, [r3, #18]
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 800287a:	633b      	str	r3, [r7, #48]	@ 0x30
				elapsed_time_green[6],elapsed_time_green[7],elapsed_time_green[8],elapsed_time_green[9],elapsed_time_green[10],elapsed_time_green[11],
 800287c:	4b51      	ldr	r3, [pc, #324]	@ (80029c4 <Send_Data_To_Server_Proc+0x3c0>)
 800287e:	8a9b      	ldrh	r3, [r3, #20]
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 8002880:	62fb      	str	r3, [r7, #44]	@ 0x2c
				elapsed_time_green[6],elapsed_time_green[7],elapsed_time_green[8],elapsed_time_green[9],elapsed_time_green[10],elapsed_time_green[11],
 8002882:	4b50      	ldr	r3, [pc, #320]	@ (80029c4 <Send_Data_To_Server_Proc+0x3c0>)
 8002884:	8adb      	ldrh	r3, [r3, #22]
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 8002886:	62bb      	str	r3, [r7, #40]	@ 0x28
				PLAN_Cycle[Selected_PLAN]-timerun_cyc, Selected_PLAN, Running_Phase+1,
 8002888:	4b4f      	ldr	r3, [pc, #316]	@ (80029c8 <Send_Data_To_Server_Proc+0x3c4>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4b4f      	ldr	r3, [pc, #316]	@ (80029cc <Send_Data_To_Server_Proc+0x3c8>)
 8002890:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002894:	461a      	mov	r2, r3
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 8002896:	4b4e      	ldr	r3, [pc, #312]	@ (80029d0 <Send_Data_To_Server_Proc+0x3cc>)
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	1ad4      	subs	r4, r2, r3
 800289c:	627c      	str	r4, [r7, #36]	@ 0x24
 800289e:	4b4a      	ldr	r3, [pc, #296]	@ (80029c8 <Send_Data_To_Server_Proc+0x3c4>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	623b      	str	r3, [r7, #32]
 80028a4:	4b4b      	ldr	r3, [pc, #300]	@ (80029d4 <Send_Data_To_Server_Proc+0x3d0>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	1c5e      	adds	r6, r3, #1
				Mode_SG[0],Mode_SG[1],Mode_SG[2],Mode_SG[3],Mode_SG[4],Mode_SG[5],
 80028aa:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 80028ae:	61fb      	str	r3, [r7, #28]
				Mode_SG[0],Mode_SG[1],Mode_SG[2],Mode_SG[3],Mode_SG[4],Mode_SG[5],
 80028b0:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 80028b4:	61bb      	str	r3, [r7, #24]
				Mode_SG[0],Mode_SG[1],Mode_SG[2],Mode_SG[3],Mode_SG[4],Mode_SG[5],
 80028b6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 80028ba:	617b      	str	r3, [r7, #20]
				Mode_SG[0],Mode_SG[1],Mode_SG[2],Mode_SG[3],Mode_SG[4],Mode_SG[5],
 80028bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 80028c0:	613b      	str	r3, [r7, #16]
				Mode_SG[0],Mode_SG[1],Mode_SG[2],Mode_SG[3],Mode_SG[4],Mode_SG[5],
 80028c2:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 80028c6:	60fb      	str	r3, [r7, #12]
				Mode_SG[0],Mode_SG[1],Mode_SG[2],Mode_SG[3],Mode_SG[4],Mode_SG[5],
 80028c8:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 80028cc:	60bb      	str	r3, [r7, #8]
				Mode_SG[6],Mode_SG[7],Mode_SG[8],Mode_SG[9],Mode_SG[10],Mode_SG[11],
 80028ce:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 80028d2:	607b      	str	r3, [r7, #4]
				Mode_SG[6],Mode_SG[7],Mode_SG[8],Mode_SG[9],Mode_SG[10],Mode_SG[11],
 80028d4:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 80028d8:	461d      	mov	r5, r3
				Mode_SG[6],Mode_SG[7],Mode_SG[8],Mode_SG[9],Mode_SG[10],Mode_SG[11],
 80028da:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 80028de:	461c      	mov	r4, r3
				Mode_SG[6],Mode_SG[7],Mode_SG[8],Mode_SG[9],Mode_SG[10],Mode_SG[11],
 80028e0:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 80028e4:	4618      	mov	r0, r3
				Mode_SG[6],Mode_SG[7],Mode_SG[8],Mode_SG[9],Mode_SG[10],Mode_SG[11],
 80028e6:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 80028ea:	4619      	mov	r1, r3
				Mode_SG[6],Mode_SG[7],Mode_SG[8],Mode_SG[9],Mode_SG[10],Mode_SG[11],
 80028ec:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
		sprintf(data_send,	"%d;%d;%d;%d;%d;%d;" // Status_cond, jam,menit,detik,tgl,bln
 80028f0:	461a      	mov	r2, r3
 80028f2:	2300      	movs	r3, #0
 80028f4:	932e      	str	r3, [sp, #184]	@ 0xb8
 80028f6:	2300      	movs	r3, #0
 80028f8:	932d      	str	r3, [sp, #180]	@ 0xb4
 80028fa:	231e      	movs	r3, #30
 80028fc:	932c      	str	r3, [sp, #176]	@ 0xb0
 80028fe:	2318      	movs	r3, #24
 8002900:	932b      	str	r3, [sp, #172]	@ 0xac
 8002902:	231a      	movs	r3, #26
 8002904:	932a      	str	r3, [sp, #168]	@ 0xa8
 8002906:	23df      	movs	r3, #223	@ 0xdf
 8002908:	9329      	str	r3, [sp, #164]	@ 0xa4
 800290a:	9228      	str	r2, [sp, #160]	@ 0xa0
 800290c:	9127      	str	r1, [sp, #156]	@ 0x9c
 800290e:	9026      	str	r0, [sp, #152]	@ 0x98
 8002910:	9425      	str	r4, [sp, #148]	@ 0x94
 8002912:	9524      	str	r5, [sp, #144]	@ 0x90
 8002914:	687d      	ldr	r5, [r7, #4]
 8002916:	9523      	str	r5, [sp, #140]	@ 0x8c
 8002918:	68bd      	ldr	r5, [r7, #8]
 800291a:	9522      	str	r5, [sp, #136]	@ 0x88
 800291c:	68fd      	ldr	r5, [r7, #12]
 800291e:	9521      	str	r5, [sp, #132]	@ 0x84
 8002920:	693d      	ldr	r5, [r7, #16]
 8002922:	9520      	str	r5, [sp, #128]	@ 0x80
 8002924:	697d      	ldr	r5, [r7, #20]
 8002926:	951f      	str	r5, [sp, #124]	@ 0x7c
 8002928:	69bd      	ldr	r5, [r7, #24]
 800292a:	951e      	str	r5, [sp, #120]	@ 0x78
 800292c:	69fd      	ldr	r5, [r7, #28]
 800292e:	951d      	str	r5, [sp, #116]	@ 0x74
 8002930:	961c      	str	r6, [sp, #112]	@ 0x70
 8002932:	6a3d      	ldr	r5, [r7, #32]
 8002934:	951b      	str	r5, [sp, #108]	@ 0x6c
 8002936:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8002938:	941a      	str	r4, [sp, #104]	@ 0x68
 800293a:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 800293c:	9419      	str	r4, [sp, #100]	@ 0x64
 800293e:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8002940:	9418      	str	r4, [sp, #96]	@ 0x60
 8002942:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8002944:	9417      	str	r4, [sp, #92]	@ 0x5c
 8002946:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8002948:	9416      	str	r4, [sp, #88]	@ 0x58
 800294a:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 800294c:	9415      	str	r4, [sp, #84]	@ 0x54
 800294e:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 8002950:	9414      	str	r4, [sp, #80]	@ 0x50
 8002952:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8002954:	9413      	str	r4, [sp, #76]	@ 0x4c
 8002956:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8002958:	9412      	str	r4, [sp, #72]	@ 0x48
 800295a:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 800295c:	9411      	str	r4, [sp, #68]	@ 0x44
 800295e:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8002960:	9410      	str	r4, [sp, #64]	@ 0x40
 8002962:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8002964:	940f      	str	r4, [sp, #60]	@ 0x3c
 8002966:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 8002968:	940e      	str	r4, [sp, #56]	@ 0x38
 800296a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800296c:	900d      	str	r0, [sp, #52]	@ 0x34
 800296e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002970:	910c      	str	r1, [sp, #48]	@ 0x30
 8002972:	2300      	movs	r3, #0
 8002974:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002976:	2300      	movs	r3, #0
 8002978:	930a      	str	r3, [sp, #40]	@ 0x28
 800297a:	2300      	movs	r3, #0
 800297c:	9309      	str	r3, [sp, #36]	@ 0x24
 800297e:	2301      	movs	r3, #1
 8002980:	9308      	str	r3, [sp, #32]
 8002982:	235a      	movs	r3, #90	@ 0x5a
 8002984:	9307      	str	r3, [sp, #28]
 8002986:	235a      	movs	r3, #90	@ 0x5a
 8002988:	9306      	str	r3, [sp, #24]
 800298a:	2381      	movs	r3, #129	@ 0x81
 800298c:	9305      	str	r3, [sp, #20]
 800298e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002990:	9104      	str	r1, [sp, #16]
 8002992:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002994:	9103      	str	r1, [sp, #12]
 8002996:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002998:	9102      	str	r1, [sp, #8]
 800299a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800299c:	9101      	str	r1, [sp, #4]
 800299e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80029a0:	9100      	str	r1, [sp, #0]
 80029a2:	4663      	mov	r3, ip
 80029a4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80029a6:	e017      	b.n	80029d8 <Send_Data_To_Server_Proc+0x3d4>
 80029a8:	2000f490 	.word	0x2000f490
 80029ac:	2000ecc8 	.word	0x2000ecc8
 80029b0:	2000f444 	.word	0x2000f444
 80029b4:	2000f498 	.word	0x2000f498
 80029b8:	2000eb30 	.word	0x2000eb30
 80029bc:	20011bec 	.word	0x20011bec
 80029c0:	2000eb44 	.word	0x2000eb44
 80029c4:	2000f470 	.word	0x2000f470
 80029c8:	2000f48a 	.word	0x2000f48a
 80029cc:	2000ee34 	.word	0x2000ee34
 80029d0:	2000eb04 	.word	0x2000eb04
 80029d4:	2000eb00 	.word	0x2000eb00
 80029d8:	4922      	ldr	r1, [pc, #136]	@ (8002a64 <Send_Data_To_Server_Proc+0x460>)
 80029da:	4823      	ldr	r0, [pc, #140]	@ (8002a68 <Send_Data_To_Server_Proc+0x464>)
 80029dc:	f009 fa5a 	bl	800be94 <siprintf>
				223,26,24,30,
				0,0);

		for (int k=0;k<36;k++)
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80029e6:	e00e      	b.n	8002a06 <Send_Data_To_Server_Proc+0x402>
		{
			sprintf(data_send,"%s%d;",data_send,I_LAMP[k]);
 80029e8:	4a20      	ldr	r2, [pc, #128]	@ (8002a6c <Send_Data_To_Server_Proc+0x468>)
 80029ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a68 <Send_Data_To_Server_Proc+0x464>)
 80029f4:	491e      	ldr	r1, [pc, #120]	@ (8002a70 <Send_Data_To_Server_Proc+0x46c>)
 80029f6:	481c      	ldr	r0, [pc, #112]	@ (8002a68 <Send_Data_To_Server_Proc+0x464>)
 80029f8:	f009 fa4c 	bl	800be94 <siprintf>
		for (int k=0;k<36;k++)
 80029fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a00:	3301      	adds	r3, #1
 8002a02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a0a:	2b23      	cmp	r3, #35	@ 0x23
 8002a0c:	ddec      	ble.n	80029e8 <Send_Data_To_Server_Proc+0x3e4>
		}

		sprintf(data_send,"%s%d;%d;",data_send,command.system,PLAN_Cycle[Selected_PLAN]);
 8002a0e:	4b19      	ldr	r3, [pc, #100]	@ (8002a74 <Send_Data_To_Server_Proc+0x470>)
 8002a10:	785b      	ldrb	r3, [r3, #1]
 8002a12:	4619      	mov	r1, r3
 8002a14:	4b18      	ldr	r3, [pc, #96]	@ (8002a78 <Send_Data_To_Server_Proc+0x474>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b18      	ldr	r3, [pc, #96]	@ (8002a7c <Send_Data_To_Server_Proc+0x478>)
 8002a1c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	460b      	mov	r3, r1
 8002a24:	4a10      	ldr	r2, [pc, #64]	@ (8002a68 <Send_Data_To_Server_Proc+0x464>)
 8002a26:	4916      	ldr	r1, [pc, #88]	@ (8002a80 <Send_Data_To_Server_Proc+0x47c>)
 8002a28:	480f      	ldr	r0, [pc, #60]	@ (8002a68 <Send_Data_To_Server_Proc+0x464>)
 8002a2a:	f009 fa33 	bl	800be94 <siprintf>

		EncryptData(data_send, 'S');
 8002a2e:	2153      	movs	r1, #83	@ 0x53
 8002a30:	480d      	ldr	r0, [pc, #52]	@ (8002a68 <Send_Data_To_Server_Proc+0x464>)
 8002a32:	f7fe ff2d 	bl	8001890 <EncryptData>
		sprintf(send_enc, "%s",encryptedData);
 8002a36:	4a13      	ldr	r2, [pc, #76]	@ (8002a84 <Send_Data_To_Server_Proc+0x480>)
 8002a38:	4913      	ldr	r1, [pc, #76]	@ (8002a88 <Send_Data_To_Server_Proc+0x484>)
 8002a3a:	4814      	ldr	r0, [pc, #80]	@ (8002a8c <Send_Data_To_Server_Proc+0x488>)
 8002a3c:	f009 fa2a 	bl	800be94 <siprintf>
		DecryptData(encryptedData);
 8002a40:	4810      	ldr	r0, [pc, #64]	@ (8002a84 <Send_Data_To_Server_Proc+0x480>)
 8002a42:	f7ff f931 	bl	8001ca8 <DecryptData>

		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
		HAL_UART_Transmit(&huart3, (uint8_t *)send_enc, strlen(send_enc), HAL_MAX_DELAY);
 8002a46:	4811      	ldr	r0, [pc, #68]	@ (8002a8c <Send_Data_To_Server_Proc+0x488>)
 8002a48:	f7fd fbc2 	bl	80001d0 <strlen>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	f04f 33ff 	mov.w	r3, #4294967295
 8002a54:	490d      	ldr	r1, [pc, #52]	@ (8002a8c <Send_Data_To_Server_Proc+0x488>)
 8002a56:	480e      	ldr	r0, [pc, #56]	@ (8002a90 <Send_Data_To_Server_Proc+0x48c>)
 8002a58:	f008 f856 	bl	800ab08 <HAL_UART_Transmit>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);


}
 8002a5c:	bf00      	nop
 8002a5e:	379c      	adds	r7, #156	@ 0x9c
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a64:	0800e208 	.word	0x0800e208
 8002a68:	2000f49c 	.word	0x2000f49c
 8002a6c:	200000c8 	.word	0x200000c8
 8002a70:	0800e29c 	.word	0x0800e29c
 8002a74:	2000f44c 	.word	0x2000f44c
 8002a78:	2000f48a 	.word	0x2000f48a
 8002a7c:	2000ee34 	.word	0x2000ee34
 8002a80:	0800e2a4 	.word	0x0800e2a4
 8002a84:	20001934 	.word	0x20001934
 8002a88:	0800e2b0 	.word	0x0800e2b0
 8002a8c:	20009cc8 	.word	0x20009cc8
 8002a90:	20016bb8 	.word	0x20016bb8

08002a94 <command_lamp_HIL>:

void command_lamp_HIL(int SG_in, uint8_t warna)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	70fb      	strb	r3, [r7, #3]
	switch(warna) {
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	2b0e      	cmp	r3, #14
 8002aa4:	f200 819b 	bhi.w	8002dde <command_lamp_HIL+0x34a>
 8002aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab0 <command_lamp_HIL+0x1c>)
 8002aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002aed 	.word	0x08002aed
 8002ab4:	08002b37 	.word	0x08002b37
 8002ab8:	08002b81 	.word	0x08002b81
 8002abc:	08002bcb 	.word	0x08002bcb
 8002ac0:	08002c15 	.word	0x08002c15
 8002ac4:	08002ddf 	.word	0x08002ddf
 8002ac8:	08002ddf 	.word	0x08002ddf
 8002acc:	08002ddf 	.word	0x08002ddf
 8002ad0:	08002ddf 	.word	0x08002ddf
 8002ad4:	08002c5f 	.word	0x08002c5f
 8002ad8:	08002cbb 	.word	0x08002cbb
 8002adc:	08002d17 	.word	0x08002d17
 8002ae0:	08002d45 	.word	0x08002d45
 8002ae4:	08002d73 	.word	0x08002d73
 8002ae8:	08002db3 	.word	0x08002db3

	case APILL_RED:
		SG[SG_in][0]=1;
 8002aec:	49bf      	ldr	r1, [pc, #764]	@ (8002dec <command_lamp_HIL+0x358>)
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	440b      	add	r3, r1
 8002af8:	2201      	movs	r2, #1
 8002afa:	701a      	strb	r2, [r3, #0]
		SG[SG_in][1]=0;
 8002afc:	49bb      	ldr	r1, [pc, #748]	@ (8002dec <command_lamp_HIL+0x358>)
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4413      	add	r3, r2
 8002b06:	440b      	add	r3, r1
 8002b08:	3301      	adds	r3, #1
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
		SG[SG_in][2]=0;
 8002b0e:	49b7      	ldr	r1, [pc, #732]	@ (8002dec <command_lamp_HIL+0x358>)
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	440b      	add	r3, r1
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
		flag_flash_y[SG_in]=0;
 8002b20:	4ab3      	ldr	r2, [pc, #716]	@ (8002df0 <command_lamp_HIL+0x35c>)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
		flag_flash_g[SG_in]=0;
 8002b2a:	4ab2      	ldr	r2, [pc, #712]	@ (8002df4 <command_lamp_HIL+0x360>)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4413      	add	r3, r2
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
		break;
 8002b34:	e153      	b.n	8002dde <command_lamp_HIL+0x34a>

	case APILL_YELLOW:
		SG[SG_in][0]=0;
 8002b36:	49ad      	ldr	r1, [pc, #692]	@ (8002dec <command_lamp_HIL+0x358>)
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	4413      	add	r3, r2
 8002b40:	440b      	add	r3, r1
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
		SG[SG_in][1]=1;
 8002b46:	49a9      	ldr	r1, [pc, #676]	@ (8002dec <command_lamp_HIL+0x358>)
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	440b      	add	r3, r1
 8002b52:	3301      	adds	r3, #1
 8002b54:	2201      	movs	r2, #1
 8002b56:	701a      	strb	r2, [r3, #0]
		SG[SG_in][2]=0;
 8002b58:	49a4      	ldr	r1, [pc, #656]	@ (8002dec <command_lamp_HIL+0x358>)
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	440b      	add	r3, r1
 8002b64:	3302      	adds	r3, #2
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
		flag_flash_y[SG_in]=0;
 8002b6a:	4aa1      	ldr	r2, [pc, #644]	@ (8002df0 <command_lamp_HIL+0x35c>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4413      	add	r3, r2
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
		flag_flash_g[SG_in]=0;
 8002b74:	4a9f      	ldr	r2, [pc, #636]	@ (8002df4 <command_lamp_HIL+0x360>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4413      	add	r3, r2
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
		break;
 8002b7e:	e12e      	b.n	8002dde <command_lamp_HIL+0x34a>

	case APILL_GREEN:
		SG[SG_in][0]=0;
 8002b80:	499a      	ldr	r1, [pc, #616]	@ (8002dec <command_lamp_HIL+0x358>)
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
		SG[SG_in][1]=0;
 8002b90:	4996      	ldr	r1, [pc, #600]	@ (8002dec <command_lamp_HIL+0x358>)
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
		SG[SG_in][2]=1;
 8002ba2:	4992      	ldr	r1, [pc, #584]	@ (8002dec <command_lamp_HIL+0x358>)
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	4413      	add	r3, r2
 8002bac:	440b      	add	r3, r1
 8002bae:	3302      	adds	r3, #2
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
		flag_flash_y[SG_in]=0;
 8002bb4:	4a8e      	ldr	r2, [pc, #568]	@ (8002df0 <command_lamp_HIL+0x35c>)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
		flag_flash_g[SG_in]=0;
 8002bbe:	4a8d      	ldr	r2, [pc, #564]	@ (8002df4 <command_lamp_HIL+0x360>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
		break;
 8002bc8:	e109      	b.n	8002dde <command_lamp_HIL+0x34a>

	case APILL_RED_Y:
		SG[SG_in][0]=1;
 8002bca:	4988      	ldr	r1, [pc, #544]	@ (8002dec <command_lamp_HIL+0x358>)
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
		SG[SG_in][1]=1;
 8002bda:	4984      	ldr	r1, [pc, #528]	@ (8002dec <command_lamp_HIL+0x358>)
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4413      	add	r3, r2
 8002be4:	440b      	add	r3, r1
 8002be6:	3301      	adds	r3, #1
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
		SG[SG_in][2]=0;
 8002bec:	497f      	ldr	r1, [pc, #508]	@ (8002dec <command_lamp_HIL+0x358>)
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
		flag_flash_y[SG_in]=0;
 8002bfe:	4a7c      	ldr	r2, [pc, #496]	@ (8002df0 <command_lamp_HIL+0x35c>)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4413      	add	r3, r2
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
		flag_flash_g[SG_in]=0;
 8002c08:	4a7a      	ldr	r2, [pc, #488]	@ (8002df4 <command_lamp_HIL+0x360>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
		break;
 8002c12:	e0e4      	b.n	8002dde <command_lamp_HIL+0x34a>

	case APILL_NONE:
		SG[SG_in][0]=0;
 8002c14:	4975      	ldr	r1, [pc, #468]	@ (8002dec <command_lamp_HIL+0x358>)
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	440b      	add	r3, r1
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
		SG[SG_in][1]=0;
 8002c24:	4971      	ldr	r1, [pc, #452]	@ (8002dec <command_lamp_HIL+0x358>)
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	440b      	add	r3, r1
 8002c30:	3301      	adds	r3, #1
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
		SG[SG_in][2]=0;
 8002c36:	496d      	ldr	r1, [pc, #436]	@ (8002dec <command_lamp_HIL+0x358>)
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	4413      	add	r3, r2
 8002c40:	440b      	add	r3, r1
 8002c42:	3302      	adds	r3, #2
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
		flag_flash_y[SG_in]=0;
 8002c48:	4a69      	ldr	r2, [pc, #420]	@ (8002df0 <command_lamp_HIL+0x35c>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]
		flag_flash_g[SG_in]=0;
 8002c52:	4a68      	ldr	r2, [pc, #416]	@ (8002df4 <command_lamp_HIL+0x360>)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4413      	add	r3, r2
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
		break;
 8002c5c:	e0bf      	b.n	8002dde <command_lamp_HIL+0x34a>

	case APILL_ALL_RED:
		for(int y=0;y<12; y++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	e026      	b.n	8002cb2 <command_lamp_HIL+0x21e>
		{
			SG[y][0]=1;
 8002c64:	4961      	ldr	r1, [pc, #388]	@ (8002dec <command_lamp_HIL+0x358>)
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4413      	add	r3, r2
 8002c6e:	440b      	add	r3, r1
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]
			SG[y][1]=0;
 8002c74:	495d      	ldr	r1, [pc, #372]	@ (8002dec <command_lamp_HIL+0x358>)
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3301      	adds	r3, #1
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
			SG[y][2]=0;
 8002c86:	4959      	ldr	r1, [pc, #356]	@ (8002dec <command_lamp_HIL+0x358>)
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4413      	add	r3, r2
 8002c90:	440b      	add	r3, r1
 8002c92:	3302      	adds	r3, #2
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
			flag_flash_y[y]=0;
 8002c98:	4a55      	ldr	r2, [pc, #340]	@ (8002df0 <command_lamp_HIL+0x35c>)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
			flag_flash_g[y]=0;
 8002ca2:	4a54      	ldr	r2, [pc, #336]	@ (8002df4 <command_lamp_HIL+0x360>)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
		for(int y=0;y<12; y++)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b0b      	cmp	r3, #11
 8002cb6:	ddd5      	ble.n	8002c64 <command_lamp_HIL+0x1d0>
		}
		break;
 8002cb8:	e091      	b.n	8002dde <command_lamp_HIL+0x34a>

	case APILL_ALL_YELLOW:
		for(int y=0;y<12; y++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	e026      	b.n	8002d0e <command_lamp_HIL+0x27a>
		{
			SG[y][0]=0;
 8002cc0:	494a      	ldr	r1, [pc, #296]	@ (8002dec <command_lamp_HIL+0x358>)
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	440b      	add	r3, r1
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
			SG[y][1]=1;
 8002cd0:	4946      	ldr	r1, [pc, #280]	@ (8002dec <command_lamp_HIL+0x358>)
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	4413      	add	r3, r2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3301      	adds	r3, #1
 8002cde:	2201      	movs	r2, #1
 8002ce0:	701a      	strb	r2, [r3, #0]
			SG[y][2]=0;
 8002ce2:	4942      	ldr	r1, [pc, #264]	@ (8002dec <command_lamp_HIL+0x358>)
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4413      	add	r3, r2
 8002cec:	440b      	add	r3, r1
 8002cee:	3302      	adds	r3, #2
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
			flag_flash_y[y]=0;
 8002cf4:	4a3e      	ldr	r2, [pc, #248]	@ (8002df0 <command_lamp_HIL+0x35c>)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
			flag_flash_g[y]=0;
 8002cfe:	4a3d      	ldr	r2, [pc, #244]	@ (8002df4 <command_lamp_HIL+0x360>)
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4413      	add	r3, r2
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
		for(int y=0;y<12; y++)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b0b      	cmp	r3, #11
 8002d12:	ddd5      	ble.n	8002cc0 <command_lamp_HIL+0x22c>
		}
		break;
 8002d14:	e063      	b.n	8002dde <command_lamp_HIL+0x34a>

	case APILL_FLASH_Y :
		SG[SG_in][0]=0;
 8002d16:	4935      	ldr	r1, [pc, #212]	@ (8002dec <command_lamp_HIL+0x358>)
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4413      	add	r3, r2
 8002d20:	440b      	add	r3, r1
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
		SG[SG_in][2]=0;
 8002d26:	4931      	ldr	r1, [pc, #196]	@ (8002dec <command_lamp_HIL+0x358>)
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	4413      	add	r3, r2
 8002d30:	440b      	add	r3, r1
 8002d32:	3302      	adds	r3, #2
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
		flag_flash_y[SG_in]=1;
 8002d38:	4a2d      	ldr	r2, [pc, #180]	@ (8002df0 <command_lamp_HIL+0x35c>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	2201      	movs	r2, #1
 8002d40:	701a      	strb	r2, [r3, #0]
		break;
 8002d42:	e04c      	b.n	8002dde <command_lamp_HIL+0x34a>

	case APILL_FLASH_G :
		SG[SG_in][0]=0;
 8002d44:	4929      	ldr	r1, [pc, #164]	@ (8002dec <command_lamp_HIL+0x358>)
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	440b      	add	r3, r1
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
		SG[SG_in][1]=0;
 8002d54:	4925      	ldr	r1, [pc, #148]	@ (8002dec <command_lamp_HIL+0x358>)
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	440b      	add	r3, r1
 8002d60:	3301      	adds	r3, #1
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
		flag_flash_g[SG_in]=1;
 8002d66:	4a23      	ldr	r2, [pc, #140]	@ (8002df4 <command_lamp_HIL+0x360>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
		break;
 8002d70:	e035      	b.n	8002dde <command_lamp_HIL+0x34a>

	case APILL_FLASH_Y_ALL :
		for(int y=0;y<12; y++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	e018      	b.n	8002daa <command_lamp_HIL+0x316>
		{
			SG[y][0]=0;
 8002d78:	491c      	ldr	r1, [pc, #112]	@ (8002dec <command_lamp_HIL+0x358>)
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	440b      	add	r3, r1
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
			SG[y][2]=0;
 8002d88:	4918      	ldr	r1, [pc, #96]	@ (8002dec <command_lamp_HIL+0x358>)
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	440b      	add	r3, r1
 8002d94:	3302      	adds	r3, #2
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
			flag_flash_y[y]=1;
 8002d9a:	4a15      	ldr	r2, [pc, #84]	@ (8002df0 <command_lamp_HIL+0x35c>)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4413      	add	r3, r2
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
		for(int y=0;y<12; y++)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3301      	adds	r3, #1
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2b0b      	cmp	r3, #11
 8002dae:	dde3      	ble.n	8002d78 <command_lamp_HIL+0x2e4>
		}

		break;
 8002db0:	e015      	b.n	8002dde <command_lamp_HIL+0x34a>

	case APILL_RED_YFlash :
		SG[SG_in][0]=1;
 8002db2:	490e      	ldr	r1, [pc, #56]	@ (8002dec <command_lamp_HIL+0x358>)
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
		SG[SG_in][2]=0;
 8002dc2:	490a      	ldr	r1, [pc, #40]	@ (8002dec <command_lamp_HIL+0x358>)
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	440b      	add	r3, r1
 8002dce:	3302      	adds	r3, #2
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
		flag_flash_y[SG_in]=1;
 8002dd4:	4a06      	ldr	r2, [pc, #24]	@ (8002df0 <command_lamp_HIL+0x35c>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]

	}

	update_logic_lampu();
 8002dde:	f003 f827 	bl	8005e30 <update_logic_lampu>
}
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	2000ecc8 	.word	0x2000ecc8
 8002df0:	2000f458 	.word	0x2000f458
 8002df4:	2000f464 	.word	0x2000f464

08002df8 <command_lamp>:

void command_lamp(int SG, uint8_t channel, uint8_t set_reset)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	70fb      	strb	r3, [r7, #3]
 8002e04:	4613      	mov	r3, r2
 8002e06:	70bb      	strb	r3, [r7, #2]
	switch(SG) {
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b0b      	cmp	r3, #11
 8002e0c:	f200 82e1 	bhi.w	80033d2 <command_lamp+0x5da>
 8002e10:	a201      	add	r2, pc, #4	@ (adr r2, 8002e18 <command_lamp+0x20>)
 8002e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e16:	bf00      	nop
 8002e18:	08002e49 	.word	0x08002e49
 8002e1c:	08002ebf 	.word	0x08002ebf
 8002e20:	08002f35 	.word	0x08002f35
 8002e24:	08002fab 	.word	0x08002fab
 8002e28:	08003021 	.word	0x08003021
 8002e2c:	0800308b 	.word	0x0800308b
 8002e30:	08003105 	.word	0x08003105
 8002e34:	0800316f 	.word	0x0800316f
 8002e38:	080031d9 	.word	0x080031d9
 8002e3c:	08003247 	.word	0x08003247
 8002e40:	080032b5 	.word	0x080032b5
 8002e44:	0800331d 	.word	0x0800331d
	case 0 :
		if(channel==0 ){ if(set_reset==0) 	HAL_GPIO_WritePin(SG1_1_GPIO_Port, SG1_1_Pin, 0);
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10f      	bne.n	8002e6e <command_lamp+0x76>
 8002e4e:	78bb      	ldrb	r3, [r7, #2]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d106      	bne.n	8002e62 <command_lamp+0x6a>
 8002e54:	2200      	movs	r2, #0
 8002e56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e5a:	48a6      	ldr	r0, [pc, #664]	@ (80030f4 <command_lamp+0x2fc>)
 8002e5c:	f005 ff86 	bl	8008d6c <HAL_GPIO_WritePin>
 8002e60:	e005      	b.n	8002e6e <command_lamp+0x76>
			else 						HAL_GPIO_WritePin(SG1_1_GPIO_Port, SG1_1_Pin, 1);}
 8002e62:	2201      	movs	r2, #1
 8002e64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e68:	48a2      	ldr	r0, [pc, #648]	@ (80030f4 <command_lamp+0x2fc>)
 8002e6a:	f005 ff7f 	bl	8008d6c <HAL_GPIO_WritePin>

		if(channel==1 ){ if(set_reset==0) 	HAL_GPIO_WritePin(SG1_2_GPIO_Port, SG1_2_Pin, 0);
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d10f      	bne.n	8002e94 <command_lamp+0x9c>
 8002e74:	78bb      	ldrb	r3, [r7, #2]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <command_lamp+0x90>
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002e80:	489c      	ldr	r0, [pc, #624]	@ (80030f4 <command_lamp+0x2fc>)
 8002e82:	f005 ff73 	bl	8008d6c <HAL_GPIO_WritePin>
 8002e86:	e005      	b.n	8002e94 <command_lamp+0x9c>
			else 						HAL_GPIO_WritePin(SG1_2_GPIO_Port, SG1_2_Pin, 1);}
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002e8e:	4899      	ldr	r0, [pc, #612]	@ (80030f4 <command_lamp+0x2fc>)
 8002e90:	f005 ff6c 	bl	8008d6c <HAL_GPIO_WritePin>

		if(channel==2 ){ if(set_reset==0) 	HAL_GPIO_WritePin(SG1_3_GPIO_Port, SG1_3_Pin, 0);
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	f040 827a 	bne.w	8003390 <command_lamp+0x598>
 8002e9c:	78bb      	ldrb	r3, [r7, #2]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <command_lamp+0xb8>
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ea8:	4892      	ldr	r0, [pc, #584]	@ (80030f4 <command_lamp+0x2fc>)
 8002eaa:	f005 ff5f 	bl	8008d6c <HAL_GPIO_WritePin>
			else 						HAL_GPIO_WritePin(SG1_3_GPIO_Port, SG1_3_Pin, 1);}
		break;
 8002eae:	e26f      	b.n	8003390 <command_lamp+0x598>
			else 						HAL_GPIO_WritePin(SG1_3_GPIO_Port, SG1_3_Pin, 1);}
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002eb6:	488f      	ldr	r0, [pc, #572]	@ (80030f4 <command_lamp+0x2fc>)
 8002eb8:	f005 ff58 	bl	8008d6c <HAL_GPIO_WritePin>
		break;
 8002ebc:	e268      	b.n	8003390 <command_lamp+0x598>

	case 1 :
		if(channel==0 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG2_1_GPIO_Port, SG2_1_Pin, 0);
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10f      	bne.n	8002ee4 <command_lamp+0xec>
 8002ec4:	78bb      	ldrb	r3, [r7, #2]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <command_lamp+0xe0>
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ed0:	4888      	ldr	r0, [pc, #544]	@ (80030f4 <command_lamp+0x2fc>)
 8002ed2:	f005 ff4b 	bl	8008d6c <HAL_GPIO_WritePin>
 8002ed6:	e005      	b.n	8002ee4 <command_lamp+0xec>
			else 						HAL_GPIO_WritePin(SG2_1_GPIO_Port, SG2_1_Pin, 1);}
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ede:	4885      	ldr	r0, [pc, #532]	@ (80030f4 <command_lamp+0x2fc>)
 8002ee0:	f005 ff44 	bl	8008d6c <HAL_GPIO_WritePin>

		if(channel==1 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG2_2_GPIO_Port, SG2_2_Pin, 0);
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d10f      	bne.n	8002f0a <command_lamp+0x112>
 8002eea:	78bb      	ldrb	r3, [r7, #2]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d106      	bne.n	8002efe <command_lamp+0x106>
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002ef6:	487f      	ldr	r0, [pc, #508]	@ (80030f4 <command_lamp+0x2fc>)
 8002ef8:	f005 ff38 	bl	8008d6c <HAL_GPIO_WritePin>
 8002efc:	e005      	b.n	8002f0a <command_lamp+0x112>
			else 						HAL_GPIO_WritePin(SG2_2_GPIO_Port, SG2_2_Pin, 1);}
 8002efe:	2201      	movs	r2, #1
 8002f00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002f04:	487b      	ldr	r0, [pc, #492]	@ (80030f4 <command_lamp+0x2fc>)
 8002f06:	f005 ff31 	bl	8008d6c <HAL_GPIO_WritePin>

		if(channel==2 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG2_3_GPIO_Port, SG2_3_Pin, 0);
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	f040 8241 	bne.w	8003394 <command_lamp+0x59c>
 8002f12:	78bb      	ldrb	r3, [r7, #2]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d106      	bne.n	8002f26 <command_lamp+0x12e>
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f1e:	4875      	ldr	r0, [pc, #468]	@ (80030f4 <command_lamp+0x2fc>)
 8002f20:	f005 ff24 	bl	8008d6c <HAL_GPIO_WritePin>
			else 						HAL_GPIO_WritePin(SG2_3_GPIO_Port, SG2_3_Pin, 1);}
		break;
 8002f24:	e236      	b.n	8003394 <command_lamp+0x59c>
			else 						HAL_GPIO_WritePin(SG2_3_GPIO_Port, SG2_3_Pin, 1);}
 8002f26:	2201      	movs	r2, #1
 8002f28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f2c:	4871      	ldr	r0, [pc, #452]	@ (80030f4 <command_lamp+0x2fc>)
 8002f2e:	f005 ff1d 	bl	8008d6c <HAL_GPIO_WritePin>
		break;
 8002f32:	e22f      	b.n	8003394 <command_lamp+0x59c>

	case 2 :
			if(channel==0 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG3_1_GPIO_Port, SG3_1_Pin, 0);
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10f      	bne.n	8002f5a <command_lamp+0x162>
 8002f3a:	78bb      	ldrb	r3, [r7, #2]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d106      	bne.n	8002f4e <command_lamp+0x156>
 8002f40:	2200      	movs	r2, #0
 8002f42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f46:	486c      	ldr	r0, [pc, #432]	@ (80030f8 <command_lamp+0x300>)
 8002f48:	f005 ff10 	bl	8008d6c <HAL_GPIO_WritePin>
 8002f4c:	e005      	b.n	8002f5a <command_lamp+0x162>
				else 						HAL_GPIO_WritePin(SG3_1_GPIO_Port, SG3_1_Pin, 1);}
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f54:	4868      	ldr	r0, [pc, #416]	@ (80030f8 <command_lamp+0x300>)
 8002f56:	f005 ff09 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==1 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG3_2_GPIO_Port, SG3_2_Pin, 0);
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d10f      	bne.n	8002f80 <command_lamp+0x188>
 8002f60:	78bb      	ldrb	r3, [r7, #2]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <command_lamp+0x17c>
 8002f66:	2200      	movs	r2, #0
 8002f68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f6c:	4862      	ldr	r0, [pc, #392]	@ (80030f8 <command_lamp+0x300>)
 8002f6e:	f005 fefd 	bl	8008d6c <HAL_GPIO_WritePin>
 8002f72:	e005      	b.n	8002f80 <command_lamp+0x188>
				else 						HAL_GPIO_WritePin(SG3_2_GPIO_Port, SG3_2_Pin, 1);}
 8002f74:	2201      	movs	r2, #1
 8002f76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f7a:	485f      	ldr	r0, [pc, #380]	@ (80030f8 <command_lamp+0x300>)
 8002f7c:	f005 fef6 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==2 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG3_3_GPIO_Port, SG3_3_Pin, 0);
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	f040 8208 	bne.w	8003398 <command_lamp+0x5a0>
 8002f88:	78bb      	ldrb	r3, [r7, #2]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <command_lamp+0x1a4>
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f94:	4858      	ldr	r0, [pc, #352]	@ (80030f8 <command_lamp+0x300>)
 8002f96:	f005 fee9 	bl	8008d6c <HAL_GPIO_WritePin>
				else 						HAL_GPIO_WritePin(SG3_3_GPIO_Port, SG3_3_Pin, 1);}
			break;
 8002f9a:	e1fd      	b.n	8003398 <command_lamp+0x5a0>
				else 						HAL_GPIO_WritePin(SG3_3_GPIO_Port, SG3_3_Pin, 1);}
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002fa2:	4855      	ldr	r0, [pc, #340]	@ (80030f8 <command_lamp+0x300>)
 8002fa4:	f005 fee2 	bl	8008d6c <HAL_GPIO_WritePin>
			break;
 8002fa8:	e1f6      	b.n	8003398 <command_lamp+0x5a0>
	case 3 :
			if(channel==0 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG4_1_GPIO_Port, SG4_1_Pin, 0);
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10f      	bne.n	8002fd0 <command_lamp+0x1d8>
 8002fb0:	78bb      	ldrb	r3, [r7, #2]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <command_lamp+0x1cc>
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fbc:	484e      	ldr	r0, [pc, #312]	@ (80030f8 <command_lamp+0x300>)
 8002fbe:	f005 fed5 	bl	8008d6c <HAL_GPIO_WritePin>
 8002fc2:	e005      	b.n	8002fd0 <command_lamp+0x1d8>
				else 						HAL_GPIO_WritePin(SG4_1_GPIO_Port, SG4_1_Pin, 1);}
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fca:	484b      	ldr	r0, [pc, #300]	@ (80030f8 <command_lamp+0x300>)
 8002fcc:	f005 fece 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==1 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG4_2_GPIO_Port, SG4_2_Pin, 0);
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d10f      	bne.n	8002ff6 <command_lamp+0x1fe>
 8002fd6:	78bb      	ldrb	r3, [r7, #2]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d106      	bne.n	8002fea <command_lamp+0x1f2>
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002fe2:	4845      	ldr	r0, [pc, #276]	@ (80030f8 <command_lamp+0x300>)
 8002fe4:	f005 fec2 	bl	8008d6c <HAL_GPIO_WritePin>
 8002fe8:	e005      	b.n	8002ff6 <command_lamp+0x1fe>
				else 						HAL_GPIO_WritePin(SG4_2_GPIO_Port, SG4_2_Pin, 1);}
 8002fea:	2201      	movs	r2, #1
 8002fec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002ff0:	4841      	ldr	r0, [pc, #260]	@ (80030f8 <command_lamp+0x300>)
 8002ff2:	f005 febb 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==2 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG4_3_GPIO_Port, SG4_3_Pin, 0);
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	f040 81cf 	bne.w	800339c <command_lamp+0x5a4>
 8002ffe:	78bb      	ldrb	r3, [r7, #2]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <command_lamp+0x21a>
 8003004:	2200      	movs	r2, #0
 8003006:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800300a:	483b      	ldr	r0, [pc, #236]	@ (80030f8 <command_lamp+0x300>)
 800300c:	f005 feae 	bl	8008d6c <HAL_GPIO_WritePin>
				else 						HAL_GPIO_WritePin(SG4_3_GPIO_Port, SG4_3_Pin, 1);}
			break;
 8003010:	e1c4      	b.n	800339c <command_lamp+0x5a4>
				else 						HAL_GPIO_WritePin(SG4_3_GPIO_Port, SG4_3_Pin, 1);}
 8003012:	2201      	movs	r2, #1
 8003014:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003018:	4837      	ldr	r0, [pc, #220]	@ (80030f8 <command_lamp+0x300>)
 800301a:	f005 fea7 	bl	8008d6c <HAL_GPIO_WritePin>
			break;
 800301e:	e1bd      	b.n	800339c <command_lamp+0x5a4>
	case 4 :
			if(channel==0 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG5_1_GPIO_Port, SG5_1_Pin, 0);
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10d      	bne.n	8003042 <command_lamp+0x24a>
 8003026:	78bb      	ldrb	r3, [r7, #2]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <command_lamp+0x240>
 800302c:	2200      	movs	r2, #0
 800302e:	2101      	movs	r1, #1
 8003030:	4830      	ldr	r0, [pc, #192]	@ (80030f4 <command_lamp+0x2fc>)
 8003032:	f005 fe9b 	bl	8008d6c <HAL_GPIO_WritePin>
 8003036:	e004      	b.n	8003042 <command_lamp+0x24a>
				else 						HAL_GPIO_WritePin(SG5_1_GPIO_Port, SG5_1_Pin, 1);}
 8003038:	2201      	movs	r2, #1
 800303a:	2101      	movs	r1, #1
 800303c:	482d      	ldr	r0, [pc, #180]	@ (80030f4 <command_lamp+0x2fc>)
 800303e:	f005 fe95 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==1 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG5_2_GPIO_Port, SG5_2_Pin, 0);
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d10d      	bne.n	8003064 <command_lamp+0x26c>
 8003048:	78bb      	ldrb	r3, [r7, #2]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d105      	bne.n	800305a <command_lamp+0x262>
 800304e:	2200      	movs	r2, #0
 8003050:	2120      	movs	r1, #32
 8003052:	482a      	ldr	r0, [pc, #168]	@ (80030fc <command_lamp+0x304>)
 8003054:	f005 fe8a 	bl	8008d6c <HAL_GPIO_WritePin>
 8003058:	e004      	b.n	8003064 <command_lamp+0x26c>
				else 						HAL_GPIO_WritePin(SG5_2_GPIO_Port, SG5_2_Pin, 1);}
 800305a:	2201      	movs	r2, #1
 800305c:	2120      	movs	r1, #32
 800305e:	4827      	ldr	r0, [pc, #156]	@ (80030fc <command_lamp+0x304>)
 8003060:	f005 fe84 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==2 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG5_3_GPIO_Port, SG5_3_Pin, 0);
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	2b02      	cmp	r3, #2
 8003068:	f040 819a 	bne.w	80033a0 <command_lamp+0x5a8>
 800306c:	78bb      	ldrb	r3, [r7, #2]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d105      	bne.n	800307e <command_lamp+0x286>
 8003072:	2200      	movs	r2, #0
 8003074:	2110      	movs	r1, #16
 8003076:	4821      	ldr	r0, [pc, #132]	@ (80030fc <command_lamp+0x304>)
 8003078:	f005 fe78 	bl	8008d6c <HAL_GPIO_WritePin>
				else 						HAL_GPIO_WritePin(SG5_3_GPIO_Port, SG5_3_Pin, 1);}
			break;
 800307c:	e190      	b.n	80033a0 <command_lamp+0x5a8>
				else 						HAL_GPIO_WritePin(SG5_3_GPIO_Port, SG5_3_Pin, 1);}
 800307e:	2201      	movs	r2, #1
 8003080:	2110      	movs	r1, #16
 8003082:	481e      	ldr	r0, [pc, #120]	@ (80030fc <command_lamp+0x304>)
 8003084:	f005 fe72 	bl	8008d6c <HAL_GPIO_WritePin>
			break;
 8003088:	e18a      	b.n	80033a0 <command_lamp+0x5a8>
	case 5 :
			if(channel==0 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG6_1_GPIO_Port, SG6_1_Pin, 0);
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10d      	bne.n	80030ac <command_lamp+0x2b4>
 8003090:	78bb      	ldrb	r3, [r7, #2]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d105      	bne.n	80030a2 <command_lamp+0x2aa>
 8003096:	2200      	movs	r2, #0
 8003098:	2180      	movs	r1, #128	@ 0x80
 800309a:	4819      	ldr	r0, [pc, #100]	@ (8003100 <command_lamp+0x308>)
 800309c:	f005 fe66 	bl	8008d6c <HAL_GPIO_WritePin>
 80030a0:	e004      	b.n	80030ac <command_lamp+0x2b4>
				else 						HAL_GPIO_WritePin(SG6_1_GPIO_Port, SG6_1_Pin, 1);}
 80030a2:	2201      	movs	r2, #1
 80030a4:	2180      	movs	r1, #128	@ 0x80
 80030a6:	4816      	ldr	r0, [pc, #88]	@ (8003100 <command_lamp+0x308>)
 80030a8:	f005 fe60 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==1 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG6_2_GPIO_Port, SG6_2_Pin, 0);
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d10d      	bne.n	80030ce <command_lamp+0x2d6>
 80030b2:	78bb      	ldrb	r3, [r7, #2]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d105      	bne.n	80030c4 <command_lamp+0x2cc>
 80030b8:	2200      	movs	r2, #0
 80030ba:	2140      	movs	r1, #64	@ 0x40
 80030bc:	4810      	ldr	r0, [pc, #64]	@ (8003100 <command_lamp+0x308>)
 80030be:	f005 fe55 	bl	8008d6c <HAL_GPIO_WritePin>
 80030c2:	e004      	b.n	80030ce <command_lamp+0x2d6>
				else 						HAL_GPIO_WritePin(SG6_2_GPIO_Port, SG6_2_Pin, 1);}
 80030c4:	2201      	movs	r2, #1
 80030c6:	2140      	movs	r1, #64	@ 0x40
 80030c8:	480d      	ldr	r0, [pc, #52]	@ (8003100 <command_lamp+0x308>)
 80030ca:	f005 fe4f 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==2 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG6_3_GPIO_Port, SG6_3_Pin, 0);
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	f040 8167 	bne.w	80033a4 <command_lamp+0x5ac>
 80030d6:	78bb      	ldrb	r3, [r7, #2]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <command_lamp+0x2f0>
 80030dc:	2200      	movs	r2, #0
 80030de:	2120      	movs	r1, #32
 80030e0:	4807      	ldr	r0, [pc, #28]	@ (8003100 <command_lamp+0x308>)
 80030e2:	f005 fe43 	bl	8008d6c <HAL_GPIO_WritePin>
				else 						HAL_GPIO_WritePin(SG6_3_GPIO_Port, SG6_3_Pin, 1);}
			break;
 80030e6:	e15d      	b.n	80033a4 <command_lamp+0x5ac>
				else 						HAL_GPIO_WritePin(SG6_3_GPIO_Port, SG6_3_Pin, 1);}
 80030e8:	2201      	movs	r2, #1
 80030ea:	2120      	movs	r1, #32
 80030ec:	4804      	ldr	r0, [pc, #16]	@ (8003100 <command_lamp+0x308>)
 80030ee:	f005 fe3d 	bl	8008d6c <HAL_GPIO_WritePin>
			break;
 80030f2:	e157      	b.n	80033a4 <command_lamp+0x5ac>
 80030f4:	40020400 	.word	0x40020400
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40020800 	.word	0x40020800
 8003100:	40020000 	.word	0x40020000
	case 6 :
			if(channel==0 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG7_1_GPIO_Port, SG7_1_Pin, 0);
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10d      	bne.n	8003126 <command_lamp+0x32e>
 800310a:	78bb      	ldrb	r3, [r7, #2]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d105      	bne.n	800311c <command_lamp+0x324>
 8003110:	2200      	movs	r2, #0
 8003112:	2110      	movs	r1, #16
 8003114:	48a8      	ldr	r0, [pc, #672]	@ (80033b8 <command_lamp+0x5c0>)
 8003116:	f005 fe29 	bl	8008d6c <HAL_GPIO_WritePin>
 800311a:	e004      	b.n	8003126 <command_lamp+0x32e>
				else 						HAL_GPIO_WritePin(SG7_1_GPIO_Port, SG7_1_Pin, 1);}
 800311c:	2201      	movs	r2, #1
 800311e:	2110      	movs	r1, #16
 8003120:	48a5      	ldr	r0, [pc, #660]	@ (80033b8 <command_lamp+0x5c0>)
 8003122:	f005 fe23 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==1 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG7_2_GPIO_Port, SG7_2_Pin, 0);
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d10d      	bne.n	8003148 <command_lamp+0x350>
 800312c:	78bb      	ldrb	r3, [r7, #2]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d105      	bne.n	800313e <command_lamp+0x346>
 8003132:	2200      	movs	r2, #0
 8003134:	2108      	movs	r1, #8
 8003136:	48a0      	ldr	r0, [pc, #640]	@ (80033b8 <command_lamp+0x5c0>)
 8003138:	f005 fe18 	bl	8008d6c <HAL_GPIO_WritePin>
 800313c:	e004      	b.n	8003148 <command_lamp+0x350>
				else 						HAL_GPIO_WritePin(SG7_2_GPIO_Port, SG7_2_Pin, 1);}
 800313e:	2201      	movs	r2, #1
 8003140:	2108      	movs	r1, #8
 8003142:	489d      	ldr	r0, [pc, #628]	@ (80033b8 <command_lamp+0x5c0>)
 8003144:	f005 fe12 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==2 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG7_3_GPIO_Port, SG7_3_Pin, 0);
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	2b02      	cmp	r3, #2
 800314c:	f040 812c 	bne.w	80033a8 <command_lamp+0x5b0>
 8003150:	78bb      	ldrb	r3, [r7, #2]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d105      	bne.n	8003162 <command_lamp+0x36a>
 8003156:	2200      	movs	r2, #0
 8003158:	2104      	movs	r1, #4
 800315a:	4897      	ldr	r0, [pc, #604]	@ (80033b8 <command_lamp+0x5c0>)
 800315c:	f005 fe06 	bl	8008d6c <HAL_GPIO_WritePin>
				else 						HAL_GPIO_WritePin(SG7_3_GPIO_Port, SG7_3_Pin, 1);}
			break;
 8003160:	e122      	b.n	80033a8 <command_lamp+0x5b0>
				else 						HAL_GPIO_WritePin(SG7_3_GPIO_Port, SG7_3_Pin, 1);}
 8003162:	2201      	movs	r2, #1
 8003164:	2104      	movs	r1, #4
 8003166:	4894      	ldr	r0, [pc, #592]	@ (80033b8 <command_lamp+0x5c0>)
 8003168:	f005 fe00 	bl	8008d6c <HAL_GPIO_WritePin>
			break;
 800316c:	e11c      	b.n	80033a8 <command_lamp+0x5b0>
	case 7 :
			if(channel==0 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG8_1_GPIO_Port, SG8_1_Pin, 0);
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10d      	bne.n	8003190 <command_lamp+0x398>
 8003174:	78bb      	ldrb	r3, [r7, #2]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d105      	bne.n	8003186 <command_lamp+0x38e>
 800317a:	2200      	movs	r2, #0
 800317c:	2102      	movs	r1, #2
 800317e:	488e      	ldr	r0, [pc, #568]	@ (80033b8 <command_lamp+0x5c0>)
 8003180:	f005 fdf4 	bl	8008d6c <HAL_GPIO_WritePin>
 8003184:	e004      	b.n	8003190 <command_lamp+0x398>
				else 						HAL_GPIO_WritePin(SG8_1_GPIO_Port, SG8_1_Pin, 1);}
 8003186:	2201      	movs	r2, #1
 8003188:	2102      	movs	r1, #2
 800318a:	488b      	ldr	r0, [pc, #556]	@ (80033b8 <command_lamp+0x5c0>)
 800318c:	f005 fdee 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==1 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG8_2_GPIO_Port, SG8_2_Pin, 0);
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d10d      	bne.n	80031b2 <command_lamp+0x3ba>
 8003196:	78bb      	ldrb	r3, [r7, #2]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <command_lamp+0x3b0>
 800319c:	2200      	movs	r2, #0
 800319e:	2101      	movs	r1, #1
 80031a0:	4885      	ldr	r0, [pc, #532]	@ (80033b8 <command_lamp+0x5c0>)
 80031a2:	f005 fde3 	bl	8008d6c <HAL_GPIO_WritePin>
 80031a6:	e004      	b.n	80031b2 <command_lamp+0x3ba>
				else 						HAL_GPIO_WritePin(SG8_2_GPIO_Port, SG8_2_Pin, 1);}
 80031a8:	2201      	movs	r2, #1
 80031aa:	2101      	movs	r1, #1
 80031ac:	4882      	ldr	r0, [pc, #520]	@ (80033b8 <command_lamp+0x5c0>)
 80031ae:	f005 fddd 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==2 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG8_3_GPIO_Port, SG8_3_Pin, 0);
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	f040 80f9 	bne.w	80033ac <command_lamp+0x5b4>
 80031ba:	78bb      	ldrb	r3, [r7, #2]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <command_lamp+0x3d4>
 80031c0:	2200      	movs	r2, #0
 80031c2:	2108      	movs	r1, #8
 80031c4:	487d      	ldr	r0, [pc, #500]	@ (80033bc <command_lamp+0x5c4>)
 80031c6:	f005 fdd1 	bl	8008d6c <HAL_GPIO_WritePin>
				else 						HAL_GPIO_WritePin(SG8_3_GPIO_Port, SG8_3_Pin, 1);}
			break;
 80031ca:	e0ef      	b.n	80033ac <command_lamp+0x5b4>
				else 						HAL_GPIO_WritePin(SG8_3_GPIO_Port, SG8_3_Pin, 1);}
 80031cc:	2201      	movs	r2, #1
 80031ce:	2108      	movs	r1, #8
 80031d0:	487a      	ldr	r0, [pc, #488]	@ (80033bc <command_lamp+0x5c4>)
 80031d2:	f005 fdcb 	bl	8008d6c <HAL_GPIO_WritePin>
			break;
 80031d6:	e0e9      	b.n	80033ac <command_lamp+0x5b4>
	case 8 :
			if(channel==0 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG9_1_GPIO_Port, SG9_1_Pin, 0);
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10d      	bne.n	80031fa <command_lamp+0x402>
 80031de:	78bb      	ldrb	r3, [r7, #2]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d105      	bne.n	80031f0 <command_lamp+0x3f8>
 80031e4:	2200      	movs	r2, #0
 80031e6:	2102      	movs	r1, #2
 80031e8:	4875      	ldr	r0, [pc, #468]	@ (80033c0 <command_lamp+0x5c8>)
 80031ea:	f005 fdbf 	bl	8008d6c <HAL_GPIO_WritePin>
 80031ee:	e004      	b.n	80031fa <command_lamp+0x402>
				else 						HAL_GPIO_WritePin(SG9_1_GPIO_Port, SG9_1_Pin, 1);}
 80031f0:	2201      	movs	r2, #1
 80031f2:	2102      	movs	r1, #2
 80031f4:	4872      	ldr	r0, [pc, #456]	@ (80033c0 <command_lamp+0x5c8>)
 80031f6:	f005 fdb9 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==1 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG9_2_GPIO_Port, SG9_2_Pin, 0);
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d10d      	bne.n	800321c <command_lamp+0x424>
 8003200:	78bb      	ldrb	r3, [r7, #2]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d105      	bne.n	8003212 <command_lamp+0x41a>
 8003206:	2200      	movs	r2, #0
 8003208:	2101      	movs	r1, #1
 800320a:	486d      	ldr	r0, [pc, #436]	@ (80033c0 <command_lamp+0x5c8>)
 800320c:	f005 fdae 	bl	8008d6c <HAL_GPIO_WritePin>
 8003210:	e004      	b.n	800321c <command_lamp+0x424>
				else 						HAL_GPIO_WritePin(SG9_2_GPIO_Port, SG9_2_Pin, 1);}
 8003212:	2201      	movs	r2, #1
 8003214:	2101      	movs	r1, #1
 8003216:	486a      	ldr	r0, [pc, #424]	@ (80033c0 <command_lamp+0x5c8>)
 8003218:	f005 fda8 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==2 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG9_3_GPIO_Port, SG9_3_Pin, 0);
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	2b02      	cmp	r3, #2
 8003220:	f040 80c6 	bne.w	80033b0 <command_lamp+0x5b8>
 8003224:	78bb      	ldrb	r3, [r7, #2]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <command_lamp+0x440>
 800322a:	2200      	movs	r2, #0
 800322c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003230:	4864      	ldr	r0, [pc, #400]	@ (80033c4 <command_lamp+0x5cc>)
 8003232:	f005 fd9b 	bl	8008d6c <HAL_GPIO_WritePin>
				else 						HAL_GPIO_WritePin(SG9_3_GPIO_Port, SG9_3_Pin, 1);}
			break;
 8003236:	e0bb      	b.n	80033b0 <command_lamp+0x5b8>
				else 						HAL_GPIO_WritePin(SG9_3_GPIO_Port, SG9_3_Pin, 1);}
 8003238:	2201      	movs	r2, #1
 800323a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800323e:	4861      	ldr	r0, [pc, #388]	@ (80033c4 <command_lamp+0x5cc>)
 8003240:	f005 fd94 	bl	8008d6c <HAL_GPIO_WritePin>
			break;
 8003244:	e0b4      	b.n	80033b0 <command_lamp+0x5b8>
	case 9 :
			if(channel==0 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG10_1_GPIO_Port, SG10_1_Pin, 0);
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10f      	bne.n	800326c <command_lamp+0x474>
 800324c:	78bb      	ldrb	r3, [r7, #2]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d106      	bne.n	8003260 <command_lamp+0x468>
 8003252:	2200      	movs	r2, #0
 8003254:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003258:	485a      	ldr	r0, [pc, #360]	@ (80033c4 <command_lamp+0x5cc>)
 800325a:	f005 fd87 	bl	8008d6c <HAL_GPIO_WritePin>
 800325e:	e005      	b.n	800326c <command_lamp+0x474>
				else 						HAL_GPIO_WritePin(SG10_1_GPIO_Port, SG10_1_Pin, 1);}
 8003260:	2201      	movs	r2, #1
 8003262:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003266:	4857      	ldr	r0, [pc, #348]	@ (80033c4 <command_lamp+0x5cc>)
 8003268:	f005 fd80 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==1 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG10_2_GPIO_Port, SG10_2_Pin, 0);
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d10d      	bne.n	800328e <command_lamp+0x496>
 8003272:	78bb      	ldrb	r3, [r7, #2]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <command_lamp+0x48c>
 8003278:	2200      	movs	r2, #0
 800327a:	2180      	movs	r1, #128	@ 0x80
 800327c:	4851      	ldr	r0, [pc, #324]	@ (80033c4 <command_lamp+0x5cc>)
 800327e:	f005 fd75 	bl	8008d6c <HAL_GPIO_WritePin>
 8003282:	e004      	b.n	800328e <command_lamp+0x496>
				else 						HAL_GPIO_WritePin(SG10_2_GPIO_Port, SG10_2_Pin, 1);}
 8003284:	2201      	movs	r2, #1
 8003286:	2180      	movs	r1, #128	@ 0x80
 8003288:	484e      	ldr	r0, [pc, #312]	@ (80033c4 <command_lamp+0x5cc>)
 800328a:	f005 fd6f 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==2 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG10_3_GPIO_Port, SG10_3_Pin, 0);
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	2b02      	cmp	r3, #2
 8003292:	f040 808f 	bne.w	80033b4 <command_lamp+0x5bc>
 8003296:	78bb      	ldrb	r3, [r7, #2]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d105      	bne.n	80032a8 <command_lamp+0x4b0>
 800329c:	2200      	movs	r2, #0
 800329e:	2140      	movs	r1, #64	@ 0x40
 80032a0:	4848      	ldr	r0, [pc, #288]	@ (80033c4 <command_lamp+0x5cc>)
 80032a2:	f005 fd63 	bl	8008d6c <HAL_GPIO_WritePin>
				else 						HAL_GPIO_WritePin(SG10_3_GPIO_Port, SG10_3_Pin, 1);}
			break;
 80032a6:	e085      	b.n	80033b4 <command_lamp+0x5bc>
				else 						HAL_GPIO_WritePin(SG10_3_GPIO_Port, SG10_3_Pin, 1);}
 80032a8:	2201      	movs	r2, #1
 80032aa:	2140      	movs	r1, #64	@ 0x40
 80032ac:	4845      	ldr	r0, [pc, #276]	@ (80033c4 <command_lamp+0x5cc>)
 80032ae:	f005 fd5d 	bl	8008d6c <HAL_GPIO_WritePin>
			break;
 80032b2:	e07f      	b.n	80033b4 <command_lamp+0x5bc>
	case 10 :
			if(channel==0 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG11_1_GPIO_Port, SG11_1_Pin, 0);
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10d      	bne.n	80032d6 <command_lamp+0x4de>
 80032ba:	78bb      	ldrb	r3, [r7, #2]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <command_lamp+0x4d4>
 80032c0:	2200      	movs	r2, #0
 80032c2:	2120      	movs	r1, #32
 80032c4:	483f      	ldr	r0, [pc, #252]	@ (80033c4 <command_lamp+0x5cc>)
 80032c6:	f005 fd51 	bl	8008d6c <HAL_GPIO_WritePin>
 80032ca:	e004      	b.n	80032d6 <command_lamp+0x4de>
				else 						HAL_GPIO_WritePin(SG11_1_GPIO_Port, SG11_1_Pin, 1);}
 80032cc:	2201      	movs	r2, #1
 80032ce:	2120      	movs	r1, #32
 80032d0:	483c      	ldr	r0, [pc, #240]	@ (80033c4 <command_lamp+0x5cc>)
 80032d2:	f005 fd4b 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==1 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG11_2_GPIO_Port, SG11_2_Pin, 0);
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d10d      	bne.n	80032f8 <command_lamp+0x500>
 80032dc:	78bb      	ldrb	r3, [r7, #2]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d105      	bne.n	80032ee <command_lamp+0x4f6>
 80032e2:	2200      	movs	r2, #0
 80032e4:	2110      	movs	r1, #16
 80032e6:	4837      	ldr	r0, [pc, #220]	@ (80033c4 <command_lamp+0x5cc>)
 80032e8:	f005 fd40 	bl	8008d6c <HAL_GPIO_WritePin>
 80032ec:	e004      	b.n	80032f8 <command_lamp+0x500>
				else 						HAL_GPIO_WritePin(SG11_2_GPIO_Port, SG11_2_Pin, 1);}
 80032ee:	2201      	movs	r2, #1
 80032f0:	2110      	movs	r1, #16
 80032f2:	4834      	ldr	r0, [pc, #208]	@ (80033c4 <command_lamp+0x5cc>)
 80032f4:	f005 fd3a 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==2 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG11_3_GPIO_Port, SG11_3_Pin, 0);
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d166      	bne.n	80033cc <command_lamp+0x5d4>
 80032fe:	78bb      	ldrb	r3, [r7, #2]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d105      	bne.n	8003310 <command_lamp+0x518>
 8003304:	2200      	movs	r2, #0
 8003306:	2108      	movs	r1, #8
 8003308:	482e      	ldr	r0, [pc, #184]	@ (80033c4 <command_lamp+0x5cc>)
 800330a:	f005 fd2f 	bl	8008d6c <HAL_GPIO_WritePin>
				else 						HAL_GPIO_WritePin(SG11_3_GPIO_Port, SG11_3_Pin, 1);}
			break;
 800330e:	e05d      	b.n	80033cc <command_lamp+0x5d4>
				else 						HAL_GPIO_WritePin(SG11_3_GPIO_Port, SG11_3_Pin, 1);}
 8003310:	2201      	movs	r2, #1
 8003312:	2108      	movs	r1, #8
 8003314:	482b      	ldr	r0, [pc, #172]	@ (80033c4 <command_lamp+0x5cc>)
 8003316:	f005 fd29 	bl	8008d6c <HAL_GPIO_WritePin>
			break;
 800331a:	e057      	b.n	80033cc <command_lamp+0x5d4>
	case 11 :
			if(channel==0 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG12_1_GPIO_Port, SG12_1_Pin, 0);
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10f      	bne.n	8003342 <command_lamp+0x54a>
 8003322:	78bb      	ldrb	r3, [r7, #2]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d106      	bne.n	8003336 <command_lamp+0x53e>
 8003328:	2200      	movs	r2, #0
 800332a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800332e:	4826      	ldr	r0, [pc, #152]	@ (80033c8 <command_lamp+0x5d0>)
 8003330:	f005 fd1c 	bl	8008d6c <HAL_GPIO_WritePin>
 8003334:	e005      	b.n	8003342 <command_lamp+0x54a>
				else 						HAL_GPIO_WritePin(SG12_1_GPIO_Port, SG12_1_Pin, 1);}
 8003336:	2201      	movs	r2, #1
 8003338:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800333c:	4822      	ldr	r0, [pc, #136]	@ (80033c8 <command_lamp+0x5d0>)
 800333e:	f005 fd15 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==1 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG12_2_GPIO_Port, SG12_2_Pin, 0);
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d10f      	bne.n	8003368 <command_lamp+0x570>
 8003348:	78bb      	ldrb	r3, [r7, #2]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <command_lamp+0x564>
 800334e:	2200      	movs	r2, #0
 8003350:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003354:	481c      	ldr	r0, [pc, #112]	@ (80033c8 <command_lamp+0x5d0>)
 8003356:	f005 fd09 	bl	8008d6c <HAL_GPIO_WritePin>
 800335a:	e005      	b.n	8003368 <command_lamp+0x570>
				else 						HAL_GPIO_WritePin(SG12_2_GPIO_Port, SG12_2_Pin, 1);}
 800335c:	2201      	movs	r2, #1
 800335e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003362:	4819      	ldr	r0, [pc, #100]	@ (80033c8 <command_lamp+0x5d0>)
 8003364:	f005 fd02 	bl	8008d6c <HAL_GPIO_WritePin>

			if(channel==2 ){ if( set_reset==0) 	HAL_GPIO_WritePin(SG12_3_GPIO_Port, SG12_3_Pin, 0);
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d130      	bne.n	80033d0 <command_lamp+0x5d8>
 800336e:	78bb      	ldrb	r3, [r7, #2]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d106      	bne.n	8003382 <command_lamp+0x58a>
 8003374:	2200      	movs	r2, #0
 8003376:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800337a:	4813      	ldr	r0, [pc, #76]	@ (80033c8 <command_lamp+0x5d0>)
 800337c:	f005 fcf6 	bl	8008d6c <HAL_GPIO_WritePin>
				else 						HAL_GPIO_WritePin(SG12_3_GPIO_Port, SG12_3_Pin, 1);}
			break;
 8003380:	e026      	b.n	80033d0 <command_lamp+0x5d8>
				else 						HAL_GPIO_WritePin(SG12_3_GPIO_Port, SG12_3_Pin, 1);}
 8003382:	2201      	movs	r2, #1
 8003384:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003388:	480f      	ldr	r0, [pc, #60]	@ (80033c8 <command_lamp+0x5d0>)
 800338a:	f005 fcef 	bl	8008d6c <HAL_GPIO_WritePin>
			break;
 800338e:	e01f      	b.n	80033d0 <command_lamp+0x5d8>
		break;
 8003390:	bf00      	nop
 8003392:	e01e      	b.n	80033d2 <command_lamp+0x5da>
		break;
 8003394:	bf00      	nop
 8003396:	e01c      	b.n	80033d2 <command_lamp+0x5da>
			break;
 8003398:	bf00      	nop
 800339a:	e01a      	b.n	80033d2 <command_lamp+0x5da>
			break;
 800339c:	bf00      	nop
 800339e:	e018      	b.n	80033d2 <command_lamp+0x5da>
			break;
 80033a0:	bf00      	nop
 80033a2:	e016      	b.n	80033d2 <command_lamp+0x5da>
			break;
 80033a4:	bf00      	nop
 80033a6:	e014      	b.n	80033d2 <command_lamp+0x5da>
			break;
 80033a8:	bf00      	nop
 80033aa:	e012      	b.n	80033d2 <command_lamp+0x5da>
			break;
 80033ac:	bf00      	nop
 80033ae:	e010      	b.n	80033d2 <command_lamp+0x5da>
			break;
 80033b0:	bf00      	nop
 80033b2:	e00e      	b.n	80033d2 <command_lamp+0x5da>
			break;
 80033b4:	bf00      	nop
 80033b6:	e00c      	b.n	80033d2 <command_lamp+0x5da>
 80033b8:	40020000 	.word	0x40020000
 80033bc:	40020800 	.word	0x40020800
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40020400 	.word	0x40020400
 80033c8:	40021800 	.word	0x40021800
			break;
 80033cc:	bf00      	nop
 80033ce:	e000      	b.n	80033d2 <command_lamp+0x5da>
			break;
 80033d0:	bf00      	nop
	}
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop

080033dc <Excute_Red_Time>:

void Excute_Red_Time(void)
{
 80033dc:	b5b0      	push	{r4, r5, r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
	if(timerun_phs < PLAN[Selected_PLAN][Running_Phase].r+PLAN[Selected_PLAN][Running_Phase].g+PLAN[Selected_PLAN][Running_Phase].y
 80033e2:	4bac      	ldr	r3, [pc, #688]	@ (8003694 <Excute_Red_Time+0x2b8>)
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	461d      	mov	r5, r3
 80033e8:	4bab      	ldr	r3, [pc, #684]	@ (8003698 <Excute_Red_Time+0x2bc>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	4bab      	ldr	r3, [pc, #684]	@ (800369c <Excute_Red_Time+0x2c0>)
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	49ab      	ldr	r1, [pc, #684]	@ (80036a0 <Excute_Red_Time+0x2c4>)
 80033f4:	461a      	mov	r2, r3
 80033f6:	0052      	lsls	r2, r2, #1
 80033f8:	441a      	add	r2, r3
 80033fa:	0053      	lsls	r3, r2, #1
 80033fc:	461a      	mov	r2, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4403      	add	r3, r0
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	4413      	add	r3, r2
 8003408:	440b      	add	r3, r1
 800340a:	3302      	adds	r3, #2
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	461c      	mov	r4, r3
 8003410:	4ba1      	ldr	r3, [pc, #644]	@ (8003698 <Excute_Red_Time+0x2bc>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	4ba1      	ldr	r3, [pc, #644]	@ (800369c <Excute_Red_Time+0x2c0>)
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	49a1      	ldr	r1, [pc, #644]	@ (80036a0 <Excute_Red_Time+0x2c4>)
 800341c:	461a      	mov	r2, r3
 800341e:	0052      	lsls	r2, r2, #1
 8003420:	441a      	add	r2, r3
 8003422:	0053      	lsls	r3, r2, #1
 8003424:	461a      	mov	r2, r3
 8003426:	4603      	mov	r3, r0
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	4403      	add	r3, r0
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	4413      	add	r3, r2
 8003430:	440b      	add	r3, r1
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	18e1      	adds	r1, r4, r3
 8003436:	4b98      	ldr	r3, [pc, #608]	@ (8003698 <Excute_Red_Time+0x2bc>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	461c      	mov	r4, r3
 800343c:	4b97      	ldr	r3, [pc, #604]	@ (800369c <Excute_Red_Time+0x2c0>)
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	4897      	ldr	r0, [pc, #604]	@ (80036a0 <Excute_Red_Time+0x2c4>)
 8003442:	461a      	mov	r2, r3
 8003444:	0052      	lsls	r2, r2, #1
 8003446:	441a      	add	r2, r3
 8003448:	0053      	lsls	r3, r2, #1
 800344a:	461a      	mov	r2, r3
 800344c:	4623      	mov	r3, r4
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4423      	add	r3, r4
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	4413      	add	r3, r2
 8003456:	4403      	add	r3, r0
 8003458:	3301      	adds	r3, #1
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	440b      	add	r3, r1
 800345e:	429d      	cmp	r5, r3
 8003460:	f280 8287 	bge.w	8003972 <Excute_Red_Time+0x596>
			&& timerun_phs >= PLAN[Selected_PLAN][Running_Phase].g+PLAN[Selected_PLAN][Running_Phase].y)
 8003464:	4b8b      	ldr	r3, [pc, #556]	@ (8003694 <Excute_Red_Time+0x2b8>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	461c      	mov	r4, r3
 800346a:	4b8b      	ldr	r3, [pc, #556]	@ (8003698 <Excute_Red_Time+0x2bc>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	4b8a      	ldr	r3, [pc, #552]	@ (800369c <Excute_Red_Time+0x2c0>)
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	498a      	ldr	r1, [pc, #552]	@ (80036a0 <Excute_Red_Time+0x2c4>)
 8003476:	461a      	mov	r2, r3
 8003478:	0052      	lsls	r2, r2, #1
 800347a:	441a      	add	r2, r3
 800347c:	0053      	lsls	r3, r2, #1
 800347e:	461a      	mov	r2, r3
 8003480:	4603      	mov	r3, r0
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4403      	add	r3, r0
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	4413      	add	r3, r2
 800348a:	440b      	add	r3, r1
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	461d      	mov	r5, r3
 8003490:	4b81      	ldr	r3, [pc, #516]	@ (8003698 <Excute_Red_Time+0x2bc>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	4b81      	ldr	r3, [pc, #516]	@ (800369c <Excute_Red_Time+0x2c0>)
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	4981      	ldr	r1, [pc, #516]	@ (80036a0 <Excute_Red_Time+0x2c4>)
 800349c:	461a      	mov	r2, r3
 800349e:	0052      	lsls	r2, r2, #1
 80034a0:	441a      	add	r2, r3
 80034a2:	0053      	lsls	r3, r2, #1
 80034a4:	461a      	mov	r2, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4403      	add	r3, r0
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	4413      	add	r3, r2
 80034b0:	440b      	add	r3, r1
 80034b2:	3301      	adds	r3, #1
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	442b      	add	r3, r5
 80034b8:	429c      	cmp	r4, r3
 80034ba:	f2c0 825a 	blt.w	8003972 <Excute_Red_Time+0x596>
	{
		for(int i=0; i<12;i++)
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	e252      	b.n	800396a <Excute_Red_Time+0x58e>
		{
			switch (SG_set[Running_Phase][i]){
 80034c4:	4b75      	ldr	r3, [pc, #468]	@ (800369c <Excute_Red_Time+0x2c0>)
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	4619      	mov	r1, r3
 80034ca:	4a76      	ldr	r2, [pc, #472]	@ (80036a4 <Excute_Red_Time+0x2c8>)
 80034cc:	460b      	mov	r3, r1
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	440b      	add	r3, r1
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	441a      	add	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b0b      	cmp	r3, #11
 80034de:	f200 8241 	bhi.w	8003964 <Excute_Red_Time+0x588>
 80034e2:	a201      	add	r2, pc, #4	@ (adr r2, 80034e8 <Excute_Red_Time+0x10c>)
 80034e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e8:	0800395b 	.word	0x0800395b
 80034ec:	08003519 	.word	0x08003519
 80034f0:	08003603 	.word	0x08003603
 80034f4:	0800366f 	.word	0x0800366f
 80034f8:	080036f3 	.word	0x080036f3
 80034fc:	0800375f 	.word	0x0800375f
 8003500:	08003523 	.word	0x08003523
 8003504:	08003769 	.word	0x08003769
 8003508:	08003849 	.word	0x08003849
 800350c:	08003929 	.word	0x08003929
 8003510:	0800393d 	.word	0x0800393d
 8003514:	08003951 	.word	0x08003951
			case (mode_R1):
				command_lamp_HIL(i, APILL_RED);
 8003518:	2100      	movs	r1, #0
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff faba 	bl	8002a94 <command_lamp_HIL>
				break;
 8003520:	e220      	b.n	8003964 <Excute_Red_Time+0x588>
			case (mode_K1) :
				if(SG_set[Running_Phase+1][i]==mode_K1){
 8003522:	4b5e      	ldr	r3, [pc, #376]	@ (800369c <Excute_Red_Time+0x2c0>)
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	495e      	ldr	r1, [pc, #376]	@ (80036a4 <Excute_Red_Time+0x2c8>)
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	18ca      	adds	r2, r1, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4413      	add	r3, r2
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b06      	cmp	r3, #6
 800353c:	d15c      	bne.n	80035f8 <Excute_Red_Time+0x21c>
					elapsed_time_green[i]= PLAN[Selected_PLAN][Running_Phase+1].g+PLAN[Selected_PLAN][Running_Phase].r - (timerun_phs - PLAN[Selected_PLAN][Running_Phase].g - PLAN[Selected_PLAN][Running_Phase].y);
 800353e:	4b56      	ldr	r3, [pc, #344]	@ (8003698 <Excute_Red_Time+0x2bc>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	4b55      	ldr	r3, [pc, #340]	@ (800369c <Excute_Red_Time+0x2c0>)
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	3301      	adds	r3, #1
 800354a:	4955      	ldr	r1, [pc, #340]	@ (80036a0 <Excute_Red_Time+0x2c4>)
 800354c:	461a      	mov	r2, r3
 800354e:	0052      	lsls	r2, r2, #1
 8003550:	441a      	add	r2, r3
 8003552:	0053      	lsls	r3, r2, #1
 8003554:	461a      	mov	r2, r3
 8003556:	4603      	mov	r3, r0
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4403      	add	r3, r0
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	4413      	add	r3, r2
 8003560:	440b      	add	r3, r1
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	461c      	mov	r4, r3
 8003566:	4b4c      	ldr	r3, [pc, #304]	@ (8003698 <Excute_Red_Time+0x2bc>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	4b4b      	ldr	r3, [pc, #300]	@ (800369c <Excute_Red_Time+0x2c0>)
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	494b      	ldr	r1, [pc, #300]	@ (80036a0 <Excute_Red_Time+0x2c4>)
 8003572:	461a      	mov	r2, r3
 8003574:	0052      	lsls	r2, r2, #1
 8003576:	441a      	add	r2, r3
 8003578:	0053      	lsls	r3, r2, #1
 800357a:	461a      	mov	r2, r3
 800357c:	4603      	mov	r3, r0
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4403      	add	r3, r0
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	4413      	add	r3, r2
 8003586:	440b      	add	r3, r1
 8003588:	3302      	adds	r3, #2
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	4423      	add	r3, r4
 800358e:	b299      	uxth	r1, r3
 8003590:	4b41      	ldr	r3, [pc, #260]	@ (8003698 <Excute_Red_Time+0x2bc>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	461c      	mov	r4, r3
 8003596:	4b41      	ldr	r3, [pc, #260]	@ (800369c <Excute_Red_Time+0x2c0>)
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	4841      	ldr	r0, [pc, #260]	@ (80036a0 <Excute_Red_Time+0x2c4>)
 800359c:	461a      	mov	r2, r3
 800359e:	0052      	lsls	r2, r2, #1
 80035a0:	441a      	add	r2, r3
 80035a2:	0053      	lsls	r3, r2, #1
 80035a4:	461a      	mov	r2, r3
 80035a6:	4623      	mov	r3, r4
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	4423      	add	r3, r4
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	4413      	add	r3, r2
 80035b0:	4403      	add	r3, r0
 80035b2:	3301      	adds	r3, #1
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	461d      	mov	r5, r3
 80035b8:	4b37      	ldr	r3, [pc, #220]	@ (8003698 <Excute_Red_Time+0x2bc>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	461c      	mov	r4, r3
 80035be:	4b37      	ldr	r3, [pc, #220]	@ (800369c <Excute_Red_Time+0x2c0>)
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	4837      	ldr	r0, [pc, #220]	@ (80036a0 <Excute_Red_Time+0x2c4>)
 80035c4:	461a      	mov	r2, r3
 80035c6:	0052      	lsls	r2, r2, #1
 80035c8:	441a      	add	r2, r3
 80035ca:	0053      	lsls	r3, r2, #1
 80035cc:	461a      	mov	r2, r3
 80035ce:	4623      	mov	r3, r4
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	4423      	add	r3, r4
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	4413      	add	r3, r2
 80035d8:	4403      	add	r3, r0
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	461a      	mov	r2, r3
 80035de:	4b2d      	ldr	r3, [pc, #180]	@ (8003694 <Excute_Red_Time+0x2b8>)
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	442b      	add	r3, r5
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	440b      	add	r3, r1
 80035ec:	b299      	uxth	r1, r3
 80035ee:	4a2e      	ldr	r2, [pc, #184]	@ (80036a8 <Excute_Red_Time+0x2cc>)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}
				else command_lamp_HIL(i, APILL_RED);
				break;
 80035f6:	e1b5      	b.n	8003964 <Excute_Red_Time+0x588>
				else command_lamp_HIL(i, APILL_RED);
 80035f8:	2100      	movs	r1, #0
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff fa4a 	bl	8002a94 <command_lamp_HIL>
				break;
 8003600:	e1b0      	b.n	8003964 <Excute_Red_Time+0x588>
			case (mode_R2) :
				if(SG_set[Running_Phase+1][i]==mode_R2) command_lamp_HIL(i, APILL_RED);
 8003602:	4b26      	ldr	r3, [pc, #152]	@ (800369c <Excute_Red_Time+0x2c0>)
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	4926      	ldr	r1, [pc, #152]	@ (80036a4 <Excute_Red_Time+0x2c8>)
 800360a:	4613      	mov	r3, r2
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	18ca      	adds	r2, r1, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d104      	bne.n	8003628 <Excute_Red_Time+0x24c>
 800361e:	2100      	movs	r1, #0
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff fa37 	bl	8002a94 <command_lamp_HIL>
				else if(SG_set[Running_Phase+1][i]==mode_NonActive)
					if(SG_set[0][i]==mode_R2) command_lamp_HIL(i, APILL_RED);
					else command_lamp_HIL(i, APILL_RED_Y);
				else command_lamp_HIL(i, APILL_RED_Y);
				break;
 8003626:	e19d      	b.n	8003964 <Excute_Red_Time+0x588>
				else if(SG_set[Running_Phase+1][i]==mode_NonActive)
 8003628:	4b1c      	ldr	r3, [pc, #112]	@ (800369c <Excute_Red_Time+0x2c0>)
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	491d      	ldr	r1, [pc, #116]	@ (80036a4 <Excute_Red_Time+0x2c8>)
 8003630:	4613      	mov	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	18ca      	adds	r2, r1, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4413      	add	r3, r2
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10f      	bne.n	8003664 <Excute_Red_Time+0x288>
					if(SG_set[0][i]==mode_R2) command_lamp_HIL(i, APILL_RED);
 8003644:	4a17      	ldr	r2, [pc, #92]	@ (80036a4 <Excute_Red_Time+0x2c8>)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b02      	cmp	r3, #2
 800364e:	d104      	bne.n	800365a <Excute_Red_Time+0x27e>
 8003650:	2100      	movs	r1, #0
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff fa1e 	bl	8002a94 <command_lamp_HIL>
				break;
 8003658:	e184      	b.n	8003964 <Excute_Red_Time+0x588>
					else command_lamp_HIL(i, APILL_RED_Y);
 800365a:	2103      	movs	r1, #3
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff fa19 	bl	8002a94 <command_lamp_HIL>
				break;
 8003662:	e17f      	b.n	8003964 <Excute_Red_Time+0x588>
				else command_lamp_HIL(i, APILL_RED_Y);
 8003664:	2103      	movs	r1, #3
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff fa14 	bl	8002a94 <command_lamp_HIL>
				break;
 800366c:	e17a      	b.n	8003964 <Excute_Red_Time+0x588>

			case (mode_R3) :
				if(SG_set[Running_Phase+1][i]==mode_R3) command_lamp_HIL(i, APILL_RED);
 800366e:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <Excute_Red_Time+0x2c0>)
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	490b      	ldr	r1, [pc, #44]	@ (80036a4 <Excute_Red_Time+0x2c8>)
 8003676:	4613      	mov	r3, r2
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	18ca      	adds	r2, r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4413      	add	r3, r2
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d110      	bne.n	80036ac <Excute_Red_Time+0x2d0>
 800368a:	2100      	movs	r1, #0
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff fa01 	bl	8002a94 <command_lamp_HIL>
				else if(SG_set[Running_Phase+1][i]==mode_NonActive)
					if(SG_set[0][i]==mode_R3) command_lamp_HIL(i, APILL_RED);
					else command_lamp_HIL(i, APILL_RED_YFlash);
				else command_lamp_HIL(i, APILL_RED_YFlash);
				break;
 8003692:	e167      	b.n	8003964 <Excute_Red_Time+0x588>
 8003694:	2000eb02 	.word	0x2000eb02
 8003698:	2000f48a 	.word	0x2000f48a
 800369c:	2000eb00 	.word	0x2000eb00
 80036a0:	2000ee74 	.word	0x2000ee74
 80036a4:	2000ecec 	.word	0x2000ecec
 80036a8:	2000f470 	.word	0x2000f470
				else if(SG_set[Running_Phase+1][i]==mode_NonActive)
 80036ac:	4bb3      	ldr	r3, [pc, #716]	@ (800397c <Excute_Red_Time+0x5a0>)
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	49b3      	ldr	r1, [pc, #716]	@ (8003980 <Excute_Red_Time+0x5a4>)
 80036b4:	4613      	mov	r3, r2
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	4413      	add	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	18ca      	adds	r2, r1, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10f      	bne.n	80036e8 <Excute_Red_Time+0x30c>
					if(SG_set[0][i]==mode_R3) command_lamp_HIL(i, APILL_RED);
 80036c8:	4aad      	ldr	r2, [pc, #692]	@ (8003980 <Excute_Red_Time+0x5a4>)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d104      	bne.n	80036de <Excute_Red_Time+0x302>
 80036d4:	2100      	movs	r1, #0
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff f9dc 	bl	8002a94 <command_lamp_HIL>
				break;
 80036dc:	e142      	b.n	8003964 <Excute_Red_Time+0x588>
					else command_lamp_HIL(i, APILL_RED_YFlash);
 80036de:	210e      	movs	r1, #14
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff f9d7 	bl	8002a94 <command_lamp_HIL>
				break;
 80036e6:	e13d      	b.n	8003964 <Excute_Red_Time+0x588>
				else command_lamp_HIL(i, APILL_RED_YFlash);
 80036e8:	210e      	movs	r1, #14
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff f9d2 	bl	8002a94 <command_lamp_HIL>
				break;
 80036f0:	e138      	b.n	8003964 <Excute_Red_Time+0x588>

			case (mode_R4) :
				if(SG_set[Running_Phase+1][i]==mode_R4) command_lamp_HIL(i, APILL_RED);
 80036f2:	4ba2      	ldr	r3, [pc, #648]	@ (800397c <Excute_Red_Time+0x5a0>)
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	49a1      	ldr	r1, [pc, #644]	@ (8003980 <Excute_Red_Time+0x5a4>)
 80036fa:	4613      	mov	r3, r2
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	18ca      	adds	r2, r1, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4413      	add	r3, r2
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b04      	cmp	r3, #4
 800370c:	d104      	bne.n	8003718 <Excute_Red_Time+0x33c>
 800370e:	2100      	movs	r1, #0
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff f9bf 	bl	8002a94 <command_lamp_HIL>
				else if(SG_set[Running_Phase+1][i]==mode_NonActive)
					if(SG_set[0][i]==mode_R4) command_lamp_HIL(i, APILL_RED);
					else command_lamp_HIL(i, APILL_YELLOW);
				else command_lamp_HIL(i, APILL_YELLOW);
				break;
 8003716:	e125      	b.n	8003964 <Excute_Red_Time+0x588>
				else if(SG_set[Running_Phase+1][i]==mode_NonActive)
 8003718:	4b98      	ldr	r3, [pc, #608]	@ (800397c <Excute_Red_Time+0x5a0>)
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	4998      	ldr	r1, [pc, #608]	@ (8003980 <Excute_Red_Time+0x5a4>)
 8003720:	4613      	mov	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	18ca      	adds	r2, r1, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10f      	bne.n	8003754 <Excute_Red_Time+0x378>
					if(SG_set[0][i]==mode_R4) command_lamp_HIL(i, APILL_RED);
 8003734:	4a92      	ldr	r2, [pc, #584]	@ (8003980 <Excute_Red_Time+0x5a4>)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4413      	add	r3, r2
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b04      	cmp	r3, #4
 800373e:	d104      	bne.n	800374a <Excute_Red_Time+0x36e>
 8003740:	2100      	movs	r1, #0
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff f9a6 	bl	8002a94 <command_lamp_HIL>
				break;
 8003748:	e10c      	b.n	8003964 <Excute_Red_Time+0x588>
					else command_lamp_HIL(i, APILL_YELLOW);
 800374a:	2101      	movs	r1, #1
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff f9a1 	bl	8002a94 <command_lamp_HIL>
				break;
 8003752:	e107      	b.n	8003964 <Excute_Red_Time+0x588>
				else command_lamp_HIL(i, APILL_YELLOW);
 8003754:	2101      	movs	r1, #1
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff f99c 	bl	8002a94 <command_lamp_HIL>
				break;
 800375c:	e102      	b.n	8003964 <Excute_Red_Time+0x588>

			case (mode_RP) :
				command_lamp_HIL(i, APILL_RED);
 800375e:	2100      	movs	r1, #0
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff f997 	bl	8002a94 <command_lamp_HIL>
				break;
 8003766:	e0fd      	b.n	8003964 <Excute_Red_Time+0x588>
			case (mode_K2) :
				if(SG_set[Running_Phase+1][i]==mode_K2){
 8003768:	4b84      	ldr	r3, [pc, #528]	@ (800397c <Excute_Red_Time+0x5a0>)
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	4984      	ldr	r1, [pc, #528]	@ (8003980 <Excute_Red_Time+0x5a4>)
 8003770:	4613      	mov	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	18ca      	adds	r2, r1, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b07      	cmp	r3, #7
 8003782:	d15c      	bne.n	800383e <Excute_Red_Time+0x462>
					elapsed_time_green[i]= PLAN[Selected_PLAN][Running_Phase+1].g+PLAN[Selected_PLAN][Running_Phase].r - (timerun_phs - PLAN[Selected_PLAN][Running_Phase].g - PLAN[Selected_PLAN][Running_Phase].y);
 8003784:	4b7f      	ldr	r3, [pc, #508]	@ (8003984 <Excute_Red_Time+0x5a8>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	4b7c      	ldr	r3, [pc, #496]	@ (800397c <Excute_Red_Time+0x5a0>)
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	3301      	adds	r3, #1
 8003790:	497d      	ldr	r1, [pc, #500]	@ (8003988 <Excute_Red_Time+0x5ac>)
 8003792:	461a      	mov	r2, r3
 8003794:	0052      	lsls	r2, r2, #1
 8003796:	441a      	add	r2, r3
 8003798:	0053      	lsls	r3, r2, #1
 800379a:	461a      	mov	r2, r3
 800379c:	4603      	mov	r3, r0
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4403      	add	r3, r0
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	4413      	add	r3, r2
 80037a6:	440b      	add	r3, r1
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	461c      	mov	r4, r3
 80037ac:	4b75      	ldr	r3, [pc, #468]	@ (8003984 <Excute_Red_Time+0x5a8>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	4b72      	ldr	r3, [pc, #456]	@ (800397c <Excute_Red_Time+0x5a0>)
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	4974      	ldr	r1, [pc, #464]	@ (8003988 <Excute_Red_Time+0x5ac>)
 80037b8:	461a      	mov	r2, r3
 80037ba:	0052      	lsls	r2, r2, #1
 80037bc:	441a      	add	r2, r3
 80037be:	0053      	lsls	r3, r2, #1
 80037c0:	461a      	mov	r2, r3
 80037c2:	4603      	mov	r3, r0
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4403      	add	r3, r0
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	4413      	add	r3, r2
 80037cc:	440b      	add	r3, r1
 80037ce:	3302      	adds	r3, #2
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	4423      	add	r3, r4
 80037d4:	b299      	uxth	r1, r3
 80037d6:	4b6b      	ldr	r3, [pc, #428]	@ (8003984 <Excute_Red_Time+0x5a8>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	461c      	mov	r4, r3
 80037dc:	4b67      	ldr	r3, [pc, #412]	@ (800397c <Excute_Red_Time+0x5a0>)
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	4869      	ldr	r0, [pc, #420]	@ (8003988 <Excute_Red_Time+0x5ac>)
 80037e2:	461a      	mov	r2, r3
 80037e4:	0052      	lsls	r2, r2, #1
 80037e6:	441a      	add	r2, r3
 80037e8:	0053      	lsls	r3, r2, #1
 80037ea:	461a      	mov	r2, r3
 80037ec:	4623      	mov	r3, r4
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4423      	add	r3, r4
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	4413      	add	r3, r2
 80037f6:	4403      	add	r3, r0
 80037f8:	3301      	adds	r3, #1
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	461d      	mov	r5, r3
 80037fe:	4b61      	ldr	r3, [pc, #388]	@ (8003984 <Excute_Red_Time+0x5a8>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	461c      	mov	r4, r3
 8003804:	4b5d      	ldr	r3, [pc, #372]	@ (800397c <Excute_Red_Time+0x5a0>)
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	485f      	ldr	r0, [pc, #380]	@ (8003988 <Excute_Red_Time+0x5ac>)
 800380a:	461a      	mov	r2, r3
 800380c:	0052      	lsls	r2, r2, #1
 800380e:	441a      	add	r2, r3
 8003810:	0053      	lsls	r3, r2, #1
 8003812:	461a      	mov	r2, r3
 8003814:	4623      	mov	r3, r4
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	4423      	add	r3, r4
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	4413      	add	r3, r2
 800381e:	4403      	add	r3, r0
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	4b59      	ldr	r3, [pc, #356]	@ (800398c <Excute_Red_Time+0x5b0>)
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	b29b      	uxth	r3, r3
 800382c:	442b      	add	r3, r5
 800382e:	b29b      	uxth	r3, r3
 8003830:	440b      	add	r3, r1
 8003832:	b299      	uxth	r1, r3
 8003834:	4a56      	ldr	r2, [pc, #344]	@ (8003990 <Excute_Red_Time+0x5b4>)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}
				else command_lamp_HIL(i, APILL_RED);
				break;
 800383c:	e092      	b.n	8003964 <Excute_Red_Time+0x588>
				else command_lamp_HIL(i, APILL_RED);
 800383e:	2100      	movs	r1, #0
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff f927 	bl	8002a94 <command_lamp_HIL>
				break;
 8003846:	e08d      	b.n	8003964 <Excute_Red_Time+0x588>
			case (mode_K3) :
				if(SG_set[Running_Phase+1][i]==mode_K3){
 8003848:	4b4c      	ldr	r3, [pc, #304]	@ (800397c <Excute_Red_Time+0x5a0>)
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	494c      	ldr	r1, [pc, #304]	@ (8003980 <Excute_Red_Time+0x5a4>)
 8003850:	4613      	mov	r3, r2
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	18ca      	adds	r2, r1, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4413      	add	r3, r2
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b08      	cmp	r3, #8
 8003862:	d15c      	bne.n	800391e <Excute_Red_Time+0x542>
					elapsed_time_green[i]= PLAN[Selected_PLAN][Running_Phase+1].g+PLAN[Selected_PLAN][Running_Phase].r - (timerun_phs - PLAN[Selected_PLAN][Running_Phase].g - PLAN[Selected_PLAN][Running_Phase].y);
 8003864:	4b47      	ldr	r3, [pc, #284]	@ (8003984 <Excute_Red_Time+0x5a8>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	4b44      	ldr	r3, [pc, #272]	@ (800397c <Excute_Red_Time+0x5a0>)
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	3301      	adds	r3, #1
 8003870:	4945      	ldr	r1, [pc, #276]	@ (8003988 <Excute_Red_Time+0x5ac>)
 8003872:	461a      	mov	r2, r3
 8003874:	0052      	lsls	r2, r2, #1
 8003876:	441a      	add	r2, r3
 8003878:	0053      	lsls	r3, r2, #1
 800387a:	461a      	mov	r2, r3
 800387c:	4603      	mov	r3, r0
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	4403      	add	r3, r0
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	4413      	add	r3, r2
 8003886:	440b      	add	r3, r1
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461c      	mov	r4, r3
 800388c:	4b3d      	ldr	r3, [pc, #244]	@ (8003984 <Excute_Red_Time+0x5a8>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	4b3a      	ldr	r3, [pc, #232]	@ (800397c <Excute_Red_Time+0x5a0>)
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	493c      	ldr	r1, [pc, #240]	@ (8003988 <Excute_Red_Time+0x5ac>)
 8003898:	461a      	mov	r2, r3
 800389a:	0052      	lsls	r2, r2, #1
 800389c:	441a      	add	r2, r3
 800389e:	0053      	lsls	r3, r2, #1
 80038a0:	461a      	mov	r2, r3
 80038a2:	4603      	mov	r3, r0
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	4403      	add	r3, r0
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	4413      	add	r3, r2
 80038ac:	440b      	add	r3, r1
 80038ae:	3302      	adds	r3, #2
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	4423      	add	r3, r4
 80038b4:	b299      	uxth	r1, r3
 80038b6:	4b33      	ldr	r3, [pc, #204]	@ (8003984 <Excute_Red_Time+0x5a8>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	461c      	mov	r4, r3
 80038bc:	4b2f      	ldr	r3, [pc, #188]	@ (800397c <Excute_Red_Time+0x5a0>)
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	4831      	ldr	r0, [pc, #196]	@ (8003988 <Excute_Red_Time+0x5ac>)
 80038c2:	461a      	mov	r2, r3
 80038c4:	0052      	lsls	r2, r2, #1
 80038c6:	441a      	add	r2, r3
 80038c8:	0053      	lsls	r3, r2, #1
 80038ca:	461a      	mov	r2, r3
 80038cc:	4623      	mov	r3, r4
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	4423      	add	r3, r4
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	4413      	add	r3, r2
 80038d6:	4403      	add	r3, r0
 80038d8:	3301      	adds	r3, #1
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	461d      	mov	r5, r3
 80038de:	4b29      	ldr	r3, [pc, #164]	@ (8003984 <Excute_Red_Time+0x5a8>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	461c      	mov	r4, r3
 80038e4:	4b25      	ldr	r3, [pc, #148]	@ (800397c <Excute_Red_Time+0x5a0>)
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	4827      	ldr	r0, [pc, #156]	@ (8003988 <Excute_Red_Time+0x5ac>)
 80038ea:	461a      	mov	r2, r3
 80038ec:	0052      	lsls	r2, r2, #1
 80038ee:	441a      	add	r2, r3
 80038f0:	0053      	lsls	r3, r2, #1
 80038f2:	461a      	mov	r2, r3
 80038f4:	4623      	mov	r3, r4
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	4423      	add	r3, r4
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	4413      	add	r3, r2
 80038fe:	4403      	add	r3, r0
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	4b21      	ldr	r3, [pc, #132]	@ (800398c <Excute_Red_Time+0x5b0>)
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	b29b      	uxth	r3, r3
 800390c:	442b      	add	r3, r5
 800390e:	b29b      	uxth	r3, r3
 8003910:	440b      	add	r3, r1
 8003912:	b299      	uxth	r1, r3
 8003914:	4a1e      	ldr	r2, [pc, #120]	@ (8003990 <Excute_Red_Time+0x5b4>)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}
				else command_lamp_HIL(i, APILL_RED);
				break;
 800391c:	e022      	b.n	8003964 <Excute_Red_Time+0x588>
				else command_lamp_HIL(i, APILL_RED);
 800391e:	2100      	movs	r1, #0
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff f8b7 	bl	8002a94 <command_lamp_HIL>
				break;
 8003926:	e01d      	b.n	8003964 <Excute_Red_Time+0x588>
			case (mode_P1) :
				elapsed_time_green[i] = 0;
 8003928:	4a19      	ldr	r2, [pc, #100]	@ (8003990 <Excute_Red_Time+0x5b4>)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2100      	movs	r1, #0
 800392e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				command_lamp_HIL(i, APILL_RED);
 8003932:	2100      	movs	r1, #0
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff f8ad 	bl	8002a94 <command_lamp_HIL>
				break;
 800393a:	e013      	b.n	8003964 <Excute_Red_Time+0x588>
			case (mode_P2) :
				elapsed_time_green[i] = 0;
 800393c:	4a14      	ldr	r2, [pc, #80]	@ (8003990 <Excute_Red_Time+0x5b4>)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2100      	movs	r1, #0
 8003942:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				command_lamp_HIL(i, APILL_RED);
 8003946:	2100      	movs	r1, #0
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff f8a3 	bl	8002a94 <command_lamp_HIL>
				break;
 800394e:	e009      	b.n	8003964 <Excute_Red_Time+0x588>
			case (mode_F1) :
				command_lamp_HIL(i, APILL_FLASH_Y);
 8003950:	210b      	movs	r1, #11
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff f89e 	bl	8002a94 <command_lamp_HIL>
				break;
 8003958:	e004      	b.n	8003964 <Excute_Red_Time+0x588>
			case (mode_NonActive) :
				command_lamp_HIL(i, APILL_NONE);
 800395a:	2104      	movs	r1, #4
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff f899 	bl	8002a94 <command_lamp_HIL>
				break;
 8003962:	bf00      	nop
		for(int i=0; i<12;i++)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3301      	adds	r3, #1
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b0b      	cmp	r3, #11
 800396e:	f77f ada9 	ble.w	80034c4 <Excute_Red_Time+0xe8>
			}

		}

	}
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bdb0      	pop	{r4, r5, r7, pc}
 800397a:	bf00      	nop
 800397c:	2000eb00 	.word	0x2000eb00
 8003980:	2000ecec 	.word	0x2000ecec
 8003984:	2000f48a 	.word	0x2000f48a
 8003988:	2000ee74 	.word	0x2000ee74
 800398c:	2000eb02 	.word	0x2000eb02
 8003990:	2000f470 	.word	0x2000f470

08003994 <Excute_Green_Time>:

void Excute_Green_Time(void)
{
 8003994:	b590      	push	{r4, r7, lr}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
	if(timerun_phs < PLAN[Selected_PLAN][Running_Phase].g )
 800399a:	4ba9      	ldr	r3, [pc, #676]	@ (8003c40 <Excute_Green_Time+0x2ac>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	4ba8      	ldr	r3, [pc, #672]	@ (8003c44 <Excute_Green_Time+0x2b0>)
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	49a8      	ldr	r1, [pc, #672]	@ (8003c48 <Excute_Green_Time+0x2b4>)
 80039a6:	461a      	mov	r2, r3
 80039a8:	0052      	lsls	r2, r2, #1
 80039aa:	441a      	add	r2, r3
 80039ac:	0053      	lsls	r3, r2, #1
 80039ae:	461a      	mov	r2, r3
 80039b0:	4603      	mov	r3, r0
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	4403      	add	r3, r0
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	4413      	add	r3, r2
 80039ba:	440b      	add	r3, r1
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	4ba2      	ldr	r3, [pc, #648]	@ (8003c4c <Excute_Green_Time+0x2b8>)
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	f240 82bb 	bls.w	8003f40 <Excute_Green_Time+0x5ac>
	{
		elapsed_time_green[12] = PLAN[Selected_PLAN][Running_Phase].g -timerun_phs;
 80039ca:	4b9d      	ldr	r3, [pc, #628]	@ (8003c40 <Excute_Green_Time+0x2ac>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	4b9c      	ldr	r3, [pc, #624]	@ (8003c44 <Excute_Green_Time+0x2b0>)
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	499c      	ldr	r1, [pc, #624]	@ (8003c48 <Excute_Green_Time+0x2b4>)
 80039d6:	461a      	mov	r2, r3
 80039d8:	0052      	lsls	r2, r2, #1
 80039da:	441a      	add	r2, r3
 80039dc:	0053      	lsls	r3, r2, #1
 80039de:	461a      	mov	r2, r3
 80039e0:	4603      	mov	r3, r0
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	4403      	add	r3, r0
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	4413      	add	r3, r2
 80039ea:	440b      	add	r3, r1
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	4b96      	ldr	r3, [pc, #600]	@ (8003c4c <Excute_Green_Time+0x2b8>)
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	4b95      	ldr	r3, [pc, #596]	@ (8003c50 <Excute_Green_Time+0x2bc>)
 80039fa:	831a      	strh	r2, [r3, #24]
		for(int i=0; i<12;i++)
 80039fc:	2300      	movs	r3, #0
 80039fe:	607b      	str	r3, [r7, #4]
 8003a00:	e29a      	b.n	8003f38 <Excute_Green_Time+0x5a4>
		{
			switch (SG_set[Running_Phase][i]){
 8003a02:	4b90      	ldr	r3, [pc, #576]	@ (8003c44 <Excute_Green_Time+0x2b0>)
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	4619      	mov	r1, r3
 8003a08:	4a92      	ldr	r2, [pc, #584]	@ (8003c54 <Excute_Green_Time+0x2c0>)
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	440b      	add	r3, r1
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	441a      	add	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4413      	add	r3, r2
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b0b      	cmp	r3, #11
 8003a1c:	f200 8287 	bhi.w	8003f2e <Excute_Green_Time+0x59a>
 8003a20:	a201      	add	r2, pc, #4	@ (adr r2, 8003a28 <Excute_Green_Time+0x94>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003f03 	.word	0x08003f03
 8003a2c:	08003a59 	.word	0x08003a59
 8003a30:	08003b3d 	.word	0x08003b3d
 8003a34:	08003b47 	.word	0x08003b47
 8003a38:	08003b51 	.word	0x08003b51
 8003a3c:	08003b5b 	.word	0x08003b5b
 8003a40:	08003a63 	.word	0x08003a63
 8003a44:	08003b65 	.word	0x08003b65
 8003a48:	08003c59 	.word	0x08003c59
 8003a4c:	08003d47 	.word	0x08003d47
 8003a50:	08003e21 	.word	0x08003e21
 8003a54:	08003ef9 	.word	0x08003ef9
			case (mode_R1):
				command_lamp_HIL(i, APILL_RED);
 8003a58:	2100      	movs	r1, #0
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff f81a 	bl	8002a94 <command_lamp_HIL>
				break;
 8003a60:	e265      	b.n	8003f2e <Excute_Green_Time+0x59a>
			case (mode_K1) :
				command_lamp_HIL(i, APILL_GREEN);		//Mengaktifkan Lampu Hijau
 8003a62:	2102      	movs	r1, #2
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff f815 	bl	8002a94 <command_lamp_HIL>

				if(SG_set[Running_Phase+1][i]!=mode_K1)
 8003a6a:	4b76      	ldr	r3, [pc, #472]	@ (8003c44 <Excute_Green_Time+0x2b0>)
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	4978      	ldr	r1, [pc, #480]	@ (8003c54 <Excute_Green_Time+0x2c0>)
 8003a72:	4613      	mov	r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	4413      	add	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	18ca      	adds	r2, r1, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4413      	add	r3, r2
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b06      	cmp	r3, #6
 8003a84:	d005      	beq.n	8003a92 <Excute_Green_Time+0xfe>
					elapsed_time_green[i]=elapsed_time_green[12];
 8003a86:	4b72      	ldr	r3, [pc, #456]	@ (8003c50 <Excute_Green_Time+0x2bc>)
 8003a88:	8b19      	ldrh	r1, [r3, #24]
 8003a8a:	4a71      	ldr	r2, [pc, #452]	@ (8003c50 <Excute_Green_Time+0x2bc>)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(SG_set[Running_Phase+1][i]==mode_K1)
 8003a92:	4b6c      	ldr	r3, [pc, #432]	@ (8003c44 <Excute_Green_Time+0x2b0>)
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	496e      	ldr	r1, [pc, #440]	@ (8003c54 <Excute_Green_Time+0x2c0>)
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	18ca      	adds	r2, r1, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b06      	cmp	r3, #6
 8003aac:	f040 822e 	bne.w	8003f0c <Excute_Green_Time+0x578>
					elapsed_time_green[i]=elapsed_time_green[12]+PLAN[Selected_PLAN][Running_Phase].y+PLAN[Selected_PLAN][Running_Phase+1].g+PLAN[Selected_PLAN][Running_Phase].r;
 8003ab0:	4b67      	ldr	r3, [pc, #412]	@ (8003c50 <Excute_Green_Time+0x2bc>)
 8003ab2:	8b19      	ldrh	r1, [r3, #24]
 8003ab4:	4b62      	ldr	r3, [pc, #392]	@ (8003c40 <Excute_Green_Time+0x2ac>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	461c      	mov	r4, r3
 8003aba:	4b62      	ldr	r3, [pc, #392]	@ (8003c44 <Excute_Green_Time+0x2b0>)
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	4862      	ldr	r0, [pc, #392]	@ (8003c48 <Excute_Green_Time+0x2b4>)
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	0052      	lsls	r2, r2, #1
 8003ac4:	441a      	add	r2, r3
 8003ac6:	0053      	lsls	r3, r2, #1
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4623      	mov	r3, r4
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4423      	add	r3, r4
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	4413      	add	r3, r2
 8003ad4:	4403      	add	r3, r0
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	440b      	add	r3, r1
 8003adc:	b299      	uxth	r1, r3
 8003ade:	4b58      	ldr	r3, [pc, #352]	@ (8003c40 <Excute_Green_Time+0x2ac>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	461c      	mov	r4, r3
 8003ae4:	4b57      	ldr	r3, [pc, #348]	@ (8003c44 <Excute_Green_Time+0x2b0>)
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	4857      	ldr	r0, [pc, #348]	@ (8003c48 <Excute_Green_Time+0x2b4>)
 8003aec:	461a      	mov	r2, r3
 8003aee:	0052      	lsls	r2, r2, #1
 8003af0:	441a      	add	r2, r3
 8003af2:	0053      	lsls	r3, r2, #1
 8003af4:	461a      	mov	r2, r3
 8003af6:	4623      	mov	r3, r4
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	4423      	add	r3, r4
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	4413      	add	r3, r2
 8003b00:	4403      	add	r3, r0
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	440b      	add	r3, r1
 8003b06:	b299      	uxth	r1, r3
 8003b08:	4b4d      	ldr	r3, [pc, #308]	@ (8003c40 <Excute_Green_Time+0x2ac>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	461c      	mov	r4, r3
 8003b0e:	4b4d      	ldr	r3, [pc, #308]	@ (8003c44 <Excute_Green_Time+0x2b0>)
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	484d      	ldr	r0, [pc, #308]	@ (8003c48 <Excute_Green_Time+0x2b4>)
 8003b14:	461a      	mov	r2, r3
 8003b16:	0052      	lsls	r2, r2, #1
 8003b18:	441a      	add	r2, r3
 8003b1a:	0053      	lsls	r3, r2, #1
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4623      	mov	r3, r4
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	4423      	add	r3, r4
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	4413      	add	r3, r2
 8003b28:	4403      	add	r3, r0
 8003b2a:	3302      	adds	r3, #2
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	440b      	add	r3, r1
 8003b30:	b299      	uxth	r1, r3
 8003b32:	4a47      	ldr	r2, [pc, #284]	@ (8003c50 <Excute_Green_Time+0x2bc>)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				break;
 8003b3a:	e1e7      	b.n	8003f0c <Excute_Green_Time+0x578>

			case (mode_R2) :
				command_lamp_HIL(i, APILL_RED);
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fe ffa8 	bl	8002a94 <command_lamp_HIL>
				break;
 8003b44:	e1f3      	b.n	8003f2e <Excute_Green_Time+0x59a>
			case (mode_R3) :
				command_lamp_HIL(i, APILL_RED);
 8003b46:	2100      	movs	r1, #0
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fe ffa3 	bl	8002a94 <command_lamp_HIL>
				break;
 8003b4e:	e1ee      	b.n	8003f2e <Excute_Green_Time+0x59a>
			case (mode_R4) :
				command_lamp_HIL(i, APILL_RED);
 8003b50:	2100      	movs	r1, #0
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fe ff9e 	bl	8002a94 <command_lamp_HIL>
				break;
 8003b58:	e1e9      	b.n	8003f2e <Excute_Green_Time+0x59a>
			case (mode_RP) :
				command_lamp_HIL(i, APILL_RED);
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7fe ff99 	bl	8002a94 <command_lamp_HIL>
				break;
 8003b62:	e1e4      	b.n	8003f2e <Excute_Green_Time+0x59a>
			case (mode_K2) :
				command_lamp_HIL(i, APILL_GREEN);		//Mengaktifkan Lampu Hijau
 8003b64:	2102      	movs	r1, #2
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fe ff94 	bl	8002a94 <command_lamp_HIL>

				if(SG_set[Running_Phase+1][i]!=mode_K2)
 8003b6c:	4b35      	ldr	r3, [pc, #212]	@ (8003c44 <Excute_Green_Time+0x2b0>)
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	4938      	ldr	r1, [pc, #224]	@ (8003c54 <Excute_Green_Time+0x2c0>)
 8003b74:	4613      	mov	r3, r2
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	18ca      	adds	r2, r1, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b07      	cmp	r3, #7
 8003b86:	d005      	beq.n	8003b94 <Excute_Green_Time+0x200>
					elapsed_time_green[i]=elapsed_time_green[12];
 8003b88:	4b31      	ldr	r3, [pc, #196]	@ (8003c50 <Excute_Green_Time+0x2bc>)
 8003b8a:	8b19      	ldrh	r1, [r3, #24]
 8003b8c:	4a30      	ldr	r2, [pc, #192]	@ (8003c50 <Excute_Green_Time+0x2bc>)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(SG_set[Running_Phase+1][i]==mode_K2)
 8003b94:	4b2b      	ldr	r3, [pc, #172]	@ (8003c44 <Excute_Green_Time+0x2b0>)
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	492e      	ldr	r1, [pc, #184]	@ (8003c54 <Excute_Green_Time+0x2c0>)
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	18ca      	adds	r2, r1, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b07      	cmp	r3, #7
 8003bae:	f040 81af 	bne.w	8003f10 <Excute_Green_Time+0x57c>
					elapsed_time_green[i]=elapsed_time_green[12]+PLAN[Selected_PLAN][Running_Phase].y+PLAN[Selected_PLAN][Running_Phase+1].g+PLAN[Selected_PLAN][Running_Phase].r;
 8003bb2:	4b27      	ldr	r3, [pc, #156]	@ (8003c50 <Excute_Green_Time+0x2bc>)
 8003bb4:	8b19      	ldrh	r1, [r3, #24]
 8003bb6:	4b22      	ldr	r3, [pc, #136]	@ (8003c40 <Excute_Green_Time+0x2ac>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	461c      	mov	r4, r3
 8003bbc:	4b21      	ldr	r3, [pc, #132]	@ (8003c44 <Excute_Green_Time+0x2b0>)
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	4821      	ldr	r0, [pc, #132]	@ (8003c48 <Excute_Green_Time+0x2b4>)
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	0052      	lsls	r2, r2, #1
 8003bc6:	441a      	add	r2, r3
 8003bc8:	0053      	lsls	r3, r2, #1
 8003bca:	461a      	mov	r2, r3
 8003bcc:	4623      	mov	r3, r4
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4423      	add	r3, r4
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	4413      	add	r3, r2
 8003bd6:	4403      	add	r3, r0
 8003bd8:	3301      	adds	r3, #1
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	440b      	add	r3, r1
 8003bde:	b299      	uxth	r1, r3
 8003be0:	4b17      	ldr	r3, [pc, #92]	@ (8003c40 <Excute_Green_Time+0x2ac>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	461c      	mov	r4, r3
 8003be6:	4b17      	ldr	r3, [pc, #92]	@ (8003c44 <Excute_Green_Time+0x2b0>)
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	3301      	adds	r3, #1
 8003bec:	4816      	ldr	r0, [pc, #88]	@ (8003c48 <Excute_Green_Time+0x2b4>)
 8003bee:	461a      	mov	r2, r3
 8003bf0:	0052      	lsls	r2, r2, #1
 8003bf2:	441a      	add	r2, r3
 8003bf4:	0053      	lsls	r3, r2, #1
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4623      	mov	r3, r4
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4423      	add	r3, r4
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	4413      	add	r3, r2
 8003c02:	4403      	add	r3, r0
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	440b      	add	r3, r1
 8003c08:	b299      	uxth	r1, r3
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c40 <Excute_Green_Time+0x2ac>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	461c      	mov	r4, r3
 8003c10:	4b0c      	ldr	r3, [pc, #48]	@ (8003c44 <Excute_Green_Time+0x2b0>)
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	480c      	ldr	r0, [pc, #48]	@ (8003c48 <Excute_Green_Time+0x2b4>)
 8003c16:	461a      	mov	r2, r3
 8003c18:	0052      	lsls	r2, r2, #1
 8003c1a:	441a      	add	r2, r3
 8003c1c:	0053      	lsls	r3, r2, #1
 8003c1e:	461a      	mov	r2, r3
 8003c20:	4623      	mov	r3, r4
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	4423      	add	r3, r4
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	4413      	add	r3, r2
 8003c2a:	4403      	add	r3, r0
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	440b      	add	r3, r1
 8003c32:	b299      	uxth	r1, r3
 8003c34:	4a06      	ldr	r2, [pc, #24]	@ (8003c50 <Excute_Green_Time+0x2bc>)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				break;
 8003c3c:	e168      	b.n	8003f10 <Excute_Green_Time+0x57c>
 8003c3e:	bf00      	nop
 8003c40:	2000f48a 	.word	0x2000f48a
 8003c44:	2000eb00 	.word	0x2000eb00
 8003c48:	2000ee74 	.word	0x2000ee74
 8003c4c:	2000eb02 	.word	0x2000eb02
 8003c50:	2000f470 	.word	0x2000f470
 8003c54:	2000ecec 	.word	0x2000ecec

			case (mode_K3) :
				if(SG_set[Running_Phase+1][i]!=mode_K3)
 8003c58:	4baf      	ldr	r3, [pc, #700]	@ (8003f18 <Excute_Green_Time+0x584>)
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	49af      	ldr	r1, [pc, #700]	@ (8003f1c <Excute_Green_Time+0x588>)
 8003c60:	4613      	mov	r3, r2
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	18ca      	adds	r2, r1, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d005      	beq.n	8003c80 <Excute_Green_Time+0x2ec>
				{
					elapsed_time_green[i]=elapsed_time_green[12];
 8003c74:	4baa      	ldr	r3, [pc, #680]	@ (8003f20 <Excute_Green_Time+0x58c>)
 8003c76:	8b19      	ldrh	r1, [r3, #24]
 8003c78:	4aa9      	ldr	r2, [pc, #676]	@ (8003f20 <Excute_Green_Time+0x58c>)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}

				if(SG_set[Running_Phase+1][i]==mode_K3)
 8003c80:	4ba5      	ldr	r3, [pc, #660]	@ (8003f18 <Excute_Green_Time+0x584>)
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	49a5      	ldr	r1, [pc, #660]	@ (8003f1c <Excute_Green_Time+0x588>)
 8003c88:	4613      	mov	r3, r2
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	18ca      	adds	r2, r1, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d144      	bne.n	8003d26 <Excute_Green_Time+0x392>
				{
					elapsed_time_green[i]=elapsed_time_green[12]+PLAN[Selected_PLAN][Running_Phase].y+PLAN[Selected_PLAN][Running_Phase+1].g+PLAN[Selected_PLAN][Running_Phase].r;
 8003c9c:	4ba0      	ldr	r3, [pc, #640]	@ (8003f20 <Excute_Green_Time+0x58c>)
 8003c9e:	8b19      	ldrh	r1, [r3, #24]
 8003ca0:	4ba0      	ldr	r3, [pc, #640]	@ (8003f24 <Excute_Green_Time+0x590>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	461c      	mov	r4, r3
 8003ca6:	4b9c      	ldr	r3, [pc, #624]	@ (8003f18 <Excute_Green_Time+0x584>)
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	489f      	ldr	r0, [pc, #636]	@ (8003f28 <Excute_Green_Time+0x594>)
 8003cac:	461a      	mov	r2, r3
 8003cae:	0052      	lsls	r2, r2, #1
 8003cb0:	441a      	add	r2, r3
 8003cb2:	0053      	lsls	r3, r2, #1
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4623      	mov	r3, r4
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	4423      	add	r3, r4
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	4413      	add	r3, r2
 8003cc0:	4403      	add	r3, r0
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	440b      	add	r3, r1
 8003cc8:	b299      	uxth	r1, r3
 8003cca:	4b96      	ldr	r3, [pc, #600]	@ (8003f24 <Excute_Green_Time+0x590>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	461c      	mov	r4, r3
 8003cd0:	4b91      	ldr	r3, [pc, #580]	@ (8003f18 <Excute_Green_Time+0x584>)
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	4894      	ldr	r0, [pc, #592]	@ (8003f28 <Excute_Green_Time+0x594>)
 8003cd8:	461a      	mov	r2, r3
 8003cda:	0052      	lsls	r2, r2, #1
 8003cdc:	441a      	add	r2, r3
 8003cde:	0053      	lsls	r3, r2, #1
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4623      	mov	r3, r4
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	4423      	add	r3, r4
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	4413      	add	r3, r2
 8003cec:	4403      	add	r3, r0
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	440b      	add	r3, r1
 8003cf2:	b299      	uxth	r1, r3
 8003cf4:	4b8b      	ldr	r3, [pc, #556]	@ (8003f24 <Excute_Green_Time+0x590>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	461c      	mov	r4, r3
 8003cfa:	4b87      	ldr	r3, [pc, #540]	@ (8003f18 <Excute_Green_Time+0x584>)
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	488a      	ldr	r0, [pc, #552]	@ (8003f28 <Excute_Green_Time+0x594>)
 8003d00:	461a      	mov	r2, r3
 8003d02:	0052      	lsls	r2, r2, #1
 8003d04:	441a      	add	r2, r3
 8003d06:	0053      	lsls	r3, r2, #1
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4623      	mov	r3, r4
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	4423      	add	r3, r4
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	4413      	add	r3, r2
 8003d14:	4403      	add	r3, r0
 8003d16:	3302      	adds	r3, #2
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	440b      	add	r3, r1
 8003d1c:	b299      	uxth	r1, r3
 8003d1e:	4a80      	ldr	r2, [pc, #512]	@ (8003f20 <Excute_Green_Time+0x58c>)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}

				if(elapsed_time_green[i]<=5) command_lamp_HIL(i, APILL_FLASH_G);
 8003d26:	4a7e      	ldr	r2, [pc, #504]	@ (8003f20 <Excute_Green_Time+0x58c>)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d2e:	2b05      	cmp	r3, #5
 8003d30:	d804      	bhi.n	8003d3c <Excute_Green_Time+0x3a8>
 8003d32:	210c      	movs	r1, #12
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7fe fead 	bl	8002a94 <command_lamp_HIL>
				else command_lamp_HIL(i, APILL_GREEN);		//Mengaktifkan Lampu Hijau
				break;
 8003d3a:	e0f8      	b.n	8003f2e <Excute_Green_Time+0x59a>
				else command_lamp_HIL(i, APILL_GREEN);		//Mengaktifkan Lampu Hijau
 8003d3c:	2102      	movs	r1, #2
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fe fea8 	bl	8002a94 <command_lamp_HIL>
				break;
 8003d44:	e0f3      	b.n	8003f2e <Excute_Green_Time+0x59a>

			case (mode_P1) :
				command_lamp_HIL(i, APILL_GREEN);		//Mengaktifkan Lampu Hijau
 8003d46:	2102      	movs	r1, #2
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7fe fea3 	bl	8002a94 <command_lamp_HIL>

				if(SG_set[Running_Phase+1][i]!=mode_P1)
 8003d4e:	4b72      	ldr	r3, [pc, #456]	@ (8003f18 <Excute_Green_Time+0x584>)
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	4971      	ldr	r1, [pc, #452]	@ (8003f1c <Excute_Green_Time+0x588>)
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	18ca      	adds	r2, r1, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4413      	add	r3, r2
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b09      	cmp	r3, #9
 8003d68:	d005      	beq.n	8003d76 <Excute_Green_Time+0x3e2>
					elapsed_time_green[i]=elapsed_time_green[12];
 8003d6a:	4b6d      	ldr	r3, [pc, #436]	@ (8003f20 <Excute_Green_Time+0x58c>)
 8003d6c:	8b19      	ldrh	r1, [r3, #24]
 8003d6e:	4a6c      	ldr	r2, [pc, #432]	@ (8003f20 <Excute_Green_Time+0x58c>)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(SG_set[Running_Phase+1][i]==mode_P1)
 8003d76:	4b68      	ldr	r3, [pc, #416]	@ (8003f18 <Excute_Green_Time+0x584>)
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	4967      	ldr	r1, [pc, #412]	@ (8003f1c <Excute_Green_Time+0x588>)
 8003d7e:	4613      	mov	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	18ca      	adds	r2, r1, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b09      	cmp	r3, #9
 8003d90:	f040 80c0 	bne.w	8003f14 <Excute_Green_Time+0x580>
					elapsed_time_green[i]=elapsed_time_green[12]+PLAN[Selected_PLAN][Running_Phase].y+PLAN[Selected_PLAN][Running_Phase+1].g+PLAN[Selected_PLAN][Running_Phase].r;
 8003d94:	4b62      	ldr	r3, [pc, #392]	@ (8003f20 <Excute_Green_Time+0x58c>)
 8003d96:	8b19      	ldrh	r1, [r3, #24]
 8003d98:	4b62      	ldr	r3, [pc, #392]	@ (8003f24 <Excute_Green_Time+0x590>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	461c      	mov	r4, r3
 8003d9e:	4b5e      	ldr	r3, [pc, #376]	@ (8003f18 <Excute_Green_Time+0x584>)
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	4861      	ldr	r0, [pc, #388]	@ (8003f28 <Excute_Green_Time+0x594>)
 8003da4:	461a      	mov	r2, r3
 8003da6:	0052      	lsls	r2, r2, #1
 8003da8:	441a      	add	r2, r3
 8003daa:	0053      	lsls	r3, r2, #1
 8003dac:	461a      	mov	r2, r3
 8003dae:	4623      	mov	r3, r4
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4423      	add	r3, r4
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	4413      	add	r3, r2
 8003db8:	4403      	add	r3, r0
 8003dba:	3301      	adds	r3, #1
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	440b      	add	r3, r1
 8003dc0:	b299      	uxth	r1, r3
 8003dc2:	4b58      	ldr	r3, [pc, #352]	@ (8003f24 <Excute_Green_Time+0x590>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	461c      	mov	r4, r3
 8003dc8:	4b53      	ldr	r3, [pc, #332]	@ (8003f18 <Excute_Green_Time+0x584>)
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	4856      	ldr	r0, [pc, #344]	@ (8003f28 <Excute_Green_Time+0x594>)
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	0052      	lsls	r2, r2, #1
 8003dd4:	441a      	add	r2, r3
 8003dd6:	0053      	lsls	r3, r2, #1
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4623      	mov	r3, r4
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4423      	add	r3, r4
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	4413      	add	r3, r2
 8003de4:	4403      	add	r3, r0
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	440b      	add	r3, r1
 8003dea:	b299      	uxth	r1, r3
 8003dec:	4b4d      	ldr	r3, [pc, #308]	@ (8003f24 <Excute_Green_Time+0x590>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	461c      	mov	r4, r3
 8003df2:	4b49      	ldr	r3, [pc, #292]	@ (8003f18 <Excute_Green_Time+0x584>)
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	484c      	ldr	r0, [pc, #304]	@ (8003f28 <Excute_Green_Time+0x594>)
 8003df8:	461a      	mov	r2, r3
 8003dfa:	0052      	lsls	r2, r2, #1
 8003dfc:	441a      	add	r2, r3
 8003dfe:	0053      	lsls	r3, r2, #1
 8003e00:	461a      	mov	r2, r3
 8003e02:	4623      	mov	r3, r4
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	4423      	add	r3, r4
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	4413      	add	r3, r2
 8003e0c:	4403      	add	r3, r0
 8003e0e:	3302      	adds	r3, #2
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	440b      	add	r3, r1
 8003e14:	b299      	uxth	r1, r3
 8003e16:	4a42      	ldr	r2, [pc, #264]	@ (8003f20 <Excute_Green_Time+0x58c>)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				break;
 8003e1e:	e079      	b.n	8003f14 <Excute_Green_Time+0x580>
			case (mode_P2) :
				command_lamp_HIL(i, APILL_GREEN);		//Mengaktifkan Lampu Hijau
 8003e20:	2102      	movs	r1, #2
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fe fe36 	bl	8002a94 <command_lamp_HIL>

				if(SG_set[Running_Phase+1][i]!=mode_P2)
 8003e28:	4b3b      	ldr	r3, [pc, #236]	@ (8003f18 <Excute_Green_Time+0x584>)
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	493b      	ldr	r1, [pc, #236]	@ (8003f1c <Excute_Green_Time+0x588>)
 8003e30:	4613      	mov	r3, r2
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	18ca      	adds	r2, r1, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b0a      	cmp	r3, #10
 8003e42:	d005      	beq.n	8003e50 <Excute_Green_Time+0x4bc>
					elapsed_time_green[i]=elapsed_time_green[12];
 8003e44:	4b36      	ldr	r3, [pc, #216]	@ (8003f20 <Excute_Green_Time+0x58c>)
 8003e46:	8b19      	ldrh	r1, [r3, #24]
 8003e48:	4a35      	ldr	r2, [pc, #212]	@ (8003f20 <Excute_Green_Time+0x58c>)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(SG_set[Running_Phase+1][i]==mode_P2)
 8003e50:	4b31      	ldr	r3, [pc, #196]	@ (8003f18 <Excute_Green_Time+0x584>)
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	4931      	ldr	r1, [pc, #196]	@ (8003f1c <Excute_Green_Time+0x588>)
 8003e58:	4613      	mov	r3, r2
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	18ca      	adds	r2, r1, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b0a      	cmp	r3, #10
 8003e6a:	d15f      	bne.n	8003f2c <Excute_Green_Time+0x598>
					elapsed_time_green[i]=elapsed_time_green[12]+PLAN[Selected_PLAN][Running_Phase].y+PLAN[Selected_PLAN][Running_Phase+1].g+PLAN[Selected_PLAN][Running_Phase].r;
 8003e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003f20 <Excute_Green_Time+0x58c>)
 8003e6e:	8b19      	ldrh	r1, [r3, #24]
 8003e70:	4b2c      	ldr	r3, [pc, #176]	@ (8003f24 <Excute_Green_Time+0x590>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	461c      	mov	r4, r3
 8003e76:	4b28      	ldr	r3, [pc, #160]	@ (8003f18 <Excute_Green_Time+0x584>)
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	482b      	ldr	r0, [pc, #172]	@ (8003f28 <Excute_Green_Time+0x594>)
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	0052      	lsls	r2, r2, #1
 8003e80:	441a      	add	r2, r3
 8003e82:	0053      	lsls	r3, r2, #1
 8003e84:	461a      	mov	r2, r3
 8003e86:	4623      	mov	r3, r4
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	4423      	add	r3, r4
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	4413      	add	r3, r2
 8003e90:	4403      	add	r3, r0
 8003e92:	3301      	adds	r3, #1
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	440b      	add	r3, r1
 8003e98:	b299      	uxth	r1, r3
 8003e9a:	4b22      	ldr	r3, [pc, #136]	@ (8003f24 <Excute_Green_Time+0x590>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	461c      	mov	r4, r3
 8003ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f18 <Excute_Green_Time+0x584>)
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	4820      	ldr	r0, [pc, #128]	@ (8003f28 <Excute_Green_Time+0x594>)
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	0052      	lsls	r2, r2, #1
 8003eac:	441a      	add	r2, r3
 8003eae:	0053      	lsls	r3, r2, #1
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4623      	mov	r3, r4
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	4423      	add	r3, r4
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	4413      	add	r3, r2
 8003ebc:	4403      	add	r3, r0
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	440b      	add	r3, r1
 8003ec2:	b299      	uxth	r1, r3
 8003ec4:	4b17      	ldr	r3, [pc, #92]	@ (8003f24 <Excute_Green_Time+0x590>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	461c      	mov	r4, r3
 8003eca:	4b13      	ldr	r3, [pc, #76]	@ (8003f18 <Excute_Green_Time+0x584>)
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	4816      	ldr	r0, [pc, #88]	@ (8003f28 <Excute_Green_Time+0x594>)
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	0052      	lsls	r2, r2, #1
 8003ed4:	441a      	add	r2, r3
 8003ed6:	0053      	lsls	r3, r2, #1
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4623      	mov	r3, r4
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	4423      	add	r3, r4
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	4413      	add	r3, r2
 8003ee4:	4403      	add	r3, r0
 8003ee6:	3302      	adds	r3, #2
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	440b      	add	r3, r1
 8003eec:	b299      	uxth	r1, r3
 8003eee:	4a0c      	ldr	r2, [pc, #48]	@ (8003f20 <Excute_Green_Time+0x58c>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				break;
 8003ef6:	e019      	b.n	8003f2c <Excute_Green_Time+0x598>
			case (mode_F1) :
				command_lamp_HIL(i, APILL_FLASH_Y);
 8003ef8:	210b      	movs	r1, #11
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fe fdca 	bl	8002a94 <command_lamp_HIL>
				break;
 8003f00:	e015      	b.n	8003f2e <Excute_Green_Time+0x59a>
			case (mode_NonActive) :
				command_lamp_HIL(i, APILL_NONE);
 8003f02:	2104      	movs	r1, #4
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7fe fdc5 	bl	8002a94 <command_lamp_HIL>
				break;
 8003f0a:	e010      	b.n	8003f2e <Excute_Green_Time+0x59a>
				break;
 8003f0c:	bf00      	nop
 8003f0e:	e00e      	b.n	8003f2e <Excute_Green_Time+0x59a>
				break;
 8003f10:	bf00      	nop
 8003f12:	e00c      	b.n	8003f2e <Excute_Green_Time+0x59a>
				break;
 8003f14:	bf00      	nop
 8003f16:	e00a      	b.n	8003f2e <Excute_Green_Time+0x59a>
 8003f18:	2000eb00 	.word	0x2000eb00
 8003f1c:	2000ecec 	.word	0x2000ecec
 8003f20:	2000f470 	.word	0x2000f470
 8003f24:	2000f48a 	.word	0x2000f48a
 8003f28:	2000ee74 	.word	0x2000ee74
				break;
 8003f2c:	bf00      	nop
			}

			green_conflict_check();
 8003f2e:	f000 fc1b 	bl	8004768 <green_conflict_check>
		for(int i=0; i<12;i++)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3301      	adds	r3, #1
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b0b      	cmp	r3, #11
 8003f3c:	f77f ad61 	ble.w	8003a02 <Excute_Green_Time+0x6e>
		}
	}
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd90      	pop	{r4, r7, pc}

08003f48 <Excute_Yellow_Time>:

void Excute_Yellow_Time(void)
{
 8003f48:	b5b0      	push	{r4, r5, r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
	if(timerun_phs < PLAN[Selected_PLAN][Running_Phase].g+PLAN[Selected_PLAN][Running_Phase].y
 8003f4e:	4b87      	ldr	r3, [pc, #540]	@ (800416c <Excute_Yellow_Time+0x224>)
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	461c      	mov	r4, r3
 8003f54:	4b86      	ldr	r3, [pc, #536]	@ (8004170 <Excute_Yellow_Time+0x228>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	4b86      	ldr	r3, [pc, #536]	@ (8004174 <Excute_Yellow_Time+0x22c>)
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	4986      	ldr	r1, [pc, #536]	@ (8004178 <Excute_Yellow_Time+0x230>)
 8003f60:	461a      	mov	r2, r3
 8003f62:	0052      	lsls	r2, r2, #1
 8003f64:	441a      	add	r2, r3
 8003f66:	0053      	lsls	r3, r2, #1
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4403      	add	r3, r0
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	4413      	add	r3, r2
 8003f74:	440b      	add	r3, r1
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	461d      	mov	r5, r3
 8003f7a:	4b7d      	ldr	r3, [pc, #500]	@ (8004170 <Excute_Yellow_Time+0x228>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	4b7c      	ldr	r3, [pc, #496]	@ (8004174 <Excute_Yellow_Time+0x22c>)
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	497c      	ldr	r1, [pc, #496]	@ (8004178 <Excute_Yellow_Time+0x230>)
 8003f86:	461a      	mov	r2, r3
 8003f88:	0052      	lsls	r2, r2, #1
 8003f8a:	441a      	add	r2, r3
 8003f8c:	0053      	lsls	r3, r2, #1
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4603      	mov	r3, r0
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	4403      	add	r3, r0
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	4413      	add	r3, r2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	442b      	add	r3, r5
 8003fa2:	429c      	cmp	r4, r3
 8003fa4:	f280 8211 	bge.w	80043ca <Excute_Yellow_Time+0x482>
			&& timerun_phs >= PLAN[Selected_PLAN][Running_Phase].g)
 8003fa8:	4b71      	ldr	r3, [pc, #452]	@ (8004170 <Excute_Yellow_Time+0x228>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	4b71      	ldr	r3, [pc, #452]	@ (8004174 <Excute_Yellow_Time+0x22c>)
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	4971      	ldr	r1, [pc, #452]	@ (8004178 <Excute_Yellow_Time+0x230>)
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	0052      	lsls	r2, r2, #1
 8003fb8:	441a      	add	r2, r3
 8003fba:	0053      	lsls	r3, r2, #1
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	4403      	add	r3, r0
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	4413      	add	r3, r2
 8003fc8:	440b      	add	r3, r1
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4b67      	ldr	r3, [pc, #412]	@ (800416c <Excute_Yellow_Time+0x224>)
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	f200 81f9 	bhi.w	80043ca <Excute_Yellow_Time+0x482>
	{
		for(int i=0; i<12;i++)
 8003fd8:	2300      	movs	r3, #0
 8003fda:	607b      	str	r3, [r7, #4]
 8003fdc:	e1f1      	b.n	80043c2 <Excute_Yellow_Time+0x47a>
		{
			switch (SG_set[Running_Phase][i]){
 8003fde:	4b65      	ldr	r3, [pc, #404]	@ (8004174 <Excute_Yellow_Time+0x22c>)
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4a65      	ldr	r2, [pc, #404]	@ (800417c <Excute_Yellow_Time+0x234>)
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	440b      	add	r3, r1
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	441a      	add	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b0b      	cmp	r3, #11
 8003ff8:	f200 81e0 	bhi.w	80043bc <Excute_Yellow_Time+0x474>
 8003ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8004004 <Excute_Yellow_Time+0xbc>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	080043a9 	.word	0x080043a9
 8004008:	08004035 	.word	0x08004035
 800400c:	08004143 	.word	0x08004143
 8004010:	0800414d 	.word	0x0800414d
 8004014:	08004157 	.word	0x08004157
 8004018:	08004161 	.word	0x08004161
 800401c:	0800403f 	.word	0x0800403f
 8004020:	08004185 	.word	0x08004185
 8004024:	08004289 	.word	0x08004289
 8004028:	0800438b 	.word	0x0800438b
 800402c:	08004395 	.word	0x08004395
 8004030:	0800439f 	.word	0x0800439f
			case (mode_R1):
				command_lamp_HIL(i, APILL_RED);
 8004034:	2100      	movs	r1, #0
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fe fd2c 	bl	8002a94 <command_lamp_HIL>
				break;
 800403c:	e1be      	b.n	80043bc <Excute_Yellow_Time+0x474>
			case (mode_K1) :
				if(SG_set[Running_Phase+1][i]!=mode_K1)
 800403e:	4b4d      	ldr	r3, [pc, #308]	@ (8004174 <Excute_Yellow_Time+0x22c>)
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	494d      	ldr	r1, [pc, #308]	@ (800417c <Excute_Yellow_Time+0x234>)
 8004046:	4613      	mov	r3, r2
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	18ca      	adds	r2, r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4413      	add	r3, r2
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b06      	cmp	r3, #6
 8004058:	d008      	beq.n	800406c <Excute_Yellow_Time+0x124>
				{
					command_lamp_HIL(i, APILL_YELLOW);
 800405a:	2101      	movs	r1, #1
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7fe fd19 	bl	8002a94 <command_lamp_HIL>
					elapsed_time_green[i] = 0;
 8004062:	4a47      	ldr	r2, [pc, #284]	@ (8004180 <Excute_Yellow_Time+0x238>)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2100      	movs	r1, #0
 8004068:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}
				if(SG_set[Running_Phase+1][i]==mode_K1)
 800406c:	4b41      	ldr	r3, [pc, #260]	@ (8004174 <Excute_Yellow_Time+0x22c>)
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	4942      	ldr	r1, [pc, #264]	@ (800417c <Excute_Yellow_Time+0x234>)
 8004074:	4613      	mov	r3, r2
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	18ca      	adds	r2, r1, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4413      	add	r3, r2
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b06      	cmp	r3, #6
 8004086:	f040 8194 	bne.w	80043b2 <Excute_Yellow_Time+0x46a>
				elapsed_time_green[i]=PLAN[Selected_PLAN][Running_Phase].r+PLAN[Selected_PLAN][Running_Phase+1].g+PLAN[Selected_PLAN][Running_Phase].y-(timerun_phs-PLAN[Selected_PLAN][Running_Phase].g);
 800408a:	4b39      	ldr	r3, [pc, #228]	@ (8004170 <Excute_Yellow_Time+0x228>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	4b38      	ldr	r3, [pc, #224]	@ (8004174 <Excute_Yellow_Time+0x22c>)
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	4938      	ldr	r1, [pc, #224]	@ (8004178 <Excute_Yellow_Time+0x230>)
 8004096:	461a      	mov	r2, r3
 8004098:	0052      	lsls	r2, r2, #1
 800409a:	441a      	add	r2, r3
 800409c:	0053      	lsls	r3, r2, #1
 800409e:	461a      	mov	r2, r3
 80040a0:	4603      	mov	r3, r0
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4403      	add	r3, r0
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	4413      	add	r3, r2
 80040aa:	440b      	add	r3, r1
 80040ac:	3302      	adds	r3, #2
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	461c      	mov	r4, r3
 80040b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004170 <Excute_Yellow_Time+0x228>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004174 <Excute_Yellow_Time+0x22c>)
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	3301      	adds	r3, #1
 80040be:	492e      	ldr	r1, [pc, #184]	@ (8004178 <Excute_Yellow_Time+0x230>)
 80040c0:	461a      	mov	r2, r3
 80040c2:	0052      	lsls	r2, r2, #1
 80040c4:	441a      	add	r2, r3
 80040c6:	0053      	lsls	r3, r2, #1
 80040c8:	461a      	mov	r2, r3
 80040ca:	4603      	mov	r3, r0
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	4403      	add	r3, r0
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	4413      	add	r3, r2
 80040d4:	440b      	add	r3, r1
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	4423      	add	r3, r4
 80040da:	b299      	uxth	r1, r3
 80040dc:	4b24      	ldr	r3, [pc, #144]	@ (8004170 <Excute_Yellow_Time+0x228>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	461c      	mov	r4, r3
 80040e2:	4b24      	ldr	r3, [pc, #144]	@ (8004174 <Excute_Yellow_Time+0x22c>)
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	4824      	ldr	r0, [pc, #144]	@ (8004178 <Excute_Yellow_Time+0x230>)
 80040e8:	461a      	mov	r2, r3
 80040ea:	0052      	lsls	r2, r2, #1
 80040ec:	441a      	add	r2, r3
 80040ee:	0053      	lsls	r3, r2, #1
 80040f0:	461a      	mov	r2, r3
 80040f2:	4623      	mov	r3, r4
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	4423      	add	r3, r4
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	4413      	add	r3, r2
 80040fc:	4403      	add	r3, r0
 80040fe:	3301      	adds	r3, #1
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	440b      	add	r3, r1
 8004104:	b299      	uxth	r1, r3
 8004106:	4b1a      	ldr	r3, [pc, #104]	@ (8004170 <Excute_Yellow_Time+0x228>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	461c      	mov	r4, r3
 800410c:	4b19      	ldr	r3, [pc, #100]	@ (8004174 <Excute_Yellow_Time+0x22c>)
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	4819      	ldr	r0, [pc, #100]	@ (8004178 <Excute_Yellow_Time+0x230>)
 8004112:	461a      	mov	r2, r3
 8004114:	0052      	lsls	r2, r2, #1
 8004116:	441a      	add	r2, r3
 8004118:	0053      	lsls	r3, r2, #1
 800411a:	461a      	mov	r2, r3
 800411c:	4623      	mov	r3, r4
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	4423      	add	r3, r4
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	4413      	add	r3, r2
 8004126:	4403      	add	r3, r0
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	4b0f      	ldr	r3, [pc, #60]	@ (800416c <Excute_Yellow_Time+0x224>)
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	b29b      	uxth	r3, r3
 8004134:	440b      	add	r3, r1
 8004136:	b299      	uxth	r1, r3
 8004138:	4a11      	ldr	r2, [pc, #68]	@ (8004180 <Excute_Yellow_Time+0x238>)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				break;
 8004140:	e137      	b.n	80043b2 <Excute_Yellow_Time+0x46a>
			case (mode_R2) :
				command_lamp_HIL(i, APILL_RED);
 8004142:	2100      	movs	r1, #0
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7fe fca5 	bl	8002a94 <command_lamp_HIL>
				break;
 800414a:	e137      	b.n	80043bc <Excute_Yellow_Time+0x474>
			case (mode_R3) :
				command_lamp_HIL(i, APILL_RED);
 800414c:	2100      	movs	r1, #0
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fe fca0 	bl	8002a94 <command_lamp_HIL>
				break;
 8004154:	e132      	b.n	80043bc <Excute_Yellow_Time+0x474>
			case (mode_R4) :
				command_lamp_HIL(i, APILL_RED);
 8004156:	2100      	movs	r1, #0
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7fe fc9b 	bl	8002a94 <command_lamp_HIL>
				break;
 800415e:	e12d      	b.n	80043bc <Excute_Yellow_Time+0x474>
			case (mode_RP) :
				command_lamp_HIL(i, APILL_RED);
 8004160:	2100      	movs	r1, #0
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fe fc96 	bl	8002a94 <command_lamp_HIL>
				break;
 8004168:	e128      	b.n	80043bc <Excute_Yellow_Time+0x474>
 800416a:	bf00      	nop
 800416c:	2000eb02 	.word	0x2000eb02
 8004170:	2000f48a 	.word	0x2000f48a
 8004174:	2000eb00 	.word	0x2000eb00
 8004178:	2000ee74 	.word	0x2000ee74
 800417c:	2000ecec 	.word	0x2000ecec
 8004180:	2000f470 	.word	0x2000f470
			case (mode_K2) :
				if(SG_set[Running_Phase+1][i]!=mode_K2)
 8004184:	4b93      	ldr	r3, [pc, #588]	@ (80043d4 <Excute_Yellow_Time+0x48c>)
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	4993      	ldr	r1, [pc, #588]	@ (80043d8 <Excute_Yellow_Time+0x490>)
 800418c:	4613      	mov	r3, r2
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	18ca      	adds	r2, r1, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4413      	add	r3, r2
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b07      	cmp	r3, #7
 800419e:	d008      	beq.n	80041b2 <Excute_Yellow_Time+0x26a>
				{
					command_lamp_HIL(i, APILL_FLASH_Y);
 80041a0:	210b      	movs	r1, #11
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fe fc76 	bl	8002a94 <command_lamp_HIL>
					elapsed_time_green[i] = 0;
 80041a8:	4a8c      	ldr	r2, [pc, #560]	@ (80043dc <Excute_Yellow_Time+0x494>)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2100      	movs	r1, #0
 80041ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}
				if(SG_set[Running_Phase+1][i]==mode_K2)
 80041b2:	4b88      	ldr	r3, [pc, #544]	@ (80043d4 <Excute_Yellow_Time+0x48c>)
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	4987      	ldr	r1, [pc, #540]	@ (80043d8 <Excute_Yellow_Time+0x490>)
 80041ba:	4613      	mov	r3, r2
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	18ca      	adds	r2, r1, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4413      	add	r3, r2
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b07      	cmp	r3, #7
 80041cc:	f040 80f3 	bne.w	80043b6 <Excute_Yellow_Time+0x46e>
				elapsed_time_green[i]=PLAN[Selected_PLAN][Running_Phase].r+PLAN[Selected_PLAN][Running_Phase+1].g+PLAN[Selected_PLAN][Running_Phase].y-(timerun_phs-PLAN[Selected_PLAN][Running_Phase].g);
 80041d0:	4b83      	ldr	r3, [pc, #524]	@ (80043e0 <Excute_Yellow_Time+0x498>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	4b7f      	ldr	r3, [pc, #508]	@ (80043d4 <Excute_Yellow_Time+0x48c>)
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	4982      	ldr	r1, [pc, #520]	@ (80043e4 <Excute_Yellow_Time+0x49c>)
 80041dc:	461a      	mov	r2, r3
 80041de:	0052      	lsls	r2, r2, #1
 80041e0:	441a      	add	r2, r3
 80041e2:	0053      	lsls	r3, r2, #1
 80041e4:	461a      	mov	r2, r3
 80041e6:	4603      	mov	r3, r0
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	4403      	add	r3, r0
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	4413      	add	r3, r2
 80041f0:	440b      	add	r3, r1
 80041f2:	3302      	adds	r3, #2
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	461c      	mov	r4, r3
 80041f8:	4b79      	ldr	r3, [pc, #484]	@ (80043e0 <Excute_Yellow_Time+0x498>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	4b75      	ldr	r3, [pc, #468]	@ (80043d4 <Excute_Yellow_Time+0x48c>)
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	3301      	adds	r3, #1
 8004204:	4977      	ldr	r1, [pc, #476]	@ (80043e4 <Excute_Yellow_Time+0x49c>)
 8004206:	461a      	mov	r2, r3
 8004208:	0052      	lsls	r2, r2, #1
 800420a:	441a      	add	r2, r3
 800420c:	0053      	lsls	r3, r2, #1
 800420e:	461a      	mov	r2, r3
 8004210:	4603      	mov	r3, r0
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	4403      	add	r3, r0
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	4413      	add	r3, r2
 800421a:	440b      	add	r3, r1
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	4423      	add	r3, r4
 8004220:	b299      	uxth	r1, r3
 8004222:	4b6f      	ldr	r3, [pc, #444]	@ (80043e0 <Excute_Yellow_Time+0x498>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	461c      	mov	r4, r3
 8004228:	4b6a      	ldr	r3, [pc, #424]	@ (80043d4 <Excute_Yellow_Time+0x48c>)
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	486d      	ldr	r0, [pc, #436]	@ (80043e4 <Excute_Yellow_Time+0x49c>)
 800422e:	461a      	mov	r2, r3
 8004230:	0052      	lsls	r2, r2, #1
 8004232:	441a      	add	r2, r3
 8004234:	0053      	lsls	r3, r2, #1
 8004236:	461a      	mov	r2, r3
 8004238:	4623      	mov	r3, r4
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	4423      	add	r3, r4
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	4413      	add	r3, r2
 8004242:	4403      	add	r3, r0
 8004244:	3301      	adds	r3, #1
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	440b      	add	r3, r1
 800424a:	b299      	uxth	r1, r3
 800424c:	4b64      	ldr	r3, [pc, #400]	@ (80043e0 <Excute_Yellow_Time+0x498>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	461c      	mov	r4, r3
 8004252:	4b60      	ldr	r3, [pc, #384]	@ (80043d4 <Excute_Yellow_Time+0x48c>)
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	4863      	ldr	r0, [pc, #396]	@ (80043e4 <Excute_Yellow_Time+0x49c>)
 8004258:	461a      	mov	r2, r3
 800425a:	0052      	lsls	r2, r2, #1
 800425c:	441a      	add	r2, r3
 800425e:	0053      	lsls	r3, r2, #1
 8004260:	461a      	mov	r2, r3
 8004262:	4623      	mov	r3, r4
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	4423      	add	r3, r4
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	4413      	add	r3, r2
 800426c:	4403      	add	r3, r0
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	4b5d      	ldr	r3, [pc, #372]	@ (80043e8 <Excute_Yellow_Time+0x4a0>)
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	b29b      	uxth	r3, r3
 800427a:	440b      	add	r3, r1
 800427c:	b299      	uxth	r1, r3
 800427e:	4a57      	ldr	r2, [pc, #348]	@ (80043dc <Excute_Yellow_Time+0x494>)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				break;
 8004286:	e096      	b.n	80043b6 <Excute_Yellow_Time+0x46e>
			case (mode_K3) :
				if(SG_set[Running_Phase+1][i]!=mode_K3)
 8004288:	4b52      	ldr	r3, [pc, #328]	@ (80043d4 <Excute_Yellow_Time+0x48c>)
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	4952      	ldr	r1, [pc, #328]	@ (80043d8 <Excute_Yellow_Time+0x490>)
 8004290:	4613      	mov	r3, r2
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	18ca      	adds	r2, r1, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4413      	add	r3, r2
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d008      	beq.n	80042b6 <Excute_Yellow_Time+0x36e>
				{
					command_lamp_HIL(i, APILL_YELLOW);
 80042a4:	2101      	movs	r1, #1
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fe fbf4 	bl	8002a94 <command_lamp_HIL>
					elapsed_time_green[i] = 0;
 80042ac:	4a4b      	ldr	r2, [pc, #300]	@ (80043dc <Excute_Yellow_Time+0x494>)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2100      	movs	r1, #0
 80042b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}
				if(SG_set[Running_Phase+1][i]==mode_K3)
 80042b6:	4b47      	ldr	r3, [pc, #284]	@ (80043d4 <Excute_Yellow_Time+0x48c>)
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	4946      	ldr	r1, [pc, #280]	@ (80043d8 <Excute_Yellow_Time+0x490>)
 80042be:	4613      	mov	r3, r2
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	4413      	add	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	18ca      	adds	r2, r1, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4413      	add	r3, r2
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d173      	bne.n	80043ba <Excute_Yellow_Time+0x472>
				elapsed_time_green[i]=PLAN[Selected_PLAN][Running_Phase].r+PLAN[Selected_PLAN][Running_Phase+1].g+PLAN[Selected_PLAN][Running_Phase].y-(timerun_phs-PLAN[Selected_PLAN][Running_Phase].g);
 80042d2:	4b43      	ldr	r3, [pc, #268]	@ (80043e0 <Excute_Yellow_Time+0x498>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	4b3e      	ldr	r3, [pc, #248]	@ (80043d4 <Excute_Yellow_Time+0x48c>)
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	4941      	ldr	r1, [pc, #260]	@ (80043e4 <Excute_Yellow_Time+0x49c>)
 80042de:	461a      	mov	r2, r3
 80042e0:	0052      	lsls	r2, r2, #1
 80042e2:	441a      	add	r2, r3
 80042e4:	0053      	lsls	r3, r2, #1
 80042e6:	461a      	mov	r2, r3
 80042e8:	4603      	mov	r3, r0
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	4403      	add	r3, r0
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	4413      	add	r3, r2
 80042f2:	440b      	add	r3, r1
 80042f4:	3302      	adds	r3, #2
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	461c      	mov	r4, r3
 80042fa:	4b39      	ldr	r3, [pc, #228]	@ (80043e0 <Excute_Yellow_Time+0x498>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	4b34      	ldr	r3, [pc, #208]	@ (80043d4 <Excute_Yellow_Time+0x48c>)
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	3301      	adds	r3, #1
 8004306:	4937      	ldr	r1, [pc, #220]	@ (80043e4 <Excute_Yellow_Time+0x49c>)
 8004308:	461a      	mov	r2, r3
 800430a:	0052      	lsls	r2, r2, #1
 800430c:	441a      	add	r2, r3
 800430e:	0053      	lsls	r3, r2, #1
 8004310:	461a      	mov	r2, r3
 8004312:	4603      	mov	r3, r0
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	4403      	add	r3, r0
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	4413      	add	r3, r2
 800431c:	440b      	add	r3, r1
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	4423      	add	r3, r4
 8004322:	b299      	uxth	r1, r3
 8004324:	4b2e      	ldr	r3, [pc, #184]	@ (80043e0 <Excute_Yellow_Time+0x498>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	461c      	mov	r4, r3
 800432a:	4b2a      	ldr	r3, [pc, #168]	@ (80043d4 <Excute_Yellow_Time+0x48c>)
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	482d      	ldr	r0, [pc, #180]	@ (80043e4 <Excute_Yellow_Time+0x49c>)
 8004330:	461a      	mov	r2, r3
 8004332:	0052      	lsls	r2, r2, #1
 8004334:	441a      	add	r2, r3
 8004336:	0053      	lsls	r3, r2, #1
 8004338:	461a      	mov	r2, r3
 800433a:	4623      	mov	r3, r4
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	4423      	add	r3, r4
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	4413      	add	r3, r2
 8004344:	4403      	add	r3, r0
 8004346:	3301      	adds	r3, #1
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	440b      	add	r3, r1
 800434c:	b299      	uxth	r1, r3
 800434e:	4b24      	ldr	r3, [pc, #144]	@ (80043e0 <Excute_Yellow_Time+0x498>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	461c      	mov	r4, r3
 8004354:	4b1f      	ldr	r3, [pc, #124]	@ (80043d4 <Excute_Yellow_Time+0x48c>)
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	4822      	ldr	r0, [pc, #136]	@ (80043e4 <Excute_Yellow_Time+0x49c>)
 800435a:	461a      	mov	r2, r3
 800435c:	0052      	lsls	r2, r2, #1
 800435e:	441a      	add	r2, r3
 8004360:	0053      	lsls	r3, r2, #1
 8004362:	461a      	mov	r2, r3
 8004364:	4623      	mov	r3, r4
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	4423      	add	r3, r4
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	4413      	add	r3, r2
 800436e:	4403      	add	r3, r0
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	4b1c      	ldr	r3, [pc, #112]	@ (80043e8 <Excute_Yellow_Time+0x4a0>)
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	b29b      	uxth	r3, r3
 800437c:	440b      	add	r3, r1
 800437e:	b299      	uxth	r1, r3
 8004380:	4a16      	ldr	r2, [pc, #88]	@ (80043dc <Excute_Yellow_Time+0x494>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				break;
 8004388:	e017      	b.n	80043ba <Excute_Yellow_Time+0x472>
			case (mode_P1) :
				command_lamp_HIL(i, APILL_GREEN);
 800438a:	2102      	movs	r1, #2
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7fe fb81 	bl	8002a94 <command_lamp_HIL>
				break;
 8004392:	e013      	b.n	80043bc <Excute_Yellow_Time+0x474>
			case (mode_P2) :
				command_lamp_HIL(i, APILL_FLASH_G);
 8004394:	210c      	movs	r1, #12
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fe fb7c 	bl	8002a94 <command_lamp_HIL>
				break;
 800439c:	e00e      	b.n	80043bc <Excute_Yellow_Time+0x474>
			case (mode_F1) :
				command_lamp_HIL(i, APILL_FLASH_Y);
 800439e:	210b      	movs	r1, #11
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7fe fb77 	bl	8002a94 <command_lamp_HIL>
				break;
 80043a6:	e009      	b.n	80043bc <Excute_Yellow_Time+0x474>
			case (mode_NonActive) :
				command_lamp_HIL(i, APILL_NONE);
 80043a8:	2104      	movs	r1, #4
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fe fb72 	bl	8002a94 <command_lamp_HIL>
				break;
 80043b0:	e004      	b.n	80043bc <Excute_Yellow_Time+0x474>
				break;
 80043b2:	bf00      	nop
 80043b4:	e002      	b.n	80043bc <Excute_Yellow_Time+0x474>
				break;
 80043b6:	bf00      	nop
 80043b8:	e000      	b.n	80043bc <Excute_Yellow_Time+0x474>
				break;
 80043ba:	bf00      	nop
		for(int i=0; i<12;i++)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3301      	adds	r3, #1
 80043c0:	607b      	str	r3, [r7, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b0b      	cmp	r3, #11
 80043c6:	f77f ae0a 	ble.w	8003fde <Excute_Yellow_Time+0x96>
			}

		}
	}
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bdb0      	pop	{r4, r5, r7, pc}
 80043d2:	bf00      	nop
 80043d4:	2000eb00 	.word	0x2000eb00
 80043d8:	2000ecec 	.word	0x2000ecec
 80043dc:	2000f470 	.word	0x2000f470
 80043e0:	2000f48a 	.word	0x2000f48a
 80043e4:	2000ee74 	.word	0x2000ee74
 80043e8:	2000eb02 	.word	0x2000eb02

080043ec <Check_Phase_Time>:

void Check_Phase_Time(void)
{
 80043ec:	b4b0      	push	{r4, r5, r7}
 80043ee:	af00      	add	r7, sp, #0
	if(timerun_phs >= PLAN[Selected_PLAN][Running_Phase].r+PLAN[Selected_PLAN][Running_Phase].g+PLAN[Selected_PLAN][Running_Phase].y)
 80043f0:	4b26      	ldr	r3, [pc, #152]	@ (800448c <Check_Phase_Time+0xa0>)
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	461d      	mov	r5, r3
 80043f6:	4b26      	ldr	r3, [pc, #152]	@ (8004490 <Check_Phase_Time+0xa4>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	4b25      	ldr	r3, [pc, #148]	@ (8004494 <Check_Phase_Time+0xa8>)
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	4925      	ldr	r1, [pc, #148]	@ (8004498 <Check_Phase_Time+0xac>)
 8004402:	461a      	mov	r2, r3
 8004404:	0052      	lsls	r2, r2, #1
 8004406:	441a      	add	r2, r3
 8004408:	0053      	lsls	r3, r2, #1
 800440a:	461a      	mov	r2, r3
 800440c:	4603      	mov	r3, r0
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	4403      	add	r3, r0
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	4413      	add	r3, r2
 8004416:	440b      	add	r3, r1
 8004418:	3302      	adds	r3, #2
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	461c      	mov	r4, r3
 800441e:	4b1c      	ldr	r3, [pc, #112]	@ (8004490 <Check_Phase_Time+0xa4>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	4b1b      	ldr	r3, [pc, #108]	@ (8004494 <Check_Phase_Time+0xa8>)
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	491b      	ldr	r1, [pc, #108]	@ (8004498 <Check_Phase_Time+0xac>)
 800442a:	461a      	mov	r2, r3
 800442c:	0052      	lsls	r2, r2, #1
 800442e:	441a      	add	r2, r3
 8004430:	0053      	lsls	r3, r2, #1
 8004432:	461a      	mov	r2, r3
 8004434:	4603      	mov	r3, r0
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	4403      	add	r3, r0
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	4413      	add	r3, r2
 800443e:	440b      	add	r3, r1
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	18e1      	adds	r1, r4, r3
 8004444:	4b12      	ldr	r3, [pc, #72]	@ (8004490 <Check_Phase_Time+0xa4>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	461c      	mov	r4, r3
 800444a:	4b12      	ldr	r3, [pc, #72]	@ (8004494 <Check_Phase_Time+0xa8>)
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	4812      	ldr	r0, [pc, #72]	@ (8004498 <Check_Phase_Time+0xac>)
 8004450:	461a      	mov	r2, r3
 8004452:	0052      	lsls	r2, r2, #1
 8004454:	441a      	add	r2, r3
 8004456:	0053      	lsls	r3, r2, #1
 8004458:	461a      	mov	r2, r3
 800445a:	4623      	mov	r3, r4
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	4423      	add	r3, r4
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	4413      	add	r3, r2
 8004464:	4403      	add	r3, r0
 8004466:	3301      	adds	r3, #1
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	440b      	add	r3, r1
 800446c:	429d      	cmp	r5, r3
 800446e:	db08      	blt.n	8004482 <Check_Phase_Time+0x96>
	{
		Running_Phase+=1;
 8004470:	4b08      	ldr	r3, [pc, #32]	@ (8004494 <Check_Phase_Time+0xa8>)
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	3301      	adds	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	4b06      	ldr	r3, [pc, #24]	@ (8004494 <Check_Phase_Time+0xa8>)
 800447a:	801a      	strh	r2, [r3, #0]
		timerun_phs=0;
 800447c:	4b03      	ldr	r3, [pc, #12]	@ (800448c <Check_Phase_Time+0xa0>)
 800447e:	2200      	movs	r2, #0
 8004480:	801a      	strh	r2, [r3, #0]
	}
}
 8004482:	bf00      	nop
 8004484:	46bd      	mov	sp, r7
 8004486:	bcb0      	pop	{r4, r5, r7}
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	2000eb02 	.word	0x2000eb02
 8004490:	2000f48a 	.word	0x2000f48a
 8004494:	2000eb00 	.word	0x2000eb00
 8004498:	2000ee74 	.word	0x2000ee74

0800449c <Reset_cycle_cond>:

void Reset_cycle_cond(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
	Running_Phase=0;
 80044a0:	4b06      	ldr	r3, [pc, #24]	@ (80044bc <Reset_cycle_cond+0x20>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	801a      	strh	r2, [r3, #0]
	timerun_phs=0;
 80044a6:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <Reset_cycle_cond+0x24>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	801a      	strh	r2, [r3, #0]
	timerun_cyc=0;
 80044ac:	4b05      	ldr	r3, [pc, #20]	@ (80044c4 <Reset_cycle_cond+0x28>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	801a      	strh	r2, [r3, #0]
//	{
//		update_setting_from_extVar();
//		setting_changed=0;
//	}

	Selected_PLAN_Checking();
 80044b2:	f000 f809 	bl	80044c8 <Selected_PLAN_Checking>
}
 80044b6:	bf00      	nop
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	2000eb00 	.word	0x2000eb00
 80044c0:	2000eb02 	.word	0x2000eb02
 80044c4:	2000eb04 	.word	0x2000eb04

080044c8 <Selected_PLAN_Checking>:
uint8_t last_sch=0;

uint32_t offset_insec, offset_informat;

void Selected_PLAN_Checking(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
	for(int p=0; p<=7; p++)
 80044ce:	2300      	movs	r3, #0
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	e127      	b.n	8004724 <Selected_PLAN_Checking+0x25c>
	{
		offset_insec = PLAN_Cycle[ SCHE[sDate.WeekDay-1][p].plan-1];
 80044d4:	4b99      	ldr	r3, [pc, #612]	@ (800473c <Selected_PLAN_Checking+0x274>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	1e5a      	subs	r2, r3, #1
 80044da:	4999      	ldr	r1, [pc, #612]	@ (8004740 <Selected_PLAN_Checking+0x278>)
 80044dc:	4613      	mov	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	4413      	add	r3, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	78db      	ldrb	r3, [r3, #3]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	4a95      	ldr	r2, [pc, #596]	@ (8004744 <Selected_PLAN_Checking+0x27c>)
 80044f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044f4:	461a      	mov	r2, r3
 80044f6:	4b94      	ldr	r3, [pc, #592]	@ (8004748 <Selected_PLAN_Checking+0x280>)
 80044f8:	601a      	str	r2, [r3, #0]
		offset_informat = (((int)(offset_insec/60))*100) + (offset_insec%60);
 80044fa:	4b93      	ldr	r3, [pc, #588]	@ (8004748 <Selected_PLAN_Checking+0x280>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a93      	ldr	r2, [pc, #588]	@ (800474c <Selected_PLAN_Checking+0x284>)
 8004500:	fba2 2303 	umull	r2, r3, r2, r3
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	461a      	mov	r2, r3
 8004508:	2364      	movs	r3, #100	@ 0x64
 800450a:	fb02 f303 	mul.w	r3, r2, r3
 800450e:	4618      	mov	r0, r3
 8004510:	4b8d      	ldr	r3, [pc, #564]	@ (8004748 <Selected_PLAN_Checking+0x280>)
 8004512:	6819      	ldr	r1, [r3, #0]
 8004514:	4b8d      	ldr	r3, [pc, #564]	@ (800474c <Selected_PLAN_Checking+0x284>)
 8004516:	fba3 2301 	umull	r2, r3, r3, r1
 800451a:	095a      	lsrs	r2, r3, #5
 800451c:	4613      	mov	r3, r2
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	1aca      	subs	r2, r1, r3
 8004526:	1883      	adds	r3, r0, r2
 8004528:	4a89      	ldr	r2, [pc, #548]	@ (8004750 <Selected_PLAN_Checking+0x288>)
 800452a:	6013      	str	r3, [r2, #0]

		schp = SCHE[sDate.WeekDay-1][p].jam*10000+(SCHE[sDate.WeekDay-1][p].menit)*100 + (SCHE[sDate.WeekDay-1][p].detik) + offset_informat;
 800452c:	4b83      	ldr	r3, [pc, #524]	@ (800473c <Selected_PLAN_Checking+0x274>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	1e5a      	subs	r2, r3, #1
 8004532:	4983      	ldr	r1, [pc, #524]	@ (8004740 <Selected_PLAN_Checking+0x278>)
 8004534:	4613      	mov	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	4413      	add	r3, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	4413      	add	r3, r2
 800453e:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 8004542:	461a      	mov	r2, r3
 8004544:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004548:	fb03 f102 	mul.w	r1, r3, r2
 800454c:	4b7b      	ldr	r3, [pc, #492]	@ (800473c <Selected_PLAN_Checking+0x274>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	1e5a      	subs	r2, r3, #1
 8004552:	487b      	ldr	r0, [pc, #492]	@ (8004740 <Selected_PLAN_Checking+0x278>)
 8004554:	4613      	mov	r3, r2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	4413      	add	r3, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4403      	add	r3, r0
 8004562:	785b      	ldrb	r3, [r3, #1]
 8004564:	461a      	mov	r2, r3
 8004566:	2364      	movs	r3, #100	@ 0x64
 8004568:	fb02 f303 	mul.w	r3, r2, r3
 800456c:	4419      	add	r1, r3
 800456e:	4b73      	ldr	r3, [pc, #460]	@ (800473c <Selected_PLAN_Checking+0x274>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	1e5a      	subs	r2, r3, #1
 8004574:	4872      	ldr	r0, [pc, #456]	@ (8004740 <Selected_PLAN_Checking+0x278>)
 8004576:	4613      	mov	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4413      	add	r3, r2
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	4413      	add	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4403      	add	r3, r0
 8004584:	789b      	ldrb	r3, [r3, #2]
 8004586:	440b      	add	r3, r1
 8004588:	461a      	mov	r2, r3
 800458a:	4b71      	ldr	r3, [pc, #452]	@ (8004750 <Selected_PLAN_Checking+0x288>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4413      	add	r3, r2
 8004590:	4a70      	ldr	r2, [pc, #448]	@ (8004754 <Selected_PLAN_Checking+0x28c>)
 8004592:	6013      	str	r3, [r2, #0]
		timep = Run_Time.Hours*10000+Run_Time.Minutes*100+Run_Time.Seconds;
 8004594:	4b70      	ldr	r3, [pc, #448]	@ (8004758 <Selected_PLAN_Checking+0x290>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800459e:	fb03 f202 	mul.w	r2, r3, r2
 80045a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004758 <Selected_PLAN_Checking+0x290>)
 80045a4:	785b      	ldrb	r3, [r3, #1]
 80045a6:	4619      	mov	r1, r3
 80045a8:	2364      	movs	r3, #100	@ 0x64
 80045aa:	fb01 f303 	mul.w	r3, r1, r3
 80045ae:	4413      	add	r3, r2
 80045b0:	4a69      	ldr	r2, [pc, #420]	@ (8004758 <Selected_PLAN_Checking+0x290>)
 80045b2:	7892      	ldrb	r2, [r2, #2]
 80045b4:	4413      	add	r3, r2
 80045b6:	461a      	mov	r2, r3
 80045b8:	4b68      	ldr	r3, [pc, #416]	@ (800475c <Selected_PLAN_Checking+0x294>)
 80045ba:	601a      	str	r2, [r3, #0]

		if(p==0 && timep<schp)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f040 8093 	bne.w	80046ea <Selected_PLAN_Checking+0x222>
 80045c4:	4b65      	ldr	r3, [pc, #404]	@ (800475c <Selected_PLAN_Checking+0x294>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	4b62      	ldr	r3, [pc, #392]	@ (8004754 <Selected_PLAN_Checking+0x28c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	f080 808c 	bcs.w	80046ea <Selected_PLAN_Checking+0x222>
		{
			// Mendeteksi plan terakhir di hari sebelumnya untuk dijadwalkan sebelum jam pertama dihari berjalan.
			for(int r=1;r<=8; r++)
 80045d2:	2301      	movs	r3, #1
 80045d4:	603b      	str	r3, [r7, #0]
 80045d6:	e062      	b.n	800469e <Selected_PLAN_Checking+0x1d6>
			{
				if(sDate.WeekDay==1) schp = SCHE[7][p].jam*10000+(SCHE[7][p].menit)*100 + (SCHE[7][p].detik);
 80045d8:	4b58      	ldr	r3, [pc, #352]	@ (800473c <Selected_PLAN_Checking+0x274>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d11f      	bne.n	8004620 <Selected_PLAN_Checking+0x158>
 80045e0:	4a57      	ldr	r2, [pc, #348]	@ (8004740 <Selected_PLAN_Checking+0x278>)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	333f      	adds	r3, #63	@ 0x3f
 80045e6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80045ea:	461a      	mov	r2, r3
 80045ec:	f242 7310 	movw	r3, #10000	@ 0x2710
 80045f0:	fb03 f202 	mul.w	r2, r3, r2
 80045f4:	4952      	ldr	r1, [pc, #328]	@ (8004740 <Selected_PLAN_Checking+0x278>)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	333f      	adds	r3, #63	@ 0x3f
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	785b      	ldrb	r3, [r3, #1]
 8004600:	4619      	mov	r1, r3
 8004602:	2364      	movs	r3, #100	@ 0x64
 8004604:	fb01 f303 	mul.w	r3, r1, r3
 8004608:	441a      	add	r2, r3
 800460a:	494d      	ldr	r1, [pc, #308]	@ (8004740 <Selected_PLAN_Checking+0x278>)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	333f      	adds	r3, #63	@ 0x3f
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	789b      	ldrb	r3, [r3, #2]
 8004616:	4413      	add	r3, r2
 8004618:	461a      	mov	r2, r3
 800461a:	4b4e      	ldr	r3, [pc, #312]	@ (8004754 <Selected_PLAN_Checking+0x28c>)
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	e030      	b.n	8004682 <Selected_PLAN_Checking+0x1ba>
				else schp = SCHE[sDate.WeekDay-2][p].jam*10000+(SCHE[sDate.WeekDay-2][p].menit)*100 + (SCHE[sDate.WeekDay-2][p].detik);
 8004620:	4b46      	ldr	r3, [pc, #280]	@ (800473c <Selected_PLAN_Checking+0x274>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	1e9a      	subs	r2, r3, #2
 8004626:	4946      	ldr	r1, [pc, #280]	@ (8004740 <Selected_PLAN_Checking+0x278>)
 8004628:	4613      	mov	r3, r2
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	4413      	add	r3, r2
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	4413      	add	r3, r2
 8004632:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 8004636:	461a      	mov	r2, r3
 8004638:	f242 7310 	movw	r3, #10000	@ 0x2710
 800463c:	fb03 f102 	mul.w	r1, r3, r2
 8004640:	4b3e      	ldr	r3, [pc, #248]	@ (800473c <Selected_PLAN_Checking+0x274>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	1e9a      	subs	r2, r3, #2
 8004646:	483e      	ldr	r0, [pc, #248]	@ (8004740 <Selected_PLAN_Checking+0x278>)
 8004648:	4613      	mov	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	4413      	add	r3, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4403      	add	r3, r0
 8004656:	785b      	ldrb	r3, [r3, #1]
 8004658:	461a      	mov	r2, r3
 800465a:	2364      	movs	r3, #100	@ 0x64
 800465c:	fb02 f303 	mul.w	r3, r2, r3
 8004660:	4419      	add	r1, r3
 8004662:	4b36      	ldr	r3, [pc, #216]	@ (800473c <Selected_PLAN_Checking+0x274>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	1e9a      	subs	r2, r3, #2
 8004668:	4835      	ldr	r0, [pc, #212]	@ (8004740 <Selected_PLAN_Checking+0x278>)
 800466a:	4613      	mov	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	4413      	add	r3, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4413      	add	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4403      	add	r3, r0
 8004678:	789b      	ldrb	r3, [r3, #2]
 800467a:	440b      	add	r3, r1
 800467c:	461a      	mov	r2, r3
 800467e:	4b35      	ldr	r3, [pc, #212]	@ (8004754 <Selected_PLAN_Checking+0x28c>)
 8004680:	601a      	str	r2, [r3, #0]

				if(schp==0)
 8004682:	4b34      	ldr	r3, [pc, #208]	@ (8004754 <Selected_PLAN_Checking+0x28c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <Selected_PLAN_Checking+0x1d0>
				{
					last_sch=r-1;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b2da      	uxtb	r2, r3
 8004692:	4b33      	ldr	r3, [pc, #204]	@ (8004760 <Selected_PLAN_Checking+0x298>)
 8004694:	701a      	strb	r2, [r3, #0]
					break;
 8004696:	e005      	b.n	80046a4 <Selected_PLAN_Checking+0x1dc>
			for(int r=1;r<=8; r++)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	3301      	adds	r3, #1
 800469c:	603b      	str	r3, [r7, #0]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	dd99      	ble.n	80045d8 <Selected_PLAN_Checking+0x110>
				}
			}

			if(sDate.WeekDay==1) Selected_PLAN = SCHE[7][last_sch].plan-1;
 80046a4:	4b25      	ldr	r3, [pc, #148]	@ (800473c <Selected_PLAN_Checking+0x274>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d10b      	bne.n	80046c4 <Selected_PLAN_Checking+0x1fc>
 80046ac:	4b2c      	ldr	r3, [pc, #176]	@ (8004760 <Selected_PLAN_Checking+0x298>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	4a23      	ldr	r2, [pc, #140]	@ (8004740 <Selected_PLAN_Checking+0x278>)
 80046b2:	333f      	adds	r3, #63	@ 0x3f
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	78db      	ldrb	r3, [r3, #3]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	4b29      	ldr	r3, [pc, #164]	@ (8004764 <Selected_PLAN_Checking+0x29c>)
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	e02c      	b.n	800471e <Selected_PLAN_Checking+0x256>
			else Selected_PLAN = SCHE[sDate.WeekDay-2][last_sch].plan-1;
 80046c4:	4b1d      	ldr	r3, [pc, #116]	@ (800473c <Selected_PLAN_Checking+0x274>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	1e9a      	subs	r2, r3, #2
 80046ca:	4b25      	ldr	r3, [pc, #148]	@ (8004760 <Selected_PLAN_Checking+0x298>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	491b      	ldr	r1, [pc, #108]	@ (8004740 <Selected_PLAN_Checking+0x278>)
 80046d2:	4613      	mov	r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4413      	add	r3, r2
 80046d8:	4403      	add	r3, r0
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	78db      	ldrb	r3, [r3, #3]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004764 <Selected_PLAN_Checking+0x29c>)
 80046e6:	701a      	strb	r2, [r3, #0]
			if(sDate.WeekDay==1) Selected_PLAN = SCHE[7][last_sch].plan-1;
 80046e8:	e019      	b.n	800471e <Selected_PLAN_Checking+0x256>
		}
		else if(timep>=schp)
 80046ea:	4b1c      	ldr	r3, [pc, #112]	@ (800475c <Selected_PLAN_Checking+0x294>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4b19      	ldr	r3, [pc, #100]	@ (8004754 <Selected_PLAN_Checking+0x28c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d313      	bcc.n	800471e <Selected_PLAN_Checking+0x256>
		{
			if(schp!=0)	Selected_PLAN=SCHE[sDate.WeekDay-1][p].plan-1;
 80046f6:	4b17      	ldr	r3, [pc, #92]	@ (8004754 <Selected_PLAN_Checking+0x28c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00f      	beq.n	800471e <Selected_PLAN_Checking+0x256>
 80046fe:	4b0f      	ldr	r3, [pc, #60]	@ (800473c <Selected_PLAN_Checking+0x274>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	1e5a      	subs	r2, r3, #1
 8004704:	490e      	ldr	r1, [pc, #56]	@ (8004740 <Selected_PLAN_Checking+0x278>)
 8004706:	4613      	mov	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4413      	add	r3, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	78db      	ldrb	r3, [r3, #3]
 8004716:	3b01      	subs	r3, #1
 8004718:	b2da      	uxtb	r2, r3
 800471a:	4b12      	ldr	r3, [pc, #72]	@ (8004764 <Selected_PLAN_Checking+0x29c>)
 800471c:	701a      	strb	r2, [r3, #0]
	for(int p=0; p<=7; p++)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3301      	adds	r3, #1
 8004722:	607b      	str	r3, [r7, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b07      	cmp	r3, #7
 8004728:	f77f aed4 	ble.w	80044d4 <Selected_PLAN_Checking+0xc>
		/*
		 * For Development Purpose
		 */
		//if(Selected_PLAN==0) Selected_PLAN=1;
	}
}
 800472c:	bf00      	nop
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	2000eb44 	.word	0x2000eb44
 8004740:	2000f174 	.word	0x2000f174
 8004744:	2000ee34 	.word	0x2000ee34
 8004748:	20011bb8 	.word	0x20011bb8
 800474c:	88888889 	.word	0x88888889
 8004750:	20011bbc 	.word	0x20011bbc
 8004754:	20011bac 	.word	0x20011bac
 8004758:	2000eb30 	.word	0x2000eb30
 800475c:	20011bb0 	.word	0x20011bb0
 8004760:	20011bb4 	.word	0x20011bb4
 8004764:	2000f48a 	.word	0x2000f48a

08004768 <green_conflict_check>:

uint8_t green_conflict_check(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
	int jk;
	status_GC=0, status_HWGC=0;
 800476e:	4b92      	ldr	r3, [pc, #584]	@ (80049b8 <green_conflict_check+0x250>)
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	4b91      	ldr	r3, [pc, #580]	@ (80049bc <green_conflict_check+0x254>)
 8004776:	2200      	movs	r2, #0
 8004778:	701a      	strb	r2, [r3, #0]

	if(SG[0][2]==1)
 800477a:	4b91      	ldr	r3, [pc, #580]	@ (80049c0 <green_conflict_check+0x258>)
 800477c:	789b      	ldrb	r3, [r3, #2]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d11e      	bne.n	80047c0 <green_conflict_check+0x58>
	{
		for(jk=1;jk<12;jk++)
 8004782:	2301      	movs	r3, #1
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	e018      	b.n	80047ba <green_conflict_check+0x52>
		{
			if(SG[jk][2]==1 && (!flag_bypass_GC[jk-1])) status_GC=1*1+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 8004788:	498d      	ldr	r1, [pc, #564]	@ (80049c0 <green_conflict_check+0x258>)
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	4413      	add	r3, r2
 8004792:	440b      	add	r3, r1
 8004794:	3302      	adds	r3, #2
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d10b      	bne.n	80047b4 <green_conflict_check+0x4c>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3b01      	subs	r3, #1
 80047a0:	4a88      	ldr	r2, [pc, #544]	@ (80049c4 <green_conflict_check+0x25c>)
 80047a2:	5cd3      	ldrb	r3, [r2, r3]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d105      	bne.n	80047b4 <green_conflict_check+0x4c>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	3301      	adds	r3, #1
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	4b81      	ldr	r3, [pc, #516]	@ (80049b8 <green_conflict_check+0x250>)
 80047b2:	701a      	strb	r2, [r3, #0]
		for(jk=1;jk<12;jk++)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3301      	adds	r3, #1
 80047b8:	607b      	str	r3, [r7, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b0b      	cmp	r3, #11
 80047be:	dde3      	ble.n	8004788 <green_conflict_check+0x20>
		}
	}

	if(SG[1][2]==1)
 80047c0:	4b7f      	ldr	r3, [pc, #508]	@ (80049c0 <green_conflict_check+0x258>)
 80047c2:	795b      	ldrb	r3, [r3, #5]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d11e      	bne.n	8004806 <green_conflict_check+0x9e>
	{
		for(jk=2;jk<12;jk++)
 80047c8:	2302      	movs	r3, #2
 80047ca:	607b      	str	r3, [r7, #4]
 80047cc:	e018      	b.n	8004800 <green_conflict_check+0x98>
		{
			 if(SG[jk][2]==1 && (!flag_bypass_GC[jk-2+11])) status_GC=1*10+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 80047ce:	497c      	ldr	r1, [pc, #496]	@ (80049c0 <green_conflict_check+0x258>)
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	4413      	add	r3, r2
 80047d8:	440b      	add	r3, r1
 80047da:	3302      	adds	r3, #2
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d10b      	bne.n	80047fa <green_conflict_check+0x92>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3309      	adds	r3, #9
 80047e6:	4a77      	ldr	r2, [pc, #476]	@ (80049c4 <green_conflict_check+0x25c>)
 80047e8:	5cd3      	ldrb	r3, [r2, r3]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d105      	bne.n	80047fa <green_conflict_check+0x92>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	330a      	adds	r3, #10
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	4b70      	ldr	r3, [pc, #448]	@ (80049b8 <green_conflict_check+0x250>)
 80047f8:	701a      	strb	r2, [r3, #0]
		for(jk=2;jk<12;jk++)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3301      	adds	r3, #1
 80047fe:	607b      	str	r3, [r7, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b0b      	cmp	r3, #11
 8004804:	dde3      	ble.n	80047ce <green_conflict_check+0x66>
		}
	}

	if(SG[2][2]==1)
 8004806:	4b6e      	ldr	r3, [pc, #440]	@ (80049c0 <green_conflict_check+0x258>)
 8004808:	7a1b      	ldrb	r3, [r3, #8]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d11e      	bne.n	800484c <green_conflict_check+0xe4>
	{
		for(jk=3;jk<12;jk++)
 800480e:	2303      	movs	r3, #3
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	e018      	b.n	8004846 <green_conflict_check+0xde>
		{
			 if(SG[jk][2]==1 && (!flag_bypass_GC[jk-3+21])) status_GC=2*10+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 8004814:	496a      	ldr	r1, [pc, #424]	@ (80049c0 <green_conflict_check+0x258>)
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	4613      	mov	r3, r2
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	4413      	add	r3, r2
 800481e:	440b      	add	r3, r1
 8004820:	3302      	adds	r3, #2
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d10b      	bne.n	8004840 <green_conflict_check+0xd8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3312      	adds	r3, #18
 800482c:	4a65      	ldr	r2, [pc, #404]	@ (80049c4 <green_conflict_check+0x25c>)
 800482e:	5cd3      	ldrb	r3, [r2, r3]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d105      	bne.n	8004840 <green_conflict_check+0xd8>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	3314      	adds	r3, #20
 800483a:	b2da      	uxtb	r2, r3
 800483c:	4b5e      	ldr	r3, [pc, #376]	@ (80049b8 <green_conflict_check+0x250>)
 800483e:	701a      	strb	r2, [r3, #0]
		for(jk=3;jk<12;jk++)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3301      	adds	r3, #1
 8004844:	607b      	str	r3, [r7, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b0b      	cmp	r3, #11
 800484a:	dde3      	ble.n	8004814 <green_conflict_check+0xac>
		}
	}

	if(SG[3][2]==1)
 800484c:	4b5c      	ldr	r3, [pc, #368]	@ (80049c0 <green_conflict_check+0x258>)
 800484e:	7adb      	ldrb	r3, [r3, #11]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d11e      	bne.n	8004892 <green_conflict_check+0x12a>
	{
		for(jk=4;jk<12;jk++)
 8004854:	2304      	movs	r3, #4
 8004856:	607b      	str	r3, [r7, #4]
 8004858:	e018      	b.n	800488c <green_conflict_check+0x124>
		{
			 if(SG[jk][2]==1 && (!flag_bypass_GC[jk-4+30])) status_GC=3*10+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 800485a:	4959      	ldr	r1, [pc, #356]	@ (80049c0 <green_conflict_check+0x258>)
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	4413      	add	r3, r2
 8004864:	440b      	add	r3, r1
 8004866:	3302      	adds	r3, #2
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d10b      	bne.n	8004886 <green_conflict_check+0x11e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	331a      	adds	r3, #26
 8004872:	4a54      	ldr	r2, [pc, #336]	@ (80049c4 <green_conflict_check+0x25c>)
 8004874:	5cd3      	ldrb	r3, [r2, r3]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d105      	bne.n	8004886 <green_conflict_check+0x11e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	331e      	adds	r3, #30
 8004880:	b2da      	uxtb	r2, r3
 8004882:	4b4d      	ldr	r3, [pc, #308]	@ (80049b8 <green_conflict_check+0x250>)
 8004884:	701a      	strb	r2, [r3, #0]
		for(jk=4;jk<12;jk++)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3301      	adds	r3, #1
 800488a:	607b      	str	r3, [r7, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b0b      	cmp	r3, #11
 8004890:	dde3      	ble.n	800485a <green_conflict_check+0xf2>
		}
	}

	if(SG[4][2]==1)
 8004892:	4b4b      	ldr	r3, [pc, #300]	@ (80049c0 <green_conflict_check+0x258>)
 8004894:	7b9b      	ldrb	r3, [r3, #14]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d11e      	bne.n	80048d8 <green_conflict_check+0x170>
	{
		for(jk=5;jk<12;jk++)
 800489a:	2305      	movs	r3, #5
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	e018      	b.n	80048d2 <green_conflict_check+0x16a>
		{
			 if(SG[jk][2]==1 && (!flag_bypass_GC[jk-5+38])) status_GC=4*10+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 80048a0:	4947      	ldr	r1, [pc, #284]	@ (80049c0 <green_conflict_check+0x258>)
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	4413      	add	r3, r2
 80048aa:	440b      	add	r3, r1
 80048ac:	3302      	adds	r3, #2
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d10b      	bne.n	80048cc <green_conflict_check+0x164>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3321      	adds	r3, #33	@ 0x21
 80048b8:	4a42      	ldr	r2, [pc, #264]	@ (80049c4 <green_conflict_check+0x25c>)
 80048ba:	5cd3      	ldrb	r3, [r2, r3]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d105      	bne.n	80048cc <green_conflict_check+0x164>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	3328      	adds	r3, #40	@ 0x28
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	4b3b      	ldr	r3, [pc, #236]	@ (80049b8 <green_conflict_check+0x250>)
 80048ca:	701a      	strb	r2, [r3, #0]
		for(jk=5;jk<12;jk++)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3301      	adds	r3, #1
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b0b      	cmp	r3, #11
 80048d6:	dde3      	ble.n	80048a0 <green_conflict_check+0x138>
		}
	}

	if(SG[5][2]==1)
 80048d8:	4b39      	ldr	r3, [pc, #228]	@ (80049c0 <green_conflict_check+0x258>)
 80048da:	7c5b      	ldrb	r3, [r3, #17]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d11e      	bne.n	800491e <green_conflict_check+0x1b6>
	{
		for(jk=6;jk<12;jk++)
 80048e0:	2306      	movs	r3, #6
 80048e2:	607b      	str	r3, [r7, #4]
 80048e4:	e018      	b.n	8004918 <green_conflict_check+0x1b0>
		{
			 if(SG[jk][2]==1 && (!flag_bypass_GC[jk-6+45])) status_GC=5*10+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 80048e6:	4936      	ldr	r1, [pc, #216]	@ (80049c0 <green_conflict_check+0x258>)
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	4413      	add	r3, r2
 80048f0:	440b      	add	r3, r1
 80048f2:	3302      	adds	r3, #2
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d10b      	bne.n	8004912 <green_conflict_check+0x1aa>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3327      	adds	r3, #39	@ 0x27
 80048fe:	4a31      	ldr	r2, [pc, #196]	@ (80049c4 <green_conflict_check+0x25c>)
 8004900:	5cd3      	ldrb	r3, [r2, r3]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d105      	bne.n	8004912 <green_conflict_check+0x1aa>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	3332      	adds	r3, #50	@ 0x32
 800490c:	b2da      	uxtb	r2, r3
 800490e:	4b2a      	ldr	r3, [pc, #168]	@ (80049b8 <green_conflict_check+0x250>)
 8004910:	701a      	strb	r2, [r3, #0]
		for(jk=6;jk<12;jk++)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3301      	adds	r3, #1
 8004916:	607b      	str	r3, [r7, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b0b      	cmp	r3, #11
 800491c:	dde3      	ble.n	80048e6 <green_conflict_check+0x17e>
		}
	}

	if(SG[6][2]==1)
 800491e:	4b28      	ldr	r3, [pc, #160]	@ (80049c0 <green_conflict_check+0x258>)
 8004920:	7d1b      	ldrb	r3, [r3, #20]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d11e      	bne.n	8004964 <green_conflict_check+0x1fc>
	{
		for(jk=7;jk<12;jk++)
 8004926:	2307      	movs	r3, #7
 8004928:	607b      	str	r3, [r7, #4]
 800492a:	e018      	b.n	800495e <green_conflict_check+0x1f6>
		{
			 if(SG[jk][2]==1 && (!flag_bypass_GC[jk-7+51])) status_GC=6*10+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 800492c:	4924      	ldr	r1, [pc, #144]	@ (80049c0 <green_conflict_check+0x258>)
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	4613      	mov	r3, r2
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	4413      	add	r3, r2
 8004936:	440b      	add	r3, r1
 8004938:	3302      	adds	r3, #2
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d10b      	bne.n	8004958 <green_conflict_check+0x1f0>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	332c      	adds	r3, #44	@ 0x2c
 8004944:	4a1f      	ldr	r2, [pc, #124]	@ (80049c4 <green_conflict_check+0x25c>)
 8004946:	5cd3      	ldrb	r3, [r2, r3]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d105      	bne.n	8004958 <green_conflict_check+0x1f0>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	b2db      	uxtb	r3, r3
 8004950:	333c      	adds	r3, #60	@ 0x3c
 8004952:	b2da      	uxtb	r2, r3
 8004954:	4b18      	ldr	r3, [pc, #96]	@ (80049b8 <green_conflict_check+0x250>)
 8004956:	701a      	strb	r2, [r3, #0]
		for(jk=7;jk<12;jk++)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3301      	adds	r3, #1
 800495c:	607b      	str	r3, [r7, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b0b      	cmp	r3, #11
 8004962:	dde3      	ble.n	800492c <green_conflict_check+0x1c4>
		}
	}

	if(SG[7][2]==1)
 8004964:	4b16      	ldr	r3, [pc, #88]	@ (80049c0 <green_conflict_check+0x258>)
 8004966:	7ddb      	ldrb	r3, [r3, #23]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d11e      	bne.n	80049aa <green_conflict_check+0x242>
	{
		for(jk=8;jk<12;jk++)
 800496c:	2308      	movs	r3, #8
 800496e:	607b      	str	r3, [r7, #4]
 8004970:	e018      	b.n	80049a4 <green_conflict_check+0x23c>
		{
			 if(SG[jk][2]==1 && (!flag_bypass_GC[jk-8+56])) status_GC=7*10+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 8004972:	4913      	ldr	r1, [pc, #76]	@ (80049c0 <green_conflict_check+0x258>)
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	4413      	add	r3, r2
 800497c:	440b      	add	r3, r1
 800497e:	3302      	adds	r3, #2
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d10b      	bne.n	800499e <green_conflict_check+0x236>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3330      	adds	r3, #48	@ 0x30
 800498a:	4a0e      	ldr	r2, [pc, #56]	@ (80049c4 <green_conflict_check+0x25c>)
 800498c:	5cd3      	ldrb	r3, [r2, r3]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d105      	bne.n	800499e <green_conflict_check+0x236>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	3346      	adds	r3, #70	@ 0x46
 8004998:	b2da      	uxtb	r2, r3
 800499a:	4b07      	ldr	r3, [pc, #28]	@ (80049b8 <green_conflict_check+0x250>)
 800499c:	701a      	strb	r2, [r3, #0]
		for(jk=8;jk<12;jk++)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3301      	adds	r3, #1
 80049a2:	607b      	str	r3, [r7, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b0b      	cmp	r3, #11
 80049a8:	dde3      	ble.n	8004972 <green_conflict_check+0x20a>
		}
	}

	if(SG[8][2]==1)
 80049aa:	4b05      	ldr	r3, [pc, #20]	@ (80049c0 <green_conflict_check+0x258>)
 80049ac:	7e9b      	ldrb	r3, [r3, #26]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d126      	bne.n	8004a00 <green_conflict_check+0x298>
	{
		for(jk=9;jk<12;jk++)
 80049b2:	2309      	movs	r3, #9
 80049b4:	607b      	str	r3, [r7, #4]
 80049b6:	e020      	b.n	80049fa <green_conflict_check+0x292>
 80049b8:	2000f48d 	.word	0x2000f48d
 80049bc:	2000f48e 	.word	0x2000f48e
 80049c0:	2000ecc8 	.word	0x2000ecc8
 80049c4:	2000edac 	.word	0x2000edac
		{
			 if(SG[jk][2]==1 && (!flag_bypass_GC[jk-9+60])) status_GC=8*10+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 80049c8:	493b      	ldr	r1, [pc, #236]	@ (8004ab8 <green_conflict_check+0x350>)
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	4613      	mov	r3, r2
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	4413      	add	r3, r2
 80049d2:	440b      	add	r3, r1
 80049d4:	3302      	adds	r3, #2
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d10b      	bne.n	80049f4 <green_conflict_check+0x28c>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3333      	adds	r3, #51	@ 0x33
 80049e0:	4a36      	ldr	r2, [pc, #216]	@ (8004abc <green_conflict_check+0x354>)
 80049e2:	5cd3      	ldrb	r3, [r2, r3]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d105      	bne.n	80049f4 <green_conflict_check+0x28c>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	3350      	adds	r3, #80	@ 0x50
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	4b33      	ldr	r3, [pc, #204]	@ (8004ac0 <green_conflict_check+0x358>)
 80049f2:	701a      	strb	r2, [r3, #0]
		for(jk=9;jk<12;jk++)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3301      	adds	r3, #1
 80049f8:	607b      	str	r3, [r7, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b0b      	cmp	r3, #11
 80049fe:	dde3      	ble.n	80049c8 <green_conflict_check+0x260>
		}
	}

	if(SG[9][2]==1)
 8004a00:	4b2d      	ldr	r3, [pc, #180]	@ (8004ab8 <green_conflict_check+0x350>)
 8004a02:	7f5b      	ldrb	r3, [r3, #29]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d11e      	bne.n	8004a46 <green_conflict_check+0x2de>
	{
		for(jk=10;jk<12;jk++)
 8004a08:	230a      	movs	r3, #10
 8004a0a:	607b      	str	r3, [r7, #4]
 8004a0c:	e018      	b.n	8004a40 <green_conflict_check+0x2d8>
		{
			if(SG[jk][2]==1 && (!flag_bypass_GC[jk-10+63])) status_GC=9*10+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 8004a0e:	492a      	ldr	r1, [pc, #168]	@ (8004ab8 <green_conflict_check+0x350>)
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	4413      	add	r3, r2
 8004a18:	440b      	add	r3, r1
 8004a1a:	3302      	adds	r3, #2
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d10b      	bne.n	8004a3a <green_conflict_check+0x2d2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3335      	adds	r3, #53	@ 0x35
 8004a26:	4a25      	ldr	r2, [pc, #148]	@ (8004abc <green_conflict_check+0x354>)
 8004a28:	5cd3      	ldrb	r3, [r2, r3]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d105      	bne.n	8004a3a <green_conflict_check+0x2d2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	335a      	adds	r3, #90	@ 0x5a
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	4b22      	ldr	r3, [pc, #136]	@ (8004ac0 <green_conflict_check+0x358>)
 8004a38:	701a      	strb	r2, [r3, #0]
		for(jk=10;jk<12;jk++)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	607b      	str	r3, [r7, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b0b      	cmp	r3, #11
 8004a44:	dde3      	ble.n	8004a0e <green_conflict_check+0x2a6>
		}
	}

	if(SG[10][2]==1)
 8004a46:	4b1c      	ldr	r3, [pc, #112]	@ (8004ab8 <green_conflict_check+0x350>)
 8004a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d10f      	bne.n	8004a70 <green_conflict_check+0x308>
		if(SG[11][2]==1 && (!flag_bypass_GC[65])) status_GC=10*10+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 8004a50:	4b19      	ldr	r3, [pc, #100]	@ (8004ab8 <green_conflict_check+0x350>)
 8004a52:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d10a      	bne.n	8004a70 <green_conflict_check+0x308>
 8004a5a:	4b18      	ldr	r3, [pc, #96]	@ (8004abc <green_conflict_check+0x354>)
 8004a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d105      	bne.n	8004a70 <green_conflict_check+0x308>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	3364      	adds	r3, #100	@ 0x64
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	4b14      	ldr	r3, [pc, #80]	@ (8004ac0 <green_conflict_check+0x358>)
 8004a6e:	701a      	strb	r2, [r3, #0]

	// Green Conflict Check 1
	 if(status_GC>0)
 8004a70:	4b13      	ldr	r3, [pc, #76]	@ (8004ac0 <green_conflict_check+0x358>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <green_conflict_check+0x31c>
	 {
		 //command_lamp_HIL(1, APILL_YELLOW);
		 state_ATCS = status_ERROR + status_GC;
 8004a78:	4b11      	ldr	r3, [pc, #68]	@ (8004ac0 <green_conflict_check+0x358>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	3364      	adds	r3, #100	@ 0x64
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	4b10      	ldr	r3, [pc, #64]	@ (8004ac4 <green_conflict_check+0x35c>)
 8004a82:	701a      	strb	r2, [r3, #0]
	 }

	 status_HWGC = green_conflict_HW_check();
 8004a84:	f000 f822 	bl	8004acc <green_conflict_HW_check>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac8 <green_conflict_check+0x360>)
 8004a8e:	701a      	strb	r2, [r3, #0]
	 if(status_HWGC>0)
 8004a90:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac8 <green_conflict_check+0x360>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <green_conflict_check+0x33c>
	 {
		 //command_lamp_HIL(1, APILL_YELLOW);
		 state_ATCS = status_ERROR + status_HWGC;
 8004a98:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac8 <green_conflict_check+0x360>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	3364      	adds	r3, #100	@ 0x64
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	4b08      	ldr	r3, [pc, #32]	@ (8004ac4 <green_conflict_check+0x35c>)
 8004aa2:	701a      	strb	r2, [r3, #0]
	 }

	 return status_GC+(status_HWGC);
 8004aa4:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <green_conflict_check+0x358>)
 8004aa6:	781a      	ldrb	r2, [r3, #0]
 8004aa8:	4b07      	ldr	r3, [pc, #28]	@ (8004ac8 <green_conflict_check+0x360>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	4413      	add	r3, r2
 8004aae:	b2db      	uxtb	r3, r3

}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	2000ecc8 	.word	0x2000ecc8
 8004abc:	2000edac 	.word	0x2000edac
 8004ac0:	2000f48d 	.word	0x2000f48d
 8004ac4:	2000f453 	.word	0x2000f453
 8004ac8:	2000f48e 	.word	0x2000f48e

08004acc <green_conflict_HW_check>:

uint8_t feedback_SG[12][3];
uint8_t status_GC_HW=0;
uint8_t green_conflict_HW_check(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
	int jk;
	status_GC_HW=0;
 8004ad2:	4b9f      	ldr	r3, [pc, #636]	@ (8004d50 <green_conflict_HW_check+0x284>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	701a      	strb	r2, [r3, #0]

	feedback_SG[0][2] = FBSG1_3;
 8004ad8:	2180      	movs	r1, #128	@ 0x80
 8004ada:	489e      	ldr	r0, [pc, #632]	@ (8004d54 <green_conflict_HW_check+0x288>)
 8004adc:	f004 f92e 	bl	8008d3c <HAL_GPIO_ReadPin>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	4b9c      	ldr	r3, [pc, #624]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004ae6:	709a      	strb	r2, [r3, #2]
	feedback_SG[1][2] = FBSG2_3;
 8004ae8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004aec:	489b      	ldr	r0, [pc, #620]	@ (8004d5c <green_conflict_HW_check+0x290>)
 8004aee:	f004 f925 	bl	8008d3c <HAL_GPIO_ReadPin>
 8004af2:	4603      	mov	r3, r0
 8004af4:	461a      	mov	r2, r3
 8004af6:	4b98      	ldr	r3, [pc, #608]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004af8:	715a      	strb	r2, [r3, #5]
	feedback_SG[2][2] = FBSG3_3;
 8004afa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004afe:	4897      	ldr	r0, [pc, #604]	@ (8004d5c <green_conflict_HW_check+0x290>)
 8004b00:	f004 f91c 	bl	8008d3c <HAL_GPIO_ReadPin>
 8004b04:	4603      	mov	r3, r0
 8004b06:	461a      	mov	r2, r3
 8004b08:	4b93      	ldr	r3, [pc, #588]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004b0a:	721a      	strb	r2, [r3, #8]
	feedback_SG[3][2] = FBSG4_3;
 8004b0c:	2102      	movs	r1, #2
 8004b0e:	4894      	ldr	r0, [pc, #592]	@ (8004d60 <green_conflict_HW_check+0x294>)
 8004b10:	f004 f914 	bl	8008d3c <HAL_GPIO_ReadPin>
 8004b14:	4603      	mov	r3, r0
 8004b16:	461a      	mov	r2, r3
 8004b18:	4b8f      	ldr	r3, [pc, #572]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004b1a:	72da      	strb	r2, [r3, #11]
	feedback_SG[4][2] = FBSG5_3;
 8004b1c:	2110      	movs	r1, #16
 8004b1e:	488f      	ldr	r0, [pc, #572]	@ (8004d5c <green_conflict_HW_check+0x290>)
 8004b20:	f004 f90c 	bl	8008d3c <HAL_GPIO_ReadPin>
 8004b24:	4603      	mov	r3, r0
 8004b26:	461a      	mov	r2, r3
 8004b28:	4b8b      	ldr	r3, [pc, #556]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004b2a:	739a      	strb	r2, [r3, #14]
	feedback_SG[5][2] = FBSG6_3;
 8004b2c:	2102      	movs	r1, #2
 8004b2e:	488b      	ldr	r0, [pc, #556]	@ (8004d5c <green_conflict_HW_check+0x290>)
 8004b30:	f004 f904 	bl	8008d3c <HAL_GPIO_ReadPin>
 8004b34:	4603      	mov	r3, r0
 8004b36:	461a      	mov	r2, r3
 8004b38:	4b87      	ldr	r3, [pc, #540]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004b3a:	745a      	strb	r2, [r3, #17]
	feedback_SG[6][2] = FBSG7_3;
 8004b3c:	2120      	movs	r1, #32
 8004b3e:	4885      	ldr	r0, [pc, #532]	@ (8004d54 <green_conflict_HW_check+0x288>)
 8004b40:	f004 f8fc 	bl	8008d3c <HAL_GPIO_ReadPin>
 8004b44:	4603      	mov	r3, r0
 8004b46:	461a      	mov	r2, r3
 8004b48:	4b83      	ldr	r3, [pc, #524]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004b4a:	751a      	strb	r2, [r3, #20]
	feedback_SG[7][2] = FBSG8_3;
 8004b4c:	2104      	movs	r1, #4
 8004b4e:	4881      	ldr	r0, [pc, #516]	@ (8004d54 <green_conflict_HW_check+0x288>)
 8004b50:	f004 f8f4 	bl	8008d3c <HAL_GPIO_ReadPin>
 8004b54:	4603      	mov	r3, r0
 8004b56:	461a      	mov	r2, r3
 8004b58:	4b7f      	ldr	r3, [pc, #508]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004b5a:	75da      	strb	r2, [r3, #23]
	feedback_SG[8][2] = FBSG9_3;
 8004b5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004b60:	4880      	ldr	r0, [pc, #512]	@ (8004d64 <green_conflict_HW_check+0x298>)
 8004b62:	f004 f8eb 	bl	8008d3c <HAL_GPIO_ReadPin>
 8004b66:	4603      	mov	r3, r0
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4b7b      	ldr	r3, [pc, #492]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004b6c:	769a      	strb	r2, [r3, #26]
	feedback_SG[9][2] = FBSG10_3;
 8004b6e:	2140      	movs	r1, #64	@ 0x40
 8004b70:	487d      	ldr	r0, [pc, #500]	@ (8004d68 <green_conflict_HW_check+0x29c>)
 8004b72:	f004 f8e3 	bl	8008d3c <HAL_GPIO_ReadPin>
 8004b76:	4603      	mov	r3, r0
 8004b78:	461a      	mov	r2, r3
 8004b7a:	4b77      	ldr	r3, [pc, #476]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004b7c:	775a      	strb	r2, [r3, #29]
	feedback_SG[10][2] = FBSG11_3;
 8004b7e:	2108      	movs	r1, #8
 8004b80:	4879      	ldr	r0, [pc, #484]	@ (8004d68 <green_conflict_HW_check+0x29c>)
 8004b82:	f004 f8db 	bl	8008d3c <HAL_GPIO_ReadPin>
 8004b86:	4603      	mov	r3, r0
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4b73      	ldr	r3, [pc, #460]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004b8c:	f883 2020 	strb.w	r2, [r3, #32]
	feedback_SG[11][2] = FBSG12_3;
 8004b90:	2101      	movs	r1, #1
 8004b92:	4875      	ldr	r0, [pc, #468]	@ (8004d68 <green_conflict_HW_check+0x29c>)
 8004b94:	f004 f8d2 	bl	8008d3c <HAL_GPIO_ReadPin>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	4b6e      	ldr	r3, [pc, #440]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004b9e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23


	if(feedback_SG[0][2]==1)
 8004ba2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004ba4:	789b      	ldrb	r3, [r3, #2]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d11c      	bne.n	8004be4 <green_conflict_HW_check+0x118>
		{
			for(jk=1;jk<12;jk++)
 8004baa:	2301      	movs	r3, #1
 8004bac:	607b      	str	r3, [r7, #4]
 8004bae:	e016      	b.n	8004bde <green_conflict_HW_check+0x112>
			{
				if(feedback_SG[jk][2]==1 && (!flag_bypass_GC[jk-1])) status_GC_HW=jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 8004bb0:	4969      	ldr	r1, [pc, #420]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	4413      	add	r3, r2
 8004bba:	440b      	add	r3, r1
 8004bbc:	3302      	adds	r3, #2
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d109      	bne.n	8004bd8 <green_conflict_HW_check+0x10c>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	4a68      	ldr	r2, [pc, #416]	@ (8004d6c <green_conflict_HW_check+0x2a0>)
 8004bca:	5cd3      	ldrb	r3, [r2, r3]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d103      	bne.n	8004bd8 <green_conflict_HW_check+0x10c>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	4b5e      	ldr	r3, [pc, #376]	@ (8004d50 <green_conflict_HW_check+0x284>)
 8004bd6:	701a      	strb	r2, [r3, #0]
			for(jk=1;jk<12;jk++)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	607b      	str	r3, [r7, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b0b      	cmp	r3, #11
 8004be2:	dde5      	ble.n	8004bb0 <green_conflict_HW_check+0xe4>
			}
		}

		if(feedback_SG[1][2]==1)
 8004be4:	4b5c      	ldr	r3, [pc, #368]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004be6:	795b      	ldrb	r3, [r3, #5]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d11e      	bne.n	8004c2a <green_conflict_HW_check+0x15e>
		{
			for(jk=2;jk<12;jk++)
 8004bec:	2302      	movs	r3, #2
 8004bee:	607b      	str	r3, [r7, #4]
 8004bf0:	e018      	b.n	8004c24 <green_conflict_HW_check+0x158>
			{
				 if(feedback_SG[jk][2]==1 && (!flag_bypass_GC[jk-2+11])) status_GC_HW=10+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 8004bf2:	4959      	ldr	r1, [pc, #356]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	4413      	add	r3, r2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	3302      	adds	r3, #2
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d10b      	bne.n	8004c1e <green_conflict_HW_check+0x152>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3309      	adds	r3, #9
 8004c0a:	4a58      	ldr	r2, [pc, #352]	@ (8004d6c <green_conflict_HW_check+0x2a0>)
 8004c0c:	5cd3      	ldrb	r3, [r2, r3]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d105      	bne.n	8004c1e <green_conflict_HW_check+0x152>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	330a      	adds	r3, #10
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	4b4d      	ldr	r3, [pc, #308]	@ (8004d50 <green_conflict_HW_check+0x284>)
 8004c1c:	701a      	strb	r2, [r3, #0]
			for(jk=2;jk<12;jk++)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3301      	adds	r3, #1
 8004c22:	607b      	str	r3, [r7, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b0b      	cmp	r3, #11
 8004c28:	dde3      	ble.n	8004bf2 <green_conflict_HW_check+0x126>
			}
		}

		if(feedback_SG[2][2]==1)
 8004c2a:	4b4b      	ldr	r3, [pc, #300]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004c2c:	7a1b      	ldrb	r3, [r3, #8]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d11e      	bne.n	8004c70 <green_conflict_HW_check+0x1a4>
		{
			for(jk=3;jk<12;jk++)
 8004c32:	2303      	movs	r3, #3
 8004c34:	607b      	str	r3, [r7, #4]
 8004c36:	e018      	b.n	8004c6a <green_conflict_HW_check+0x19e>
			{
				 if(feedback_SG[jk][2]==1 && (!flag_bypass_GC[jk-3+21])) status_GC_HW=20+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 8004c38:	4947      	ldr	r1, [pc, #284]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	4413      	add	r3, r2
 8004c42:	440b      	add	r3, r1
 8004c44:	3302      	adds	r3, #2
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d10b      	bne.n	8004c64 <green_conflict_HW_check+0x198>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3312      	adds	r3, #18
 8004c50:	4a46      	ldr	r2, [pc, #280]	@ (8004d6c <green_conflict_HW_check+0x2a0>)
 8004c52:	5cd3      	ldrb	r3, [r2, r3]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d105      	bne.n	8004c64 <green_conflict_HW_check+0x198>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	3314      	adds	r3, #20
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	4b3b      	ldr	r3, [pc, #236]	@ (8004d50 <green_conflict_HW_check+0x284>)
 8004c62:	701a      	strb	r2, [r3, #0]
			for(jk=3;jk<12;jk++)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3301      	adds	r3, #1
 8004c68:	607b      	str	r3, [r7, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b0b      	cmp	r3, #11
 8004c6e:	dde3      	ble.n	8004c38 <green_conflict_HW_check+0x16c>
			}
		}

		if(feedback_SG[3][2]==1)
 8004c70:	4b39      	ldr	r3, [pc, #228]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004c72:	7adb      	ldrb	r3, [r3, #11]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d11e      	bne.n	8004cb6 <green_conflict_HW_check+0x1ea>
		{
			for(jk=4;jk<12;jk++)
 8004c78:	2304      	movs	r3, #4
 8004c7a:	607b      	str	r3, [r7, #4]
 8004c7c:	e018      	b.n	8004cb0 <green_conflict_HW_check+0x1e4>
			{
				 if(feedback_SG[jk][2]==1 && (!flag_bypass_GC[jk-4+30])) status_GC_HW=30+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 8004c7e:	4936      	ldr	r1, [pc, #216]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	4413      	add	r3, r2
 8004c88:	440b      	add	r3, r1
 8004c8a:	3302      	adds	r3, #2
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d10b      	bne.n	8004caa <green_conflict_HW_check+0x1de>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	331a      	adds	r3, #26
 8004c96:	4a35      	ldr	r2, [pc, #212]	@ (8004d6c <green_conflict_HW_check+0x2a0>)
 8004c98:	5cd3      	ldrb	r3, [r2, r3]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d105      	bne.n	8004caa <green_conflict_HW_check+0x1de>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	331e      	adds	r3, #30
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8004d50 <green_conflict_HW_check+0x284>)
 8004ca8:	701a      	strb	r2, [r3, #0]
			for(jk=4;jk<12;jk++)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	3301      	adds	r3, #1
 8004cae:	607b      	str	r3, [r7, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b0b      	cmp	r3, #11
 8004cb4:	dde3      	ble.n	8004c7e <green_conflict_HW_check+0x1b2>
			}
		}

		if(feedback_SG[4][2]==1)
 8004cb6:	4b28      	ldr	r3, [pc, #160]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004cb8:	7b9b      	ldrb	r3, [r3, #14]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d11e      	bne.n	8004cfc <green_conflict_HW_check+0x230>
		{
			for(jk=5;jk<12;jk++)
 8004cbe:	2305      	movs	r3, #5
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	e018      	b.n	8004cf6 <green_conflict_HW_check+0x22a>
			{
				 if(feedback_SG[jk][2]==1 && (!flag_bypass_GC[jk-5+38])) status_GC_HW=40+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 8004cc4:	4924      	ldr	r1, [pc, #144]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	4413      	add	r3, r2
 8004cce:	440b      	add	r3, r1
 8004cd0:	3302      	adds	r3, #2
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d10b      	bne.n	8004cf0 <green_conflict_HW_check+0x224>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3321      	adds	r3, #33	@ 0x21
 8004cdc:	4a23      	ldr	r2, [pc, #140]	@ (8004d6c <green_conflict_HW_check+0x2a0>)
 8004cde:	5cd3      	ldrb	r3, [r2, r3]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d105      	bne.n	8004cf0 <green_conflict_HW_check+0x224>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	3328      	adds	r3, #40	@ 0x28
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	4b18      	ldr	r3, [pc, #96]	@ (8004d50 <green_conflict_HW_check+0x284>)
 8004cee:	701a      	strb	r2, [r3, #0]
			for(jk=5;jk<12;jk++)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	607b      	str	r3, [r7, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b0b      	cmp	r3, #11
 8004cfa:	dde3      	ble.n	8004cc4 <green_conflict_HW_check+0x1f8>
			}
		}

		if(feedback_SG[5][2]==1)
 8004cfc:	4b16      	ldr	r3, [pc, #88]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004cfe:	7c5b      	ldrb	r3, [r3, #17]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d11e      	bne.n	8004d42 <green_conflict_HW_check+0x276>
		{
			for(jk=6;jk<12;jk++)
 8004d04:	2306      	movs	r3, #6
 8004d06:	607b      	str	r3, [r7, #4]
 8004d08:	e018      	b.n	8004d3c <green_conflict_HW_check+0x270>
			{
				 if(feedback_SG[jk][2]==1 && (!flag_bypass_GC[jk-6+45])) status_GC_HW=50+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 8004d0a:	4913      	ldr	r1, [pc, #76]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	4413      	add	r3, r2
 8004d14:	440b      	add	r3, r1
 8004d16:	3302      	adds	r3, #2
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d10b      	bne.n	8004d36 <green_conflict_HW_check+0x26a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	3327      	adds	r3, #39	@ 0x27
 8004d22:	4a12      	ldr	r2, [pc, #72]	@ (8004d6c <green_conflict_HW_check+0x2a0>)
 8004d24:	5cd3      	ldrb	r3, [r2, r3]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d105      	bne.n	8004d36 <green_conflict_HW_check+0x26a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	3332      	adds	r3, #50	@ 0x32
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	4b07      	ldr	r3, [pc, #28]	@ (8004d50 <green_conflict_HW_check+0x284>)
 8004d34:	701a      	strb	r2, [r3, #0]
			for(jk=6;jk<12;jk++)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	607b      	str	r3, [r7, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b0b      	cmp	r3, #11
 8004d40:	dde3      	ble.n	8004d0a <green_conflict_HW_check+0x23e>
			}
		}

		if(feedback_SG[6][2]==1)
 8004d42:	4b05      	ldr	r3, [pc, #20]	@ (8004d58 <green_conflict_HW_check+0x28c>)
 8004d44:	7d1b      	ldrb	r3, [r3, #20]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d12e      	bne.n	8004da8 <green_conflict_HW_check+0x2dc>
		{
			for(jk=7;jk<12;jk++)
 8004d4a:	2307      	movs	r3, #7
 8004d4c:	607b      	str	r3, [r7, #4]
 8004d4e:	e028      	b.n	8004da2 <green_conflict_HW_check+0x2d6>
 8004d50:	20011be4 	.word	0x20011be4
 8004d54:	40021000 	.word	0x40021000
 8004d58:	20011bc0 	.word	0x20011bc0
 8004d5c:	40021400 	.word	0x40021400
 8004d60:	40020400 	.word	0x40020400
 8004d64:	40021800 	.word	0x40021800
 8004d68:	40020c00 	.word	0x40020c00
 8004d6c:	2000edac 	.word	0x2000edac
			{
				 if(feedback_SG[jk][2]==1 && (!flag_bypass_GC[jk-7+51])) status_GC_HW=60+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 8004d70:	494f      	ldr	r1, [pc, #316]	@ (8004eb0 <green_conflict_HW_check+0x3e4>)
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	4413      	add	r3, r2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d10b      	bne.n	8004d9c <green_conflict_HW_check+0x2d0>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	332c      	adds	r3, #44	@ 0x2c
 8004d88:	4a4a      	ldr	r2, [pc, #296]	@ (8004eb4 <green_conflict_HW_check+0x3e8>)
 8004d8a:	5cd3      	ldrb	r3, [r2, r3]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d105      	bne.n	8004d9c <green_conflict_HW_check+0x2d0>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	333c      	adds	r3, #60	@ 0x3c
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	4b47      	ldr	r3, [pc, #284]	@ (8004eb8 <green_conflict_HW_check+0x3ec>)
 8004d9a:	701a      	strb	r2, [r3, #0]
			for(jk=7;jk<12;jk++)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	607b      	str	r3, [r7, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b0b      	cmp	r3, #11
 8004da6:	dde3      	ble.n	8004d70 <green_conflict_HW_check+0x2a4>
			}
		}

		if(feedback_SG[7][2]==1)
 8004da8:	4b41      	ldr	r3, [pc, #260]	@ (8004eb0 <green_conflict_HW_check+0x3e4>)
 8004daa:	7ddb      	ldrb	r3, [r3, #23]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d11e      	bne.n	8004dee <green_conflict_HW_check+0x322>
		{
			for(jk=8;jk<12;jk++)
 8004db0:	2308      	movs	r3, #8
 8004db2:	607b      	str	r3, [r7, #4]
 8004db4:	e018      	b.n	8004de8 <green_conflict_HW_check+0x31c>
			{
				 if(feedback_SG[jk][2]==1 && (!flag_bypass_GC[jk-8+56])) status_GC_HW=70+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 8004db6:	493e      	ldr	r1, [pc, #248]	@ (8004eb0 <green_conflict_HW_check+0x3e4>)
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	4413      	add	r3, r2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	3302      	adds	r3, #2
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d10b      	bne.n	8004de2 <green_conflict_HW_check+0x316>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3330      	adds	r3, #48	@ 0x30
 8004dce:	4a39      	ldr	r2, [pc, #228]	@ (8004eb4 <green_conflict_HW_check+0x3e8>)
 8004dd0:	5cd3      	ldrb	r3, [r2, r3]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d105      	bne.n	8004de2 <green_conflict_HW_check+0x316>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	3346      	adds	r3, #70	@ 0x46
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	4b36      	ldr	r3, [pc, #216]	@ (8004eb8 <green_conflict_HW_check+0x3ec>)
 8004de0:	701a      	strb	r2, [r3, #0]
			for(jk=8;jk<12;jk++)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3301      	adds	r3, #1
 8004de6:	607b      	str	r3, [r7, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b0b      	cmp	r3, #11
 8004dec:	dde3      	ble.n	8004db6 <green_conflict_HW_check+0x2ea>
			}
		}

		if(feedback_SG[8][2]==1)
 8004dee:	4b30      	ldr	r3, [pc, #192]	@ (8004eb0 <green_conflict_HW_check+0x3e4>)
 8004df0:	7e9b      	ldrb	r3, [r3, #26]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d11e      	bne.n	8004e34 <green_conflict_HW_check+0x368>
		{
			for(jk=9;jk<12;jk++)
 8004df6:	2309      	movs	r3, #9
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	e018      	b.n	8004e2e <green_conflict_HW_check+0x362>
			{
				 if(feedback_SG[jk][2]==1 && (!flag_bypass_GC[jk-9+60])) status_GC_HW=80+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 8004dfc:	492c      	ldr	r1, [pc, #176]	@ (8004eb0 <green_conflict_HW_check+0x3e4>)
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	4413      	add	r3, r2
 8004e06:	440b      	add	r3, r1
 8004e08:	3302      	adds	r3, #2
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d10b      	bne.n	8004e28 <green_conflict_HW_check+0x35c>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3333      	adds	r3, #51	@ 0x33
 8004e14:	4a27      	ldr	r2, [pc, #156]	@ (8004eb4 <green_conflict_HW_check+0x3e8>)
 8004e16:	5cd3      	ldrb	r3, [r2, r3]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d105      	bne.n	8004e28 <green_conflict_HW_check+0x35c>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	3350      	adds	r3, #80	@ 0x50
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	4b24      	ldr	r3, [pc, #144]	@ (8004eb8 <green_conflict_HW_check+0x3ec>)
 8004e26:	701a      	strb	r2, [r3, #0]
			for(jk=9;jk<12;jk++)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b0b      	cmp	r3, #11
 8004e32:	dde3      	ble.n	8004dfc <green_conflict_HW_check+0x330>
			}
		}

		if(feedback_SG[9][2]==1)
 8004e34:	4b1e      	ldr	r3, [pc, #120]	@ (8004eb0 <green_conflict_HW_check+0x3e4>)
 8004e36:	7f5b      	ldrb	r3, [r3, #29]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d11e      	bne.n	8004e7a <green_conflict_HW_check+0x3ae>
		{
			for(jk=10;jk<12;jk++)
 8004e3c:	230a      	movs	r3, #10
 8004e3e:	607b      	str	r3, [r7, #4]
 8004e40:	e018      	b.n	8004e74 <green_conflict_HW_check+0x3a8>
			{
				if(feedback_SG[jk][2]==1 && (!flag_bypass_GC[jk-10+63])) status_GC_HW=90+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 8004e42:	491b      	ldr	r1, [pc, #108]	@ (8004eb0 <green_conflict_HW_check+0x3e4>)
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	4413      	add	r3, r2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	3302      	adds	r3, #2
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d10b      	bne.n	8004e6e <green_conflict_HW_check+0x3a2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3335      	adds	r3, #53	@ 0x35
 8004e5a:	4a16      	ldr	r2, [pc, #88]	@ (8004eb4 <green_conflict_HW_check+0x3e8>)
 8004e5c:	5cd3      	ldrb	r3, [r2, r3]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d105      	bne.n	8004e6e <green_conflict_HW_check+0x3a2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	335a      	adds	r3, #90	@ 0x5a
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	4b13      	ldr	r3, [pc, #76]	@ (8004eb8 <green_conflict_HW_check+0x3ec>)
 8004e6c:	701a      	strb	r2, [r3, #0]
			for(jk=10;jk<12;jk++)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3301      	adds	r3, #1
 8004e72:	607b      	str	r3, [r7, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b0b      	cmp	r3, #11
 8004e78:	dde3      	ble.n	8004e42 <green_conflict_HW_check+0x376>
			}
		}

		if(feedback_SG[10][2]==1)
 8004e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb0 <green_conflict_HW_check+0x3e4>)
 8004e7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d10f      	bne.n	8004ea4 <green_conflict_HW_check+0x3d8>
			if(feedback_SG[11][2]==1 && (!flag_bypass_GC[65])) status_GC_HW=100+jk;  //flag_bypass_GC => jika berlogika 0, maka tidak memperbolehkan ada GC,berlogika 1 maka memperbolehkan Green conflict
 8004e84:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb0 <green_conflict_HW_check+0x3e4>)
 8004e86:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d10a      	bne.n	8004ea4 <green_conflict_HW_check+0x3d8>
 8004e8e:	4b09      	ldr	r3, [pc, #36]	@ (8004eb4 <green_conflict_HW_check+0x3e8>)
 8004e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d105      	bne.n	8004ea4 <green_conflict_HW_check+0x3d8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	3364      	adds	r3, #100	@ 0x64
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <green_conflict_HW_check+0x3ec>)
 8004ea2:	701a      	strb	r2, [r3, #0]

	return status_GC_HW;
 8004ea4:	4b04      	ldr	r3, [pc, #16]	@ (8004eb8 <green_conflict_HW_check+0x3ec>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20011bc0 	.word	0x20011bc0
 8004eb4:	2000edac 	.word	0x2000edac
 8004eb8:	20011be4 	.word	0x20011be4

08004ebc <update_second>:

void update_second(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
	static uint8_t loop;

	if(second!=lastSecond) {
 8004ec0:	4b19      	ldr	r3, [pc, #100]	@ (8004f28 <update_second+0x6c>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4b19      	ldr	r3, [pc, #100]	@ (8004f2c <update_second+0x70>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d02a      	beq.n	8004f22 <update_second+0x66>
		lastSecond=second; timerun_cyc++; timerun_phs++;
 8004ecc:	4b16      	ldr	r3, [pc, #88]	@ (8004f28 <update_second+0x6c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a16      	ldr	r2, [pc, #88]	@ (8004f2c <update_second+0x70>)
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	4b16      	ldr	r3, [pc, #88]	@ (8004f30 <update_second+0x74>)
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	4b14      	ldr	r3, [pc, #80]	@ (8004f30 <update_second+0x74>)
 8004ede:	801a      	strh	r2, [r3, #0]
 8004ee0:	4b14      	ldr	r3, [pc, #80]	@ (8004f34 <update_second+0x78>)
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	4b12      	ldr	r3, [pc, #72]	@ (8004f34 <update_second+0x78>)
 8004eea:	801a      	strh	r2, [r3, #0]
		Send_Data_To_Server_Proc();
 8004eec:	f7fd fb8a 	bl	8002604 <Send_Data_To_Server_Proc>

		loop++;
 8004ef0:	4b11      	ldr	r3, [pc, #68]	@ (8004f38 <update_second+0x7c>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8004f38 <update_second+0x7c>)
 8004efa:	701a      	strb	r2, [r3, #0]
		if(loop==2)
 8004efc:	4b0e      	ldr	r3, [pc, #56]	@ (8004f38 <update_second+0x7c>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d10e      	bne.n	8004f22 <update_second+0x66>
		{
			RequestData_Driver(&huart1, 1);
 8004f04:	2101      	movs	r1, #1
 8004f06:	480d      	ldr	r0, [pc, #52]	@ (8004f3c <update_second+0x80>)
 8004f08:	f7fb ffec 	bl	8000ee4 <RequestData_Driver>
			RequestData_Driver(&huart1, 2);
 8004f0c:	2102      	movs	r1, #2
 8004f0e:	480b      	ldr	r0, [pc, #44]	@ (8004f3c <update_second+0x80>)
 8004f10:	f7fb ffe8 	bl	8000ee4 <RequestData_Driver>
			RequestData_Driver(&huart1, 3);
 8004f14:	2103      	movs	r1, #3
 8004f16:	4809      	ldr	r0, [pc, #36]	@ (8004f3c <update_second+0x80>)
 8004f18:	f7fb ffe4 	bl	8000ee4 <RequestData_Driver>
			loop=0;
 8004f1c:	4b06      	ldr	r3, [pc, #24]	@ (8004f38 <update_second+0x7c>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8004f22:	bf00      	nop
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20011c0c 	.word	0x20011c0c
 8004f2c:	20011c10 	.word	0x20011c10
 8004f30:	2000eb04 	.word	0x2000eb04
 8004f34:	2000eb02 	.word	0x2000eb02
 8004f38:	20011be7 	.word	0x20011be7
 8004f3c:	20016b70 	.word	0x20016b70

08004f40 <update_second_FLASH_HOLD_ERROR>:

void update_second_FLASH_HOLD_ERROR(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
	static uint8_t loop;

	if(second!=lastSecond) {
 8004f44:	4b13      	ldr	r3, [pc, #76]	@ (8004f94 <update_second_FLASH_HOLD_ERROR+0x54>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	4b13      	ldr	r3, [pc, #76]	@ (8004f98 <update_second_FLASH_HOLD_ERROR+0x58>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d01e      	beq.n	8004f8e <update_second_FLASH_HOLD_ERROR+0x4e>
		lastSecond=second;
 8004f50:	4b10      	ldr	r3, [pc, #64]	@ (8004f94 <update_second_FLASH_HOLD_ERROR+0x54>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a10      	ldr	r2, [pc, #64]	@ (8004f98 <update_second_FLASH_HOLD_ERROR+0x58>)
 8004f56:	6013      	str	r3, [r2, #0]
		Send_Data_To_Server_Proc();
 8004f58:	f7fd fb54 	bl	8002604 <Send_Data_To_Server_Proc>

		loop++;
 8004f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f9c <update_second_FLASH_HOLD_ERROR+0x5c>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	3301      	adds	r3, #1
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	4b0d      	ldr	r3, [pc, #52]	@ (8004f9c <update_second_FLASH_HOLD_ERROR+0x5c>)
 8004f66:	701a      	strb	r2, [r3, #0]
		if(loop==2)
 8004f68:	4b0c      	ldr	r3, [pc, #48]	@ (8004f9c <update_second_FLASH_HOLD_ERROR+0x5c>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d10e      	bne.n	8004f8e <update_second_FLASH_HOLD_ERROR+0x4e>
		{
			RequestData_Driver(&huart1, 1);
 8004f70:	2101      	movs	r1, #1
 8004f72:	480b      	ldr	r0, [pc, #44]	@ (8004fa0 <update_second_FLASH_HOLD_ERROR+0x60>)
 8004f74:	f7fb ffb6 	bl	8000ee4 <RequestData_Driver>
			RequestData_Driver(&huart1, 2);
 8004f78:	2102      	movs	r1, #2
 8004f7a:	4809      	ldr	r0, [pc, #36]	@ (8004fa0 <update_second_FLASH_HOLD_ERROR+0x60>)
 8004f7c:	f7fb ffb2 	bl	8000ee4 <RequestData_Driver>
			RequestData_Driver(&huart1, 3);
 8004f80:	2103      	movs	r1, #3
 8004f82:	4807      	ldr	r0, [pc, #28]	@ (8004fa0 <update_second_FLASH_HOLD_ERROR+0x60>)
 8004f84:	f7fb ffae 	bl	8000ee4 <RequestData_Driver>
			loop=0;
 8004f88:	4b04      	ldr	r3, [pc, #16]	@ (8004f9c <update_second_FLASH_HOLD_ERROR+0x5c>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8004f8e:	bf00      	nop
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20011c0c 	.word	0x20011c0c
 8004f98:	20011c10 	.word	0x20011c10
 8004f9c:	20011be8 	.word	0x20011be8
 8004fa0:	20016b70 	.word	0x20016b70

08004fa4 <check_extVar_range>:

uint8_t extVar_range_false;
void check_extVar_range(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b089      	sub	sp, #36	@ 0x24
 8004fa8:	af00      	add	r7, sp, #0
	extVar_range_false=0;
 8004faa:	4b7a      	ldr	r3, [pc, #488]	@ (8005194 <check_extVar_range+0x1f0>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	701a      	strb	r2, [r3, #0]
	for(int p=0; p<8; p++)
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	e01a      	b.n	8004fec <check_extVar_range+0x48>
	{
		for(int q=0; q<12;q++)
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	e011      	b.n	8004fe0 <check_extVar_range+0x3c>
		{
			if(SG_set_ext[p][q]>15)
 8004fbc:	4976      	ldr	r1, [pc, #472]	@ (8005198 <check_extVar_range+0x1f4>)
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	18ca      	adds	r2, r1, r3
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	4413      	add	r3, r2
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b0f      	cmp	r3, #15
 8004fd2:	d902      	bls.n	8004fda <check_extVar_range+0x36>
			{
				extVar_range_false=1;
 8004fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8005194 <check_extVar_range+0x1f0>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	701a      	strb	r2, [r3, #0]
		for(int q=0; q<12;q++)
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	61bb      	str	r3, [r7, #24]
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	2b0b      	cmp	r3, #11
 8004fe4:	ddea      	ble.n	8004fbc <check_extVar_range+0x18>
	for(int p=0; p<8; p++)
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	61fb      	str	r3, [r7, #28]
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	2b07      	cmp	r3, #7
 8004ff0:	dde1      	ble.n	8004fb6 <check_extVar_range+0x12>
			}
		}
	}
	for(int pq=0; pq<66; pq++)
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	e00b      	b.n	8005010 <check_extVar_range+0x6c>
	{
		if(flag_bypass_GC_ext[pq]>1)
 8004ff8:	4a68      	ldr	r2, [pc, #416]	@ (800519c <check_extVar_range+0x1f8>)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d902      	bls.n	800500a <check_extVar_range+0x66>
			extVar_range_false =1;
 8005004:	4b63      	ldr	r3, [pc, #396]	@ (8005194 <check_extVar_range+0x1f0>)
 8005006:	2201      	movs	r2, #1
 8005008:	701a      	strb	r2, [r3, #0]
	for(int pq=0; pq<66; pq++)
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	3301      	adds	r3, #1
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2b41      	cmp	r3, #65	@ 0x41
 8005014:	ddf0      	ble.n	8004ff8 <check_extVar_range+0x54>
	}
	for(int pq=0; pq<8; pq++)
 8005016:	2300      	movs	r3, #0
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	e043      	b.n	80050a4 <check_extVar_range+0x100>
	{
		for(int qr=0 ;qr<8; qr++)
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	e029      	b.n	8005076 <check_extVar_range+0xd2>
		{
			if(PLAN_ext[pq][qr].g>300 || PLAN_ext[pq][qr].y>30 || PLAN_ext[pq][qr].r>30)
 8005022:	485f      	ldr	r0, [pc, #380]	@ (80051a0 <check_extVar_range+0x1fc>)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6939      	ldr	r1, [r7, #16]
 8005028:	461a      	mov	r2, r3
 800502a:	0052      	lsls	r2, r2, #1
 800502c:	441a      	add	r2, r3
 800502e:	0053      	lsls	r3, r2, #1
 8005030:	461a      	mov	r2, r3
 8005032:	460b      	mov	r3, r1
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	440b      	add	r3, r1
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	4413      	add	r3, r2
 800503c:	4403      	add	r3, r0
 800503e:	3301      	adds	r3, #1
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b1e      	cmp	r3, #30
 8005044:	d811      	bhi.n	800506a <check_extVar_range+0xc6>
 8005046:	4856      	ldr	r0, [pc, #344]	@ (80051a0 <check_extVar_range+0x1fc>)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6939      	ldr	r1, [r7, #16]
 800504c:	461a      	mov	r2, r3
 800504e:	0052      	lsls	r2, r2, #1
 8005050:	441a      	add	r2, r3
 8005052:	0053      	lsls	r3, r2, #1
 8005054:	461a      	mov	r2, r3
 8005056:	460b      	mov	r3, r1
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	440b      	add	r3, r1
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	4413      	add	r3, r2
 8005060:	4403      	add	r3, r0
 8005062:	3302      	adds	r3, #2
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b1e      	cmp	r3, #30
 8005068:	d902      	bls.n	8005070 <check_extVar_range+0xcc>
				extVar_range_false =1;
 800506a:	4b4a      	ldr	r3, [pc, #296]	@ (8005194 <check_extVar_range+0x1f0>)
 800506c:	2201      	movs	r2, #1
 800506e:	701a      	strb	r2, [r3, #0]
		for(int qr=0 ;qr<8; qr++)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3301      	adds	r3, #1
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b07      	cmp	r3, #7
 800507a:	ddd2      	ble.n	8005022 <check_extVar_range+0x7e>
		}

		if(PLAN_Cycle_ext[pq]>3000 || PLAN_Offset_ext[pq]>180)
 800507c:	4a49      	ldr	r2, [pc, #292]	@ (80051a4 <check_extVar_range+0x200>)
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005084:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8005088:	4293      	cmp	r3, r2
 800508a:	d805      	bhi.n	8005098 <check_extVar_range+0xf4>
 800508c:	4a46      	ldr	r2, [pc, #280]	@ (80051a8 <check_extVar_range+0x204>)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005094:	2bb4      	cmp	r3, #180	@ 0xb4
 8005096:	d902      	bls.n	800509e <check_extVar_range+0xfa>
		{
			extVar_range_false =1;
 8005098:	4b3e      	ldr	r3, [pc, #248]	@ (8005194 <check_extVar_range+0x1f0>)
 800509a:	2201      	movs	r2, #1
 800509c:	701a      	strb	r2, [r3, #0]
	for(int pq=0; pq<8; pq++)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	3301      	adds	r3, #1
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b07      	cmp	r3, #7
 80050a8:	ddb8      	ble.n	800501c <check_extVar_range+0x78>
		}
	}
	for(int hr=0;hr<7;hr++)
 80050aa:	2300      	movs	r3, #0
 80050ac:	60bb      	str	r3, [r7, #8]
 80050ae:	e03d      	b.n	800512c <check_extVar_range+0x188>
	{
		for(int jw=0; jw<9; jw++)
 80050b0:	2300      	movs	r3, #0
 80050b2:	607b      	str	r3, [r7, #4]
 80050b4:	e034      	b.n	8005120 <check_extVar_range+0x17c>
		{
			if(SCHE_ext[hr][jw].jam>23 || SCHE_ext[hr][jw].menit>59 || SCHE_ext[hr][jw].detik>59 || SCHE_ext[hr][jw].plan>8)
 80050b6:	493d      	ldr	r1, [pc, #244]	@ (80051ac <check_extVar_range+0x208>)
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	4613      	mov	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	4413      	add	r3, r2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	4413      	add	r3, r2
 80050c4:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 80050c8:	2b17      	cmp	r3, #23
 80050ca:	d823      	bhi.n	8005114 <check_extVar_range+0x170>
 80050cc:	4937      	ldr	r1, [pc, #220]	@ (80051ac <check_extVar_range+0x208>)
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	4613      	mov	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4413      	add	r3, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	2b3b      	cmp	r3, #59	@ 0x3b
 80050e2:	d817      	bhi.n	8005114 <check_extVar_range+0x170>
 80050e4:	4931      	ldr	r1, [pc, #196]	@ (80051ac <check_extVar_range+0x208>)
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	4613      	mov	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4413      	add	r3, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	789b      	ldrb	r3, [r3, #2]
 80050f8:	2b3b      	cmp	r3, #59	@ 0x3b
 80050fa:	d80b      	bhi.n	8005114 <check_extVar_range+0x170>
 80050fc:	492b      	ldr	r1, [pc, #172]	@ (80051ac <check_extVar_range+0x208>)
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	4613      	mov	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4413      	add	r3, r2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	78db      	ldrb	r3, [r3, #3]
 8005110:	2b08      	cmp	r3, #8
 8005112:	d902      	bls.n	800511a <check_extVar_range+0x176>
				extVar_range_false =1;
 8005114:	4b1f      	ldr	r3, [pc, #124]	@ (8005194 <check_extVar_range+0x1f0>)
 8005116:	2201      	movs	r2, #1
 8005118:	701a      	strb	r2, [r3, #0]
		for(int jw=0; jw<9; jw++)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3301      	adds	r3, #1
 800511e:	607b      	str	r3, [r7, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b08      	cmp	r3, #8
 8005124:	ddc7      	ble.n	80050b6 <check_extVar_range+0x112>
	for(int hr=0;hr<7;hr++)
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	3301      	adds	r3, #1
 800512a:	60bb      	str	r3, [r7, #8]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b06      	cmp	r3, #6
 8005130:	ddbe      	ble.n	80050b0 <check_extVar_range+0x10c>
		}
	}
	for(int n=0; n<35; n++)
 8005132:	2300      	movs	r3, #0
 8005134:	603b      	str	r3, [r7, #0]
 8005136:	e022      	b.n	800517e <check_extVar_range+0x1da>
	{
		if(HARILIBUR_ext[n].tanggal>31 && HARILIBUR_ext[n].bulan>12 && HARILIBUR_ext[n].tahun>99)
 8005138:	491d      	ldr	r1, [pc, #116]	@ (80051b0 <check_extVar_range+0x20c>)
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	4613      	mov	r3, r2
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	4413      	add	r3, r2
 8005142:	440b      	add	r3, r1
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b1f      	cmp	r3, #31
 8005148:	d916      	bls.n	8005178 <check_extVar_range+0x1d4>
 800514a:	4919      	ldr	r1, [pc, #100]	@ (80051b0 <check_extVar_range+0x20c>)
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	4613      	mov	r3, r2
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	4413      	add	r3, r2
 8005154:	440b      	add	r3, r1
 8005156:	3301      	adds	r3, #1
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	2b0c      	cmp	r3, #12
 800515c:	d90c      	bls.n	8005178 <check_extVar_range+0x1d4>
 800515e:	4914      	ldr	r1, [pc, #80]	@ (80051b0 <check_extVar_range+0x20c>)
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	4613      	mov	r3, r2
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	4413      	add	r3, r2
 8005168:	440b      	add	r3, r1
 800516a:	3302      	adds	r3, #2
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b63      	cmp	r3, #99	@ 0x63
 8005170:	d902      	bls.n	8005178 <check_extVar_range+0x1d4>
			extVar_range_false =1;
 8005172:	4b08      	ldr	r3, [pc, #32]	@ (8005194 <check_extVar_range+0x1f0>)
 8005174:	2201      	movs	r2, #1
 8005176:	701a      	strb	r2, [r3, #0]
	for(int n=0; n<35; n++)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	3301      	adds	r3, #1
 800517c:	603b      	str	r3, [r7, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b22      	cmp	r3, #34	@ 0x22
 8005182:	ddd9      	ble.n	8005138 <check_extVar_range+0x194>
	}
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop
 8005188:	3724      	adds	r7, #36	@ 0x24
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	20011be5 	.word	0x20011be5
 8005198:	2000ed4c 	.word	0x2000ed4c
 800519c:	2000edf0 	.word	0x2000edf0
 80051a0:	2000eff4 	.word	0x2000eff4
 80051a4:	2000ee54 	.word	0x2000ee54
 80051a8:	2000ee64 	.word	0x2000ee64
 80051ac:	2000f270 	.word	0x2000f270
 80051b0:	2000f3d8 	.word	0x2000f3d8

080051b4 <check_cycle_plan_used>:

uint8_t plan_setting_false;
void check_cycle_plan_used(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
	plan_setting_false=0;
 80051ba:	4b25      	ldr	r3, [pc, #148]	@ (8005250 <check_cycle_plan_used+0x9c>)
 80051bc:	2200      	movs	r2, #0
 80051be:	701a      	strb	r2, [r3, #0]

	for(int hr=0;hr<7;hr++)
 80051c0:	2300      	movs	r3, #0
 80051c2:	607b      	str	r3, [r7, #4]
 80051c4:	e03a      	b.n	800523c <check_cycle_plan_used+0x88>
	{
		for(int jw=0; jw<9; jw++)
 80051c6:	2300      	movs	r3, #0
 80051c8:	603b      	str	r3, [r7, #0]
 80051ca:	e031      	b.n	8005230 <check_cycle_plan_used+0x7c>
		{
			if((SCHE_ext[hr][jw].plan-1)>=0 && (SCHE_ext[hr][jw].plan-1)<=7)
 80051cc:	4921      	ldr	r1, [pc, #132]	@ (8005254 <check_cycle_plan_used+0xa0>)
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	4413      	add	r3, r2
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	78db      	ldrb	r3, [r3, #3]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01f      	beq.n	8005224 <check_cycle_plan_used+0x70>
 80051e4:	491b      	ldr	r1, [pc, #108]	@ (8005254 <check_cycle_plan_used+0xa0>)
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	4613      	mov	r3, r2
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	4413      	add	r3, r2
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	78db      	ldrb	r3, [r3, #3]
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d813      	bhi.n	8005224 <check_cycle_plan_used+0x70>
			{
				if(PLAN_Cycle_ext[SCHE_ext[hr][jw].plan-1]==0)
 80051fc:	4915      	ldr	r1, [pc, #84]	@ (8005254 <check_cycle_plan_used+0xa0>)
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	4413      	add	r3, r2
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	78db      	ldrb	r3, [r3, #3]
 8005210:	3b01      	subs	r3, #1
 8005212:	4a11      	ldr	r2, [pc, #68]	@ (8005258 <check_cycle_plan_used+0xa4>)
 8005214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d106      	bne.n	800522a <check_cycle_plan_used+0x76>
					plan_setting_false=1;
 800521c:	4b0c      	ldr	r3, [pc, #48]	@ (8005250 <check_cycle_plan_used+0x9c>)
 800521e:	2201      	movs	r2, #1
 8005220:	701a      	strb	r2, [r3, #0]
				if(PLAN_Cycle_ext[SCHE_ext[hr][jw].plan-1]==0)
 8005222:	e002      	b.n	800522a <check_cycle_plan_used+0x76>
			}
			else
				plan_setting_false=1;
 8005224:	4b0a      	ldr	r3, [pc, #40]	@ (8005250 <check_cycle_plan_used+0x9c>)
 8005226:	2201      	movs	r2, #1
 8005228:	701a      	strb	r2, [r3, #0]
		for(int jw=0; jw<9; jw++)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	3301      	adds	r3, #1
 800522e:	603b      	str	r3, [r7, #0]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b08      	cmp	r3, #8
 8005234:	ddca      	ble.n	80051cc <check_cycle_plan_used+0x18>
	for(int hr=0;hr<7;hr++)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3301      	adds	r3, #1
 800523a:	607b      	str	r3, [r7, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b06      	cmp	r3, #6
 8005240:	ddc1      	ble.n	80051c6 <check_cycle_plan_used+0x12>

		}
	}

}
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	20011be6 	.word	0x20011be6
 8005254:	2000f270 	.word	0x2000f270
 8005258:	2000ee54 	.word	0x2000ee54

0800525c <update_setting_from_extVar>:

void update_setting_from_extVar(void)
{
 800525c:	b590      	push	{r4, r7, lr}
 800525e:	b08b      	sub	sp, #44	@ 0x2c
 8005260:	af00      	add	r7, sp, #0
	// Pengecekan Range setiap Variabel yang diterima
	check_extVar_range();
 8005262:	f7ff fe9f 	bl	8004fa4 <check_extVar_range>

	// Pengecekan cycle pada plan yang digunakan pada penjadwalan
	check_cycle_plan_used();
 8005266:	f7ff ffa5 	bl	80051b4 <check_cycle_plan_used>

	if(extVar_range_false ==0 && plan_setting_false==0)
 800526a:	4bb5      	ldr	r3, [pc, #724]	@ (8005540 <update_setting_from_extVar+0x2e4>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	f040 8199 	bne.w	80055a6 <update_setting_from_extVar+0x34a>
 8005274:	4bb3      	ldr	r3, [pc, #716]	@ (8005544 <update_setting_from_extVar+0x2e8>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f040 8194 	bne.w	80055a6 <update_setting_from_extVar+0x34a>
	{
		for(int p=0; p<8; p++)
 800527e:	2300      	movs	r3, #0
 8005280:	627b      	str	r3, [r7, #36]	@ 0x24
 8005282:	e020      	b.n	80052c6 <update_setting_from_extVar+0x6a>
		{
			for(int q=0; q<12;q++)
 8005284:	2300      	movs	r3, #0
 8005286:	623b      	str	r3, [r7, #32]
 8005288:	e017      	b.n	80052ba <update_setting_from_extVar+0x5e>
			{
				SG_set[p][q] = SG_set_ext[p][q];
 800528a:	49af      	ldr	r1, [pc, #700]	@ (8005548 <update_setting_from_extVar+0x2ec>)
 800528c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800528e:	4613      	mov	r3, r2
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	18ca      	adds	r2, r1, r3
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	4413      	add	r3, r2
 800529c:	7818      	ldrb	r0, [r3, #0]
 800529e:	49ab      	ldr	r1, [pc, #684]	@ (800554c <update_setting_from_extVar+0x2f0>)
 80052a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a2:	4613      	mov	r3, r2
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	18ca      	adds	r2, r1, r3
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	4413      	add	r3, r2
 80052b0:	4602      	mov	r2, r0
 80052b2:	701a      	strb	r2, [r3, #0]
			for(int q=0; q<12;q++)
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	3301      	adds	r3, #1
 80052b8:	623b      	str	r3, [r7, #32]
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	2b0b      	cmp	r3, #11
 80052be:	dde4      	ble.n	800528a <update_setting_from_extVar+0x2e>
		for(int p=0; p<8; p++)
 80052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c2:	3301      	adds	r3, #1
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	2b07      	cmp	r3, #7
 80052ca:	dddb      	ble.n	8005284 <update_setting_from_extVar+0x28>
			}
		}

		for(int pq=0; pq<66; pq++)
 80052cc:	2300      	movs	r3, #0
 80052ce:	61fb      	str	r3, [r7, #28]
 80052d0:	e00b      	b.n	80052ea <update_setting_from_extVar+0x8e>
		{
			flag_bypass_GC[pq]=flag_bypass_GC_ext[pq];
 80052d2:	4a9f      	ldr	r2, [pc, #636]	@ (8005550 <update_setting_from_extVar+0x2f4>)
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	4413      	add	r3, r2
 80052d8:	7819      	ldrb	r1, [r3, #0]
 80052da:	4a9e      	ldr	r2, [pc, #632]	@ (8005554 <update_setting_from_extVar+0x2f8>)
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	4413      	add	r3, r2
 80052e0:	460a      	mov	r2, r1
 80052e2:	701a      	strb	r2, [r3, #0]
		for(int pq=0; pq<66; pq++)
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	3301      	adds	r3, #1
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	2b41      	cmp	r3, #65	@ 0x41
 80052ee:	ddf0      	ble.n	80052d2 <update_setting_from_extVar+0x76>
		}

		for(int pq=0,sum_cycle=0; pq<8; pq++)
 80052f0:	2300      	movs	r3, #0
 80052f2:	61bb      	str	r3, [r7, #24]
 80052f4:	2300      	movs	r3, #0
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	e0f7      	b.n	80054ea <update_setting_from_extVar+0x28e>
		{
			for(int qr=0 ;qr<8; qr++)
 80052fa:	2300      	movs	r3, #0
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	e0dd      	b.n	80054bc <update_setting_from_extVar+0x260>
			{
				PLAN[pq][qr].g = PLAN_ext[pq][qr].g;
 8005300:	4895      	ldr	r0, [pc, #596]	@ (8005558 <update_setting_from_extVar+0x2fc>)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	69b9      	ldr	r1, [r7, #24]
 8005306:	461a      	mov	r2, r3
 8005308:	0052      	lsls	r2, r2, #1
 800530a:	441a      	add	r2, r3
 800530c:	0053      	lsls	r3, r2, #1
 800530e:	461a      	mov	r2, r3
 8005310:	460b      	mov	r3, r1
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	440b      	add	r3, r1
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	4413      	add	r3, r2
 800531a:	4403      	add	r3, r0
 800531c:	781c      	ldrb	r4, [r3, #0]
 800531e:	488f      	ldr	r0, [pc, #572]	@ (800555c <update_setting_from_extVar+0x300>)
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	69b9      	ldr	r1, [r7, #24]
 8005324:	461a      	mov	r2, r3
 8005326:	0052      	lsls	r2, r2, #1
 8005328:	441a      	add	r2, r3
 800532a:	0053      	lsls	r3, r2, #1
 800532c:	461a      	mov	r2, r3
 800532e:	460b      	mov	r3, r1
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	440b      	add	r3, r1
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	4413      	add	r3, r2
 8005338:	4403      	add	r3, r0
 800533a:	4622      	mov	r2, r4
 800533c:	701a      	strb	r2, [r3, #0]
				PLAN[pq][qr].y = PLAN_ext[pq][qr].y;
 800533e:	4886      	ldr	r0, [pc, #536]	@ (8005558 <update_setting_from_extVar+0x2fc>)
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	69b9      	ldr	r1, [r7, #24]
 8005344:	461a      	mov	r2, r3
 8005346:	0052      	lsls	r2, r2, #1
 8005348:	441a      	add	r2, r3
 800534a:	0053      	lsls	r3, r2, #1
 800534c:	461a      	mov	r2, r3
 800534e:	460b      	mov	r3, r1
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	440b      	add	r3, r1
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	4413      	add	r3, r2
 8005358:	4403      	add	r3, r0
 800535a:	3301      	adds	r3, #1
 800535c:	781c      	ldrb	r4, [r3, #0]
 800535e:	487f      	ldr	r0, [pc, #508]	@ (800555c <update_setting_from_extVar+0x300>)
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	69b9      	ldr	r1, [r7, #24]
 8005364:	461a      	mov	r2, r3
 8005366:	0052      	lsls	r2, r2, #1
 8005368:	441a      	add	r2, r3
 800536a:	0053      	lsls	r3, r2, #1
 800536c:	461a      	mov	r2, r3
 800536e:	460b      	mov	r3, r1
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	440b      	add	r3, r1
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	4413      	add	r3, r2
 8005378:	4403      	add	r3, r0
 800537a:	3301      	adds	r3, #1
 800537c:	4622      	mov	r2, r4
 800537e:	701a      	strb	r2, [r3, #0]
				PLAN[pq][qr].r = PLAN_ext[pq][qr].r;
 8005380:	4875      	ldr	r0, [pc, #468]	@ (8005558 <update_setting_from_extVar+0x2fc>)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	69b9      	ldr	r1, [r7, #24]
 8005386:	461a      	mov	r2, r3
 8005388:	0052      	lsls	r2, r2, #1
 800538a:	441a      	add	r2, r3
 800538c:	0053      	lsls	r3, r2, #1
 800538e:	461a      	mov	r2, r3
 8005390:	460b      	mov	r3, r1
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	440b      	add	r3, r1
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	4413      	add	r3, r2
 800539a:	4403      	add	r3, r0
 800539c:	3302      	adds	r3, #2
 800539e:	781c      	ldrb	r4, [r3, #0]
 80053a0:	486e      	ldr	r0, [pc, #440]	@ (800555c <update_setting_from_extVar+0x300>)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	69b9      	ldr	r1, [r7, #24]
 80053a6:	461a      	mov	r2, r3
 80053a8:	0052      	lsls	r2, r2, #1
 80053aa:	441a      	add	r2, r3
 80053ac:	0053      	lsls	r3, r2, #1
 80053ae:	461a      	mov	r2, r3
 80053b0:	460b      	mov	r3, r1
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	440b      	add	r3, r1
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	4413      	add	r3, r2
 80053ba:	4403      	add	r3, r0
 80053bc:	3302      	adds	r3, #2
 80053be:	4622      	mov	r2, r4
 80053c0:	701a      	strb	r2, [r3, #0]

				PLAN_ext[pq][qr].fase_cycle=PLAN_ext[pq][qr].g+PLAN_ext[pq][qr].y+PLAN_ext[pq][qr].r;
 80053c2:	4865      	ldr	r0, [pc, #404]	@ (8005558 <update_setting_from_extVar+0x2fc>)
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	69b9      	ldr	r1, [r7, #24]
 80053c8:	461a      	mov	r2, r3
 80053ca:	0052      	lsls	r2, r2, #1
 80053cc:	441a      	add	r2, r3
 80053ce:	0053      	lsls	r3, r2, #1
 80053d0:	461a      	mov	r2, r3
 80053d2:	460b      	mov	r3, r1
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	440b      	add	r3, r1
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	4413      	add	r3, r2
 80053dc:	4403      	add	r3, r0
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	461c      	mov	r4, r3
 80053e2:	485d      	ldr	r0, [pc, #372]	@ (8005558 <update_setting_from_extVar+0x2fc>)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	69b9      	ldr	r1, [r7, #24]
 80053e8:	461a      	mov	r2, r3
 80053ea:	0052      	lsls	r2, r2, #1
 80053ec:	441a      	add	r2, r3
 80053ee:	0053      	lsls	r3, r2, #1
 80053f0:	461a      	mov	r2, r3
 80053f2:	460b      	mov	r3, r1
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	440b      	add	r3, r1
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	4413      	add	r3, r2
 80053fc:	4403      	add	r3, r0
 80053fe:	3301      	adds	r3, #1
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	4423      	add	r3, r4
 8005404:	b298      	uxth	r0, r3
 8005406:	4c54      	ldr	r4, [pc, #336]	@ (8005558 <update_setting_from_extVar+0x2fc>)
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	69b9      	ldr	r1, [r7, #24]
 800540c:	461a      	mov	r2, r3
 800540e:	0052      	lsls	r2, r2, #1
 8005410:	441a      	add	r2, r3
 8005412:	0053      	lsls	r3, r2, #1
 8005414:	461a      	mov	r2, r3
 8005416:	460b      	mov	r3, r1
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	440b      	add	r3, r1
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	4413      	add	r3, r2
 8005420:	4423      	add	r3, r4
 8005422:	3302      	adds	r3, #2
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	4403      	add	r3, r0
 8005428:	b29c      	uxth	r4, r3
 800542a:	484b      	ldr	r0, [pc, #300]	@ (8005558 <update_setting_from_extVar+0x2fc>)
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	69b9      	ldr	r1, [r7, #24]
 8005430:	461a      	mov	r2, r3
 8005432:	0052      	lsls	r2, r2, #1
 8005434:	441a      	add	r2, r3
 8005436:	0053      	lsls	r3, r2, #1
 8005438:	461a      	mov	r2, r3
 800543a:	460b      	mov	r3, r1
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	440b      	add	r3, r1
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	4413      	add	r3, r2
 8005444:	4403      	add	r3, r0
 8005446:	3304      	adds	r3, #4
 8005448:	4622      	mov	r2, r4
 800544a:	801a      	strh	r2, [r3, #0]

				PLAN[pq][qr].fase_cycle = PLAN_ext[pq][qr].fase_cycle ;
 800544c:	4842      	ldr	r0, [pc, #264]	@ (8005558 <update_setting_from_extVar+0x2fc>)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	69b9      	ldr	r1, [r7, #24]
 8005452:	461a      	mov	r2, r3
 8005454:	0052      	lsls	r2, r2, #1
 8005456:	441a      	add	r2, r3
 8005458:	0053      	lsls	r3, r2, #1
 800545a:	461a      	mov	r2, r3
 800545c:	460b      	mov	r3, r1
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	440b      	add	r3, r1
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	4413      	add	r3, r2
 8005466:	4403      	add	r3, r0
 8005468:	3304      	adds	r3, #4
 800546a:	881c      	ldrh	r4, [r3, #0]
 800546c:	483b      	ldr	r0, [pc, #236]	@ (800555c <update_setting_from_extVar+0x300>)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	69b9      	ldr	r1, [r7, #24]
 8005472:	461a      	mov	r2, r3
 8005474:	0052      	lsls	r2, r2, #1
 8005476:	441a      	add	r2, r3
 8005478:	0053      	lsls	r3, r2, #1
 800547a:	461a      	mov	r2, r3
 800547c:	460b      	mov	r3, r1
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	440b      	add	r3, r1
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	4413      	add	r3, r2
 8005486:	4403      	add	r3, r0
 8005488:	3304      	adds	r3, #4
 800548a:	4622      	mov	r2, r4
 800548c:	801a      	strh	r2, [r3, #0]

				sum_cycle += PLAN_ext[pq][qr].fase_cycle;
 800548e:	4832      	ldr	r0, [pc, #200]	@ (8005558 <update_setting_from_extVar+0x2fc>)
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	69b9      	ldr	r1, [r7, #24]
 8005494:	461a      	mov	r2, r3
 8005496:	0052      	lsls	r2, r2, #1
 8005498:	441a      	add	r2, r3
 800549a:	0053      	lsls	r3, r2, #1
 800549c:	461a      	mov	r2, r3
 800549e:	460b      	mov	r3, r1
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	440b      	add	r3, r1
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	4413      	add	r3, r2
 80054a8:	4403      	add	r3, r0
 80054aa:	3304      	adds	r3, #4
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	4413      	add	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]
			for(int qr=0 ;qr<8; qr++)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	3301      	adds	r3, #1
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2b07      	cmp	r3, #7
 80054c0:	f77f af1e 	ble.w	8005300 <update_setting_from_extVar+0xa4>
			}
			PLAN_Cycle[pq] = PLAN_Cycle_ext[pq];
 80054c4:	4a26      	ldr	r2, [pc, #152]	@ (8005560 <update_setting_from_extVar+0x304>)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80054cc:	4a25      	ldr	r2, [pc, #148]	@ (8005564 <update_setting_from_extVar+0x308>)
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			PLAN_Offset [pq] = PLAN_Offset_ext[pq];
 80054d4:	4a24      	ldr	r2, [pc, #144]	@ (8005568 <update_setting_from_extVar+0x30c>)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80054dc:	4a23      	ldr	r2, [pc, #140]	@ (800556c <update_setting_from_extVar+0x310>)
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int pq=0,sum_cycle=0; pq<8; pq++)
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	3301      	adds	r3, #1
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	2b07      	cmp	r3, #7
 80054ee:	f77f af04 	ble.w	80052fa <update_setting_from_extVar+0x9e>
		}

		for(int hr=0;hr<7;hr++)
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	e01d      	b.n	8005534 <update_setting_from_extVar+0x2d8>
		{
			for(int jw=0; jw<9; jw++)
 80054f8:	2300      	movs	r3, #0
 80054fa:	60bb      	str	r3, [r7, #8]
 80054fc:	e014      	b.n	8005528 <update_setting_from_extVar+0x2cc>
			{
				SCHE[hr][jw] = SCHE_ext[hr][jw];
 80054fe:	481c      	ldr	r0, [pc, #112]	@ (8005570 <update_setting_from_extVar+0x314>)
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4613      	mov	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	4413      	add	r3, r2
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	1899      	adds	r1, r3, r2
 800550c:	4c19      	ldr	r4, [pc, #100]	@ (8005574 <update_setting_from_extVar+0x318>)
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	4613      	mov	r3, r2
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	4413      	add	r3, r2
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	4413      	add	r3, r2
 800551a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800551e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
			for(int jw=0; jw<9; jw++)
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	3301      	adds	r3, #1
 8005526:	60bb      	str	r3, [r7, #8]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b08      	cmp	r3, #8
 800552c:	dde7      	ble.n	80054fe <update_setting_from_extVar+0x2a2>
		for(int hr=0;hr<7;hr++)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	3301      	adds	r3, #1
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b06      	cmp	r3, #6
 8005538:	ddde      	ble.n	80054f8 <update_setting_from_extVar+0x29c>
			}
		}

		for(int n=0; n<35; n++)
 800553a:	2300      	movs	r3, #0
 800553c:	607b      	str	r3, [r7, #4]
 800553e:	e02f      	b.n	80055a0 <update_setting_from_extVar+0x344>
 8005540:	20011be5 	.word	0x20011be5
 8005544:	20011be6 	.word	0x20011be6
 8005548:	2000ed4c 	.word	0x2000ed4c
 800554c:	2000ecec 	.word	0x2000ecec
 8005550:	2000edf0 	.word	0x2000edf0
 8005554:	2000edac 	.word	0x2000edac
 8005558:	2000eff4 	.word	0x2000eff4
 800555c:	2000ee74 	.word	0x2000ee74
 8005560:	2000ee54 	.word	0x2000ee54
 8005564:	2000ee34 	.word	0x2000ee34
 8005568:	2000ee64 	.word	0x2000ee64
 800556c:	2000ee44 	.word	0x2000ee44
 8005570:	2000f174 	.word	0x2000f174
 8005574:	2000f270 	.word	0x2000f270
		{
			HARILIBUR[n] = HARILIBUR_ext[n];
 8005578:	490d      	ldr	r1, [pc, #52]	@ (80055b0 <update_setting_from_extVar+0x354>)
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	4613      	mov	r3, r2
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	4413      	add	r3, r2
 8005582:	18c8      	adds	r0, r1, r3
 8005584:	490b      	ldr	r1, [pc, #44]	@ (80055b4 <update_setting_from_extVar+0x358>)
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	4613      	mov	r3, r2
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	4413      	add	r3, r2
 800558e:	18ca      	adds	r2, r1, r3
 8005590:	4603      	mov	r3, r0
 8005592:	8811      	ldrh	r1, [r2, #0]
 8005594:	7892      	ldrb	r2, [r2, #2]
 8005596:	8019      	strh	r1, [r3, #0]
 8005598:	709a      	strb	r2, [r3, #2]
		for(int n=0; n<35; n++)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3301      	adds	r3, #1
 800559e:	607b      	str	r3, [r7, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b22      	cmp	r3, #34	@ 0x22
 80055a4:	dde8      	ble.n	8005578 <update_setting_from_extVar+0x31c>
		}
	}

}
 80055a6:	bf00      	nop
 80055a8:	372c      	adds	r7, #44	@ 0x2c
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd90      	pop	{r4, r7, pc}
 80055ae:	bf00      	nop
 80055b0:	2000f36c 	.word	0x2000f36c
 80055b4:	2000f3d8 	.word	0x2000f3d8

080055b8 <set_RTC>:


}

void set_RTC(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	af00      	add	r7, sp, #0
	sDate.Date = server_date;
 80055bc:	4b54      	ldr	r3, [pc, #336]	@ (8005710 <set_RTC+0x158>)
 80055be:	781a      	ldrb	r2, [r3, #0]
 80055c0:	4b54      	ldr	r3, [pc, #336]	@ (8005714 <set_RTC+0x15c>)
 80055c2:	709a      	strb	r2, [r3, #2]
	sDate.Month = server_month;
 80055c4:	4b54      	ldr	r3, [pc, #336]	@ (8005718 <set_RTC+0x160>)
 80055c6:	781a      	ldrb	r2, [r3, #0]
 80055c8:	4b52      	ldr	r3, [pc, #328]	@ (8005714 <set_RTC+0x15c>)
 80055ca:	705a      	strb	r2, [r3, #1]
	sDate.Year = server_year;
 80055cc:	4b53      	ldr	r3, [pc, #332]	@ (800571c <set_RTC+0x164>)
 80055ce:	781a      	ldrb	r2, [r3, #0]
 80055d0:	4b50      	ldr	r3, [pc, #320]	@ (8005714 <set_RTC+0x15c>)
 80055d2:	70da      	strb	r2, [r3, #3]
	sDate.WeekDay = server_weekday;
 80055d4:	4b52      	ldr	r3, [pc, #328]	@ (8005720 <set_RTC+0x168>)
 80055d6:	781a      	ldrb	r2, [r3, #0]
 80055d8:	4b4e      	ldr	r3, [pc, #312]	@ (8005714 <set_RTC+0x15c>)
 80055da:	701a      	strb	r2, [r3, #0]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80055dc:	2200      	movs	r2, #0
 80055de:	494d      	ldr	r1, [pc, #308]	@ (8005714 <set_RTC+0x15c>)
 80055e0:	4850      	ldr	r0, [pc, #320]	@ (8005724 <set_RTC+0x16c>)
 80055e2:	f004 fc30 	bl	8009e46 <HAL_RTC_SetDate>


	Offset_Time.DayLightSaving = 0;
 80055e6:	4b50      	ldr	r3, [pc, #320]	@ (8005728 <set_RTC+0x170>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	60da      	str	r2, [r3, #12]
	Offset_Time.Hours = server_hour%24;
 80055ec:	4b4f      	ldr	r3, [pc, #316]	@ (800572c <set_RTC+0x174>)
 80055ee:	781a      	ldrb	r2, [r3, #0]
 80055f0:	4b4f      	ldr	r3, [pc, #316]	@ (8005730 <set_RTC+0x178>)
 80055f2:	fba3 1302 	umull	r1, r3, r3, r2
 80055f6:	0919      	lsrs	r1, r3, #4
 80055f8:	460b      	mov	r3, r1
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	440b      	add	r3, r1
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	b2da      	uxtb	r2, r3
 8005604:	4b48      	ldr	r3, [pc, #288]	@ (8005728 <set_RTC+0x170>)
 8005606:	701a      	strb	r2, [r3, #0]
	Offset_Time.StoreOperation = 0;
 8005608:	4b47      	ldr	r3, [pc, #284]	@ (8005728 <set_RTC+0x170>)
 800560a:	2200      	movs	r2, #0
 800560c:	611a      	str	r2, [r3, #16]
	Offset_Time.TimeFormat = 0;
 800560e:	4b46      	ldr	r3, [pc, #280]	@ (8005728 <set_RTC+0x170>)
 8005610:	2200      	movs	r2, #0
 8005612:	70da      	strb	r2, [r3, #3]
	Offset_Time.Minutes = ((server_minute + (PLAN_Cycle[Selected_PLAN])/60))%60;
 8005614:	4b47      	ldr	r3, [pc, #284]	@ (8005734 <set_RTC+0x17c>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	4619      	mov	r1, r3
 800561a:	4b47      	ldr	r3, [pc, #284]	@ (8005738 <set_RTC+0x180>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	4b46      	ldr	r3, [pc, #280]	@ (800573c <set_RTC+0x184>)
 8005622:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005626:	4a46      	ldr	r2, [pc, #280]	@ (8005740 <set_RTC+0x188>)
 8005628:	fba2 2303 	umull	r2, r3, r2, r3
 800562c:	095b      	lsrs	r3, r3, #5
 800562e:	b29b      	uxth	r3, r3
 8005630:	18ca      	adds	r2, r1, r3
 8005632:	4b43      	ldr	r3, [pc, #268]	@ (8005740 <set_RTC+0x188>)
 8005634:	fb83 1302 	smull	r1, r3, r3, r2
 8005638:	4413      	add	r3, r2
 800563a:	1159      	asrs	r1, r3, #5
 800563c:	17d3      	asrs	r3, r2, #31
 800563e:	1ac9      	subs	r1, r1, r3
 8005640:	460b      	mov	r3, r1
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	1a5b      	subs	r3, r3, r1
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	1ad1      	subs	r1, r2, r3
 800564a:	b2ca      	uxtb	r2, r1
 800564c:	4b36      	ldr	r3, [pc, #216]	@ (8005728 <set_RTC+0x170>)
 800564e:	705a      	strb	r2, [r3, #1]
	if(PLAN_Cycle[Selected_PLAN]%60 + server_second>59)
 8005650:	4b39      	ldr	r3, [pc, #228]	@ (8005738 <set_RTC+0x180>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	4b39      	ldr	r3, [pc, #228]	@ (800573c <set_RTC+0x184>)
 8005658:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800565c:	4b38      	ldr	r3, [pc, #224]	@ (8005740 <set_RTC+0x188>)
 800565e:	fba3 1302 	umull	r1, r3, r3, r2
 8005662:	0959      	lsrs	r1, r3, #5
 8005664:	460b      	mov	r3, r1
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	1a5b      	subs	r3, r3, r1
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	b29b      	uxth	r3, r3
 8005670:	461a      	mov	r2, r3
 8005672:	4b34      	ldr	r3, [pc, #208]	@ (8005744 <set_RTC+0x18c>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	4413      	add	r3, r2
 8005678:	2b3b      	cmp	r3, #59	@ 0x3b
 800567a:	dd2d      	ble.n	80056d8 <set_RTC+0x120>
	{
		Offset_Time.Minutes = Offset_Time.Minutes + PLAN_Cycle[Selected_PLAN]/60 + 1;
 800567c:	4b2a      	ldr	r3, [pc, #168]	@ (8005728 <set_RTC+0x170>)
 800567e:	785a      	ldrb	r2, [r3, #1]
 8005680:	4b2d      	ldr	r3, [pc, #180]	@ (8005738 <set_RTC+0x180>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	4619      	mov	r1, r3
 8005686:	4b2d      	ldr	r3, [pc, #180]	@ (800573c <set_RTC+0x184>)
 8005688:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800568c:	492c      	ldr	r1, [pc, #176]	@ (8005740 <set_RTC+0x188>)
 800568e:	fba1 1303 	umull	r1, r3, r1, r3
 8005692:	095b      	lsrs	r3, r3, #5
 8005694:	b29b      	uxth	r3, r3
 8005696:	b2db      	uxtb	r3, r3
 8005698:	4413      	add	r3, r2
 800569a:	b2db      	uxtb	r3, r3
 800569c:	3301      	adds	r3, #1
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	4b21      	ldr	r3, [pc, #132]	@ (8005728 <set_RTC+0x170>)
 80056a2:	705a      	strb	r2, [r3, #1]
		Offset_Time.Seconds = PLAN_Cycle[Selected_PLAN]%60 + server_second - 60;
 80056a4:	4b24      	ldr	r3, [pc, #144]	@ (8005738 <set_RTC+0x180>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	461a      	mov	r2, r3
 80056aa:	4b24      	ldr	r3, [pc, #144]	@ (800573c <set_RTC+0x184>)
 80056ac:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80056b0:	4b23      	ldr	r3, [pc, #140]	@ (8005740 <set_RTC+0x188>)
 80056b2:	fba3 1302 	umull	r1, r3, r3, r2
 80056b6:	0959      	lsrs	r1, r3, #5
 80056b8:	460b      	mov	r3, r1
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	1a5b      	subs	r3, r3, r1
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005744 <set_RTC+0x18c>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	4413      	add	r3, r2
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	3b3c      	subs	r3, #60	@ 0x3c
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	4b15      	ldr	r3, [pc, #84]	@ (8005728 <set_RTC+0x170>)
 80056d4:	709a      	strb	r2, [r3, #2]
 80056d6:	e00c      	b.n	80056f2 <set_RTC+0x13a>
	}
	else
		Offset_Time.Seconds = PLAN_Cycle[Selected_PLAN] + server_second;
 80056d8:	4b17      	ldr	r3, [pc, #92]	@ (8005738 <set_RTC+0x180>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	461a      	mov	r2, r3
 80056de:	4b17      	ldr	r3, [pc, #92]	@ (800573c <set_RTC+0x184>)
 80056e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	4b17      	ldr	r3, [pc, #92]	@ (8005744 <set_RTC+0x18c>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	4413      	add	r3, r2
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005728 <set_RTC+0x170>)
 80056f0:	709a      	strb	r2, [r3, #2]

	Offset_Time.SubSeconds = sTime.SubSeconds;
 80056f2:	4b15      	ldr	r3, [pc, #84]	@ (8005748 <set_RTC+0x190>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	4a0c      	ldr	r2, [pc, #48]	@ (8005728 <set_RTC+0x170>)
 80056f8:	6053      	str	r3, [r2, #4]
	Offset_Time.SecondFraction = sTime.SecondFraction;
 80056fa:	4b13      	ldr	r3, [pc, #76]	@ (8005748 <set_RTC+0x190>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005728 <set_RTC+0x170>)
 8005700:	6093      	str	r3, [r2, #8]
	HAL_RTC_SetTime(&hrtc, &Offset_Time, RTC_FORMAT_BIN);
 8005702:	2200      	movs	r2, #0
 8005704:	4908      	ldr	r1, [pc, #32]	@ (8005728 <set_RTC+0x170>)
 8005706:	4807      	ldr	r0, [pc, #28]	@ (8005724 <set_RTC+0x16c>)
 8005708:	f004 faa5 	bl	8009c56 <HAL_RTC_SetTime>
}
 800570c:	bf00      	nop
 800570e:	bd80      	pop	{r7, pc}
 8005710:	2000eafa 	.word	0x2000eafa
 8005714:	2000eb44 	.word	0x2000eb44
 8005718:	2000eafb 	.word	0x2000eafb
 800571c:	2000eafc 	.word	0x2000eafc
 8005720:	2000eaf9 	.word	0x2000eaf9
 8005724:	20011bec 	.word	0x20011bec
 8005728:	2000eb1c 	.word	0x2000eb1c
 800572c:	2000eafd 	.word	0x2000eafd
 8005730:	aaaaaaab 	.word	0xaaaaaaab
 8005734:	2000eafe 	.word	0x2000eafe
 8005738:	2000f48a 	.word	0x2000f48a
 800573c:	2000ee34 	.word	0x2000ee34
 8005740:	88888889 	.word	0x88888889
 8005744:	2000eaff 	.word	0x2000eaff
 8005748:	2000eb08 	.word	0x2000eb08

0800574c <get_json_unsignedint>:

void get_json_unsignedint(char json[], char var[], unsigned int *output){
 800574c:	b590      	push	{r4, r7, lr}
 800574e:	b091      	sub	sp, #68	@ 0x44
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
		char *string1, *string2, *string3;
		char nilai[10];
		char nilai1[10];
		int i,j,k;
		string1 = strstr(json,var);
 8005758:	68b9      	ldr	r1, [r7, #8]
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f006 fc90 	bl	800c080 <strstr>
 8005760:	63b8      	str	r0, [r7, #56]	@ 0x38
		string2 = strstr(string1, ":");
 8005762:	213a      	movs	r1, #58	@ 0x3a
 8005764:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005766:	f006 fc0f 	bl	800bf88 <strchr>
 800576a:	6378      	str	r0, [r7, #52]	@ 0x34
		string3 = strstr(string1, ",");
 800576c:	212c      	movs	r1, #44	@ 0x2c
 800576e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005770:	f006 fc0a 	bl	800bf88 <strchr>
 8005774:	6338      	str	r0, [r7, #48]	@ 0x30
		i = (strlen(string1)-strlen(string2))+2;
 8005776:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005778:	f7fa fd2a 	bl	80001d0 <strlen>
 800577c:	4604      	mov	r4, r0
 800577e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005780:	f7fa fd26 	bl	80001d0 <strlen>
 8005784:	4603      	mov	r3, r0
 8005786:	1ae3      	subs	r3, r4, r3
 8005788:	3302      	adds	r3, #2
 800578a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		j = (strlen(string2)-strlen(string3))-3;
 800578c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800578e:	f7fa fd1f 	bl	80001d0 <strlen>
 8005792:	4604      	mov	r4, r0
 8005794:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005796:	f7fa fd1b 	bl	80001d0 <strlen>
 800579a:	4603      	mov	r3, r0
 800579c:	1ae3      	subs	r3, r4, r3
 800579e:	3b03      	subs	r3, #3
 80057a0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(j>0){k = j;}else{k = 0;}
 80057a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	dd02      	ble.n	80057ae <get_json_unsignedint+0x62>
 80057a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057ac:	e001      	b.n	80057b2 <get_json_unsignedint+0x66>
 80057ae:	2300      	movs	r3, #0
 80057b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		strncpy (nilai1,string1+i,k);
 80057b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057b6:	18d1      	adds	r1, r2, r3
 80057b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057ba:	f107 0310 	add.w	r3, r7, #16
 80057be:	4618      	mov	r0, r3
 80057c0:	f006 fbef 	bl	800bfa2 <strncpy>
		if(string1 != NULL){*output = atoi(nilai1);}else{output=output;}
 80057c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d008      	beq.n	80057dc <get_json_unsignedint+0x90>
 80057ca:	f107 0310 	add.w	r3, r7, #16
 80057ce:	4618      	mov	r0, r3
 80057d0:	f006 f9aa 	bl	800bb28 <atoi>
 80057d4:	4603      	mov	r3, r0
 80057d6:	461a      	mov	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	601a      	str	r2, [r3, #0]
		memset(nilai,0,sizeof nilai1);
 80057dc:	f107 031c 	add.w	r3, r7, #28
 80057e0:	220a      	movs	r2, #10
 80057e2:	2100      	movs	r1, #0
 80057e4:	4618      	mov	r0, r3
 80057e6:	f006 fbb8 	bl	800bf5a <memset>
}
 80057ea:	bf00      	nop
 80057ec:	3744      	adds	r7, #68	@ 0x44
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd90      	pop	{r4, r7, pc}
	...

080057f4 <Setting_Initial_PLAN_Phase_2>:

//For Testing Only
void Setting_Initial_PLAN_Phase_2(void)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
	PLAN[0][0].g = 15;
 80057fa:	4b60      	ldr	r3, [pc, #384]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 80057fc:	220f      	movs	r2, #15
 80057fe:	701a      	strb	r2, [r3, #0]
	PLAN[0][0].r = 2;
 8005800:	4b5e      	ldr	r3, [pc, #376]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005802:	2202      	movs	r2, #2
 8005804:	709a      	strb	r2, [r3, #2]
	PLAN[0][0].y = 3;
 8005806:	4b5d      	ldr	r3, [pc, #372]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005808:	2203      	movs	r2, #3
 800580a:	705a      	strb	r2, [r3, #1]
	PLAN[0][0].fase_cycle =PLAN[0][0].g + PLAN[0][0].r + PLAN[0][0].y;
 800580c:	4b5b      	ldr	r3, [pc, #364]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	461a      	mov	r2, r3
 8005812:	4b5a      	ldr	r3, [pc, #360]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005814:	789b      	ldrb	r3, [r3, #2]
 8005816:	4413      	add	r3, r2
 8005818:	b29b      	uxth	r3, r3
 800581a:	4a58      	ldr	r2, [pc, #352]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 800581c:	7852      	ldrb	r2, [r2, #1]
 800581e:	4413      	add	r3, r2
 8005820:	b29a      	uxth	r2, r3
 8005822:	4b56      	ldr	r3, [pc, #344]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005824:	809a      	strh	r2, [r3, #4]

	PLAN[0][1].g = 15;
 8005826:	4b55      	ldr	r3, [pc, #340]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005828:	220f      	movs	r2, #15
 800582a:	719a      	strb	r2, [r3, #6]
	PLAN[0][1].r = 2;
 800582c:	4b53      	ldr	r3, [pc, #332]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 800582e:	2202      	movs	r2, #2
 8005830:	721a      	strb	r2, [r3, #8]
	PLAN[0][1].y = 3;
 8005832:	4b52      	ldr	r3, [pc, #328]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005834:	2203      	movs	r2, #3
 8005836:	71da      	strb	r2, [r3, #7]
	PLAN[0][1].fase_cycle =PLAN[0][1].g + PLAN[0][1].r + PLAN[0][1].y;
 8005838:	4b50      	ldr	r3, [pc, #320]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 800583a:	799b      	ldrb	r3, [r3, #6]
 800583c:	461a      	mov	r2, r3
 800583e:	4b4f      	ldr	r3, [pc, #316]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005840:	7a1b      	ldrb	r3, [r3, #8]
 8005842:	4413      	add	r3, r2
 8005844:	b29b      	uxth	r3, r3
 8005846:	4a4d      	ldr	r2, [pc, #308]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005848:	79d2      	ldrb	r2, [r2, #7]
 800584a:	4413      	add	r3, r2
 800584c:	b29a      	uxth	r2, r3
 800584e:	4b4b      	ldr	r3, [pc, #300]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005850:	815a      	strh	r2, [r3, #10]

	PLAN[0][2].g = 15;
 8005852:	4b4a      	ldr	r3, [pc, #296]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005854:	220f      	movs	r2, #15
 8005856:	731a      	strb	r2, [r3, #12]
	PLAN[0][2].r = 2;
 8005858:	4b48      	ldr	r3, [pc, #288]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 800585a:	2202      	movs	r2, #2
 800585c:	739a      	strb	r2, [r3, #14]
	PLAN[0][2].y = 3;
 800585e:	4b47      	ldr	r3, [pc, #284]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005860:	2203      	movs	r2, #3
 8005862:	735a      	strb	r2, [r3, #13]
	PLAN[0][2].fase_cycle =PLAN[0][2].g + PLAN[0][2].r + PLAN[0][2].y;
 8005864:	4b45      	ldr	r3, [pc, #276]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005866:	7b1b      	ldrb	r3, [r3, #12]
 8005868:	461a      	mov	r2, r3
 800586a:	4b44      	ldr	r3, [pc, #272]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 800586c:	7b9b      	ldrb	r3, [r3, #14]
 800586e:	4413      	add	r3, r2
 8005870:	b29b      	uxth	r3, r3
 8005872:	4a42      	ldr	r2, [pc, #264]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005874:	7b52      	ldrb	r2, [r2, #13]
 8005876:	4413      	add	r3, r2
 8005878:	b29a      	uxth	r2, r3
 800587a:	4b40      	ldr	r3, [pc, #256]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 800587c:	821a      	strh	r2, [r3, #16]

	PLAN[0][3].g = 15;
 800587e:	4b3f      	ldr	r3, [pc, #252]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005880:	220f      	movs	r2, #15
 8005882:	749a      	strb	r2, [r3, #18]
	PLAN[0][3].r = 2;
 8005884:	4b3d      	ldr	r3, [pc, #244]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005886:	2202      	movs	r2, #2
 8005888:	751a      	strb	r2, [r3, #20]
	PLAN[0][3].y = 3;
 800588a:	4b3c      	ldr	r3, [pc, #240]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 800588c:	2203      	movs	r2, #3
 800588e:	74da      	strb	r2, [r3, #19]
	PLAN[0][3].fase_cycle =PLAN[0][3].g + PLAN[0][3].r + PLAN[0][3].y;
 8005890:	4b3a      	ldr	r3, [pc, #232]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005892:	7c9b      	ldrb	r3, [r3, #18]
 8005894:	461a      	mov	r2, r3
 8005896:	4b39      	ldr	r3, [pc, #228]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005898:	7d1b      	ldrb	r3, [r3, #20]
 800589a:	4413      	add	r3, r2
 800589c:	b29b      	uxth	r3, r3
 800589e:	4a37      	ldr	r2, [pc, #220]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 80058a0:	7cd2      	ldrb	r2, [r2, #19]
 80058a2:	4413      	add	r3, r2
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	4b35      	ldr	r3, [pc, #212]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 80058a8:	82da      	strh	r2, [r3, #22]

	PLAN[0][4].g = 15;
 80058aa:	4b34      	ldr	r3, [pc, #208]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 80058ac:	220f      	movs	r2, #15
 80058ae:	761a      	strb	r2, [r3, #24]
	PLAN[0][4].r = 2;
 80058b0:	4b32      	ldr	r3, [pc, #200]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 80058b2:	2202      	movs	r2, #2
 80058b4:	769a      	strb	r2, [r3, #26]
	PLAN[0][4].y = 3;
 80058b6:	4b31      	ldr	r3, [pc, #196]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 80058b8:	2203      	movs	r2, #3
 80058ba:	765a      	strb	r2, [r3, #25]
	PLAN[0][4].fase_cycle =PLAN[0][4].g + PLAN[0][4].r + PLAN[0][4].y;
 80058bc:	4b2f      	ldr	r3, [pc, #188]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 80058be:	7e1b      	ldrb	r3, [r3, #24]
 80058c0:	461a      	mov	r2, r3
 80058c2:	4b2e      	ldr	r3, [pc, #184]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 80058c4:	7e9b      	ldrb	r3, [r3, #26]
 80058c6:	4413      	add	r3, r2
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	4a2c      	ldr	r2, [pc, #176]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 80058cc:	7e52      	ldrb	r2, [r2, #25]
 80058ce:	4413      	add	r3, r2
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	4b2a      	ldr	r3, [pc, #168]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 80058d4:	839a      	strh	r2, [r3, #28]

	PLAN[0][5].g = 15;
 80058d6:	4b29      	ldr	r3, [pc, #164]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 80058d8:	220f      	movs	r2, #15
 80058da:	779a      	strb	r2, [r3, #30]
	PLAN[0][5].r = 2;
 80058dc:	4b27      	ldr	r3, [pc, #156]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 2020 	strb.w	r2, [r3, #32]
	PLAN[0][5].y = 3;
 80058e4:	4b25      	ldr	r3, [pc, #148]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 80058e6:	2203      	movs	r2, #3
 80058e8:	77da      	strb	r2, [r3, #31]
	PLAN[0][5].fase_cycle =PLAN[0][5].g + PLAN[0][5].r + PLAN[0][5].y;
 80058ea:	4b24      	ldr	r3, [pc, #144]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 80058ec:	7f9b      	ldrb	r3, [r3, #30]
 80058ee:	461a      	mov	r2, r3
 80058f0:	4b22      	ldr	r3, [pc, #136]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 80058f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058f6:	4413      	add	r3, r2
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	4a20      	ldr	r2, [pc, #128]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 80058fc:	7fd2      	ldrb	r2, [r2, #31]
 80058fe:	4413      	add	r3, r2
 8005900:	b29a      	uxth	r2, r3
 8005902:	4b1e      	ldr	r3, [pc, #120]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005904:	845a      	strh	r2, [r3, #34]	@ 0x22

	PLAN[0][6].g = 15;
 8005906:	4b1d      	ldr	r3, [pc, #116]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005908:	220f      	movs	r2, #15
 800590a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	PLAN[0][6].r = 2;
 800590e:	4b1b      	ldr	r3, [pc, #108]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005910:	2202      	movs	r2, #2
 8005912:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	PLAN[0][6].y = 3;
 8005916:	4b19      	ldr	r3, [pc, #100]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005918:	2203      	movs	r2, #3
 800591a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	PLAN[0][6].fase_cycle =PLAN[0][6].g + PLAN[0][6].r + PLAN[0][6].y;
 800591e:	4b17      	ldr	r3, [pc, #92]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005920:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005924:	461a      	mov	r2, r3
 8005926:	4b15      	ldr	r3, [pc, #84]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005928:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800592c:	4413      	add	r3, r2
 800592e:	b29b      	uxth	r3, r3
 8005930:	4a12      	ldr	r2, [pc, #72]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005932:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8005936:	4413      	add	r3, r2
 8005938:	b29a      	uxth	r2, r3
 800593a:	4b10      	ldr	r3, [pc, #64]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 800593c:	851a      	strh	r2, [r3, #40]	@ 0x28

	PLAN[0][7].g = 15;
 800593e:	4b0f      	ldr	r3, [pc, #60]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005940:	220f      	movs	r2, #15
 8005942:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	PLAN[0][7].r = 2;
 8005946:	4b0d      	ldr	r3, [pc, #52]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005948:	2202      	movs	r2, #2
 800594a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	PLAN[0][7].y = 3;
 800594e:	4b0b      	ldr	r3, [pc, #44]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005950:	2203      	movs	r2, #3
 8005952:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	PLAN[0][7].fase_cycle =PLAN[0][7].g + PLAN[0][7].r + PLAN[0][7].y;
 8005956:	4b09      	ldr	r3, [pc, #36]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005958:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800595c:	461a      	mov	r2, r3
 800595e:	4b07      	ldr	r3, [pc, #28]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005960:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005964:	4413      	add	r3, r2
 8005966:	b29b      	uxth	r3, r3
 8005968:	4a04      	ldr	r2, [pc, #16]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 800596a:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 800596e:	4413      	add	r3, r2
 8005970:	b29a      	uxth	r2, r3
 8005972:	4b02      	ldr	r3, [pc, #8]	@ (800597c <Setting_Initial_PLAN_Phase_2+0x188>)
 8005974:	85da      	strh	r2, [r3, #46]	@ 0x2e

	for(int jl=0; jl<=7; jl++)
 8005976:	2300      	movs	r3, #0
 8005978:	607b      	str	r3, [r7, #4]
 800597a:	e013      	b.n	80059a4 <Setting_Initial_PLAN_Phase_2+0x1b0>
 800597c:	2000ee74 	.word	0x2000ee74
	{
		PLAN_Cycle[0]+=PLAN[0][jl].fase_cycle;
 8005980:	4bbf      	ldr	r3, [pc, #764]	@ (8005c80 <Setting_Initial_PLAN_Phase_2+0x48c>)
 8005982:	8819      	ldrh	r1, [r3, #0]
 8005984:	48bf      	ldr	r0, [pc, #764]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	4613      	mov	r3, r2
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	4413      	add	r3, r2
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	4403      	add	r3, r0
 8005992:	3304      	adds	r3, #4
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	440b      	add	r3, r1
 8005998:	b29a      	uxth	r2, r3
 800599a:	4bb9      	ldr	r3, [pc, #740]	@ (8005c80 <Setting_Initial_PLAN_Phase_2+0x48c>)
 800599c:	801a      	strh	r2, [r3, #0]
	for(int jl=0; jl<=7; jl++)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3301      	adds	r3, #1
 80059a2:	607b      	str	r3, [r7, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b07      	cmp	r3, #7
 80059a8:	ddea      	ble.n	8005980 <Setting_Initial_PLAN_Phase_2+0x18c>
	}
	PLAN_Offset[0]=3;
 80059aa:	4bb7      	ldr	r3, [pc, #732]	@ (8005c88 <Setting_Initial_PLAN_Phase_2+0x494>)
 80059ac:	2203      	movs	r2, #3
 80059ae:	801a      	strh	r2, [r3, #0]

	PLAN[1][0].g = 10;
 80059b0:	4bb4      	ldr	r3, [pc, #720]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 80059b2:	220a      	movs	r2, #10
 80059b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	PLAN[1][0].r = 4;
 80059b8:	4bb2      	ldr	r3, [pc, #712]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 80059ba:	2204      	movs	r2, #4
 80059bc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	PLAN[1][0].y = 3;
 80059c0:	4bb0      	ldr	r3, [pc, #704]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 80059c2:	2203      	movs	r2, #3
 80059c4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	PLAN[1][0].fase_cycle =PLAN[1][0].g + PLAN[1][0].r + PLAN[1][0].y;
 80059c8:	4bae      	ldr	r3, [pc, #696]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 80059ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80059ce:	461a      	mov	r2, r3
 80059d0:	4bac      	ldr	r3, [pc, #688]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 80059d2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80059d6:	4413      	add	r3, r2
 80059d8:	b29b      	uxth	r3, r3
 80059da:	4aaa      	ldr	r2, [pc, #680]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 80059dc:	f892 2031 	ldrb.w	r2, [r2, #49]	@ 0x31
 80059e0:	4413      	add	r3, r2
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	4ba7      	ldr	r3, [pc, #668]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 80059e6:	869a      	strh	r2, [r3, #52]	@ 0x34

	PLAN[1][1].g = 10;
 80059e8:	4ba6      	ldr	r3, [pc, #664]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 80059ea:	220a      	movs	r2, #10
 80059ec:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	PLAN[1][1].r = 4;
 80059f0:	4ba4      	ldr	r3, [pc, #656]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 80059f2:	2204      	movs	r2, #4
 80059f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	PLAN[1][1].y = 3;
 80059f8:	4ba2      	ldr	r3, [pc, #648]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 80059fa:	2203      	movs	r2, #3
 80059fc:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
	PLAN[1][1].fase_cycle =PLAN[1][1].g + PLAN[1][1].r + PLAN[1][1].y;
 8005a00:	4ba0      	ldr	r3, [pc, #640]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005a02:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005a06:	461a      	mov	r2, r3
 8005a08:	4b9e      	ldr	r3, [pc, #632]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005a0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005a0e:	4413      	add	r3, r2
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	4a9c      	ldr	r2, [pc, #624]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005a14:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 8005a18:	4413      	add	r3, r2
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	4b99      	ldr	r3, [pc, #612]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005a1e:	875a      	strh	r2, [r3, #58]	@ 0x3a

	PLAN[1][2].g = 10;
 8005a20:	4b98      	ldr	r3, [pc, #608]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005a22:	220a      	movs	r2, #10
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	PLAN[1][2].r = 4;
 8005a28:	4b96      	ldr	r3, [pc, #600]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005a2a:	2204      	movs	r2, #4
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	PLAN[1][2].y = 3;
 8005a30:	4b94      	ldr	r3, [pc, #592]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005a32:	2203      	movs	r2, #3
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	PLAN[1][2].fase_cycle =PLAN[1][2].g + PLAN[1][2].r + PLAN[1][2].y;
 8005a38:	4b92      	ldr	r3, [pc, #584]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a3e:	461a      	mov	r2, r3
 8005a40:	4b90      	ldr	r3, [pc, #576]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005a42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a46:	4413      	add	r3, r2
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	4a8e      	ldr	r2, [pc, #568]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005a4c:	f892 203d 	ldrb.w	r2, [r2, #61]	@ 0x3d
 8005a50:	4413      	add	r3, r2
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	4b8b      	ldr	r3, [pc, #556]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005a56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

	PLAN[1][3].g = 10;
 8005a5a:	4b8a      	ldr	r3, [pc, #552]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005a5c:	220a      	movs	r2, #10
 8005a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	PLAN[1][3].r = 4;
 8005a62:	4b88      	ldr	r3, [pc, #544]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005a64:	2204      	movs	r2, #4
 8005a66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	PLAN[1][3].y = 3;
 8005a6a:	4b86      	ldr	r3, [pc, #536]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	PLAN[1][3].fase_cycle =PLAN[1][3].g + PLAN[1][3].r + PLAN[1][1].y;
 8005a72:	4b84      	ldr	r3, [pc, #528]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005a74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4b82      	ldr	r3, [pc, #520]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a80:	4413      	add	r3, r2
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	4a7f      	ldr	r2, [pc, #508]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005a86:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 8005a8a:	4413      	add	r3, r2
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	4b7d      	ldr	r3, [pc, #500]	@ (8005c84 <Setting_Initial_PLAN_Phase_2+0x490>)
 8005a90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46


	/*
	 * Uji 4
	 */
					SG_set[0][0]=mode_K3;
 8005a94:	4b7d      	ldr	r3, [pc, #500]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005a96:	2208      	movs	r2, #8
 8005a98:	701a      	strb	r2, [r3, #0]
					SG_set[0][1]=mode_K3;
 8005a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	705a      	strb	r2, [r3, #1]
					SG_set[0][2]=mode_K3;
 8005aa0:	4b7a      	ldr	r3, [pc, #488]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005aa2:	2208      	movs	r2, #8
 8005aa4:	709a      	strb	r2, [r3, #2]
					SG_set[0][3]=mode_R1;
 8005aa6:	4b79      	ldr	r3, [pc, #484]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	70da      	strb	r2, [r3, #3]
					SG_set[0][4]=mode_R1;
 8005aac:	4b77      	ldr	r3, [pc, #476]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005aae:	2201      	movs	r2, #1
 8005ab0:	711a      	strb	r2, [r3, #4]
					SG_set[0][5]=mode_R1;
 8005ab2:	4b76      	ldr	r3, [pc, #472]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	715a      	strb	r2, [r3, #5]
					SG_set[0][6]=mode_R1;
 8005ab8:	4b74      	ldr	r3, [pc, #464]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005aba:	2201      	movs	r2, #1
 8005abc:	719a      	strb	r2, [r3, #6]
					SG_set[0][7]=mode_R1;
 8005abe:	4b73      	ldr	r3, [pc, #460]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	71da      	strb	r2, [r3, #7]
					SG_set[0][8]=mode_R1;
 8005ac4:	4b71      	ldr	r3, [pc, #452]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	721a      	strb	r2, [r3, #8]
					SG_set[0][9]=mode_R1;
 8005aca:	4b70      	ldr	r3, [pc, #448]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005acc:	2201      	movs	r2, #1
 8005ace:	725a      	strb	r2, [r3, #9]
					SG_set[0][10]=mode_R1;
 8005ad0:	4b6e      	ldr	r3, [pc, #440]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	729a      	strb	r2, [r3, #10]
					SG_set[0][11]=mode_R1;
 8005ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005ad8:	2201      	movs	r2, #1
 8005ada:	72da      	strb	r2, [r3, #11]

					SG_set[1][0]=mode_K3;
 8005adc:	4b6b      	ldr	r3, [pc, #428]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005ade:	2208      	movs	r2, #8
 8005ae0:	731a      	strb	r2, [r3, #12]
					SG_set[1][1]=mode_R1;
 8005ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	735a      	strb	r2, [r3, #13]
					SG_set[1][2]=mode_R1;
 8005ae8:	4b68      	ldr	r3, [pc, #416]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005aea:	2201      	movs	r2, #1
 8005aec:	739a      	strb	r2, [r3, #14]
					SG_set[1][3]=mode_R1;
 8005aee:	4b67      	ldr	r3, [pc, #412]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	73da      	strb	r2, [r3, #15]
					SG_set[1][4]=mode_R1;
 8005af4:	4b65      	ldr	r3, [pc, #404]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005af6:	2201      	movs	r2, #1
 8005af8:	741a      	strb	r2, [r3, #16]
					SG_set[1][5]=mode_R1;
 8005afa:	4b64      	ldr	r3, [pc, #400]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	745a      	strb	r2, [r3, #17]
					SG_set[1][6]=mode_R1;
 8005b00:	4b62      	ldr	r3, [pc, #392]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	749a      	strb	r2, [r3, #18]
					SG_set[1][7]=mode_R1;
 8005b06:	4b61      	ldr	r3, [pc, #388]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b08:	2201      	movs	r2, #1
 8005b0a:	74da      	strb	r2, [r3, #19]
					SG_set[1][8]=mode_R1;
 8005b0c:	4b5f      	ldr	r3, [pc, #380]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	751a      	strb	r2, [r3, #20]
					SG_set[1][9]=mode_K3;
 8005b12:	4b5e      	ldr	r3, [pc, #376]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b14:	2208      	movs	r2, #8
 8005b16:	755a      	strb	r2, [r3, #21]
					SG_set[1][10]=mode_K3;
 8005b18:	4b5c      	ldr	r3, [pc, #368]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b1a:	2208      	movs	r2, #8
 8005b1c:	759a      	strb	r2, [r3, #22]
					SG_set[1][11]=mode_K3;
 8005b1e:	4b5b      	ldr	r3, [pc, #364]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b20:	2208      	movs	r2, #8
 8005b22:	75da      	strb	r2, [r3, #23]

					SG_set[2][0]=mode_R1;
 8005b24:	4b59      	ldr	r3, [pc, #356]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b26:	2201      	movs	r2, #1
 8005b28:	761a      	strb	r2, [r3, #24]
					SG_set[2][1]=mode_R1;
 8005b2a:	4b58      	ldr	r3, [pc, #352]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	765a      	strb	r2, [r3, #25]
					SG_set[2][2]=mode_R1;
 8005b30:	4b56      	ldr	r3, [pc, #344]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b32:	2201      	movs	r2, #1
 8005b34:	769a      	strb	r2, [r3, #26]
					SG_set[2][3]=mode_R1;
 8005b36:	4b55      	ldr	r3, [pc, #340]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b38:	2201      	movs	r2, #1
 8005b3a:	76da      	strb	r2, [r3, #27]
					SG_set[2][4]=mode_R1;
 8005b3c:	4b53      	ldr	r3, [pc, #332]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b3e:	2201      	movs	r2, #1
 8005b40:	771a      	strb	r2, [r3, #28]
					SG_set[2][5]=mode_R1;
 8005b42:	4b52      	ldr	r3, [pc, #328]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b44:	2201      	movs	r2, #1
 8005b46:	775a      	strb	r2, [r3, #29]
					SG_set[2][6]=mode_K3;
 8005b48:	4b50      	ldr	r3, [pc, #320]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b4a:	2208      	movs	r2, #8
 8005b4c:	779a      	strb	r2, [r3, #30]
					SG_set[2][7]=mode_K3;
 8005b4e:	4b4f      	ldr	r3, [pc, #316]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b50:	2208      	movs	r2, #8
 8005b52:	77da      	strb	r2, [r3, #31]
					SG_set[2][8]=mode_K3;
 8005b54:	4b4d      	ldr	r3, [pc, #308]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b56:	2208      	movs	r2, #8
 8005b58:	f883 2020 	strb.w	r2, [r3, #32]
					SG_set[2][9]=mode_K3;
 8005b5c:	4b4b      	ldr	r3, [pc, #300]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b5e:	2208      	movs	r2, #8
 8005b60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					SG_set[2][10]=mode_R1;
 8005b64:	4b49      	ldr	r3, [pc, #292]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
					SG_set[2][11]=mode_R1;
 8005b6c:	4b47      	ldr	r3, [pc, #284]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

					SG_set[3][0]=mode_R1;
 8005b74:	4b45      	ldr	r3, [pc, #276]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					SG_set[3][1]=mode_R1;
 8005b7c:	4b43      	ldr	r3, [pc, #268]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
					SG_set[3][2]=mode_R1;
 8005b84:	4b41      	ldr	r3, [pc, #260]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
					SG_set[3][3]=mode_K3;
 8005b8c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b8e:	2208      	movs	r2, #8
 8005b90:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
					SG_set[3][4]=mode_K3;
 8005b94:	4b3d      	ldr	r3, [pc, #244]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b96:	2208      	movs	r2, #8
 8005b98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					SG_set[3][5]=mode_K3;
 8005b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
					SG_set[3][6]=mode_K3;
 8005ba4:	4b39      	ldr	r3, [pc, #228]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005ba6:	2208      	movs	r2, #8
 8005ba8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
					SG_set[3][7]=mode_R1;
 8005bac:	4b37      	ldr	r3, [pc, #220]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
					SG_set[3][8]=mode_R1;
 8005bb4:	4b35      	ldr	r3, [pc, #212]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
					SG_set[3][9]=mode_R1;
 8005bbc:	4b33      	ldr	r3, [pc, #204]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
					SG_set[3][10]=mode_R1;
 8005bc4:	4b31      	ldr	r3, [pc, #196]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
					SG_set[3][11]=mode_R1;
 8005bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
//							SG_set[3][10]=mode_R4;
//							SG_set[3][11]=mode_R4;



	SG_set[4][0]=mode_NonActive;
 8005bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	SG_set[4][1]=mode_NonActive;
 8005bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	SG_set[4][2]=mode_NonActive;
 8005be4:	4b29      	ldr	r3, [pc, #164]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	SG_set[4][3]=mode_NonActive;
 8005bec:	4b27      	ldr	r3, [pc, #156]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	SG_set[4][4]=mode_NonActive;
 8005bf4:	4b25      	ldr	r3, [pc, #148]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	SG_set[4][5]=mode_NonActive;
 8005bfc:	4b23      	ldr	r3, [pc, #140]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	SG_set[4][6]=mode_NonActive;
 8005c04:	4b21      	ldr	r3, [pc, #132]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	SG_set[4][7]=mode_NonActive;
 8005c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
	SG_set[4][8]=mode_NonActive;
 8005c14:	4b1d      	ldr	r3, [pc, #116]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	SG_set[4][9]=mode_NonActive;
 8005c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	SG_set[4][10]=mode_NonActive;
 8005c24:	4b19      	ldr	r3, [pc, #100]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	SG_set[4][11]=mode_NonActive;
 8005c2c:	4b17      	ldr	r3, [pc, #92]	@ (8005c8c <Setting_Initial_PLAN_Phase_2+0x498>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

	flag_bypass_GC[0]=1;
 8005c34:	4b16      	ldr	r3, [pc, #88]	@ (8005c90 <Setting_Initial_PLAN_Phase_2+0x49c>)
 8005c36:	2201      	movs	r2, #1
 8005c38:	701a      	strb	r2, [r3, #0]
	flag_bypass_GC[1]=1;
 8005c3a:	4b15      	ldr	r3, [pc, #84]	@ (8005c90 <Setting_Initial_PLAN_Phase_2+0x49c>)
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	705a      	strb	r2, [r3, #1]
	flag_bypass_GC[8]=1;
 8005c40:	4b13      	ldr	r3, [pc, #76]	@ (8005c90 <Setting_Initial_PLAN_Phase_2+0x49c>)
 8005c42:	2201      	movs	r2, #1
 8005c44:	721a      	strb	r2, [r3, #8]
	flag_bypass_GC[9]=1;
 8005c46:	4b12      	ldr	r3, [pc, #72]	@ (8005c90 <Setting_Initial_PLAN_Phase_2+0x49c>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	725a      	strb	r2, [r3, #9]
	flag_bypass_GC[10]=1;
 8005c4c:	4b10      	ldr	r3, [pc, #64]	@ (8005c90 <Setting_Initial_PLAN_Phase_2+0x49c>)
 8005c4e:	2201      	movs	r2, #1
 8005c50:	729a      	strb	r2, [r3, #10]
	flag_bypass_GC[11]=1;
 8005c52:	4b0f      	ldr	r3, [pc, #60]	@ (8005c90 <Setting_Initial_PLAN_Phase_2+0x49c>)
 8005c54:	2201      	movs	r2, #1
 8005c56:	72da      	strb	r2, [r3, #11]

	flag_bypass_GC[31]=1;
 8005c58:	4b0d      	ldr	r3, [pc, #52]	@ (8005c90 <Setting_Initial_PLAN_Phase_2+0x49c>)
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	77da      	strb	r2, [r3, #31]
	flag_bypass_GC[32]=1;
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c90 <Setting_Initial_PLAN_Phase_2+0x49c>)
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2020 	strb.w	r2, [r3, #32]
	flag_bypass_GC[30]=1;
 8005c66:	4b0a      	ldr	r3, [pc, #40]	@ (8005c90 <Setting_Initial_PLAN_Phase_2+0x49c>)
 8005c68:	2201      	movs	r2, #1
 8005c6a:	779a      	strb	r2, [r3, #30]
	flag_bypass_GC[38]=1;
 8005c6c:	4b08      	ldr	r3, [pc, #32]	@ (8005c90 <Setting_Initial_PLAN_Phase_2+0x49c>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	flag_bypass_GC[39]=1;
 8005c74:	4b06      	ldr	r3, [pc, #24]	@ (8005c90 <Setting_Initial_PLAN_Phase_2+0x49c>)
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8005c7c:	e00a      	b.n	8005c94 <Setting_Initial_PLAN_Phase_2+0x4a0>
 8005c7e:	bf00      	nop
 8005c80:	2000ee34 	.word	0x2000ee34
 8005c84:	2000ee74 	.word	0x2000ee74
 8005c88:	2000ee44 	.word	0x2000ee44
 8005c8c:	2000ecec 	.word	0x2000ecec
 8005c90:	2000edac 	.word	0x2000edac
	flag_bypass_GC[45]=1;
 8005c94:	4b1b      	ldr	r3, [pc, #108]	@ (8005d04 <Setting_Initial_PLAN_Phase_2+0x510>)
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

	flag_bypass_GC[51]=1;
 8005c9c:	4b19      	ldr	r3, [pc, #100]	@ (8005d04 <Setting_Initial_PLAN_Phase_2+0x510>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	flag_bypass_GC[52]=1;
 8005ca4:	4b17      	ldr	r3, [pc, #92]	@ (8005d04 <Setting_Initial_PLAN_Phase_2+0x510>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	flag_bypass_GC[53]=1;
 8005cac:	4b15      	ldr	r3, [pc, #84]	@ (8005d04 <Setting_Initial_PLAN_Phase_2+0x510>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	flag_bypass_GC[56]=1;
 8005cb4:	4b13      	ldr	r3, [pc, #76]	@ (8005d04 <Setting_Initial_PLAN_Phase_2+0x510>)
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	flag_bypass_GC[57]=1;
 8005cbc:	4b11      	ldr	r3, [pc, #68]	@ (8005d04 <Setting_Initial_PLAN_Phase_2+0x510>)
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	flag_bypass_GC[60]=1;
 8005cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005d04 <Setting_Initial_PLAN_Phase_2+0x510>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	flag_bypass_GC[63]=1;
 8005ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8005d04 <Setting_Initial_PLAN_Phase_2+0x510>)
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
	flag_bypass_GC[64]=1;
 8005cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005d04 <Setting_Initial_PLAN_Phase_2+0x510>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	flag_bypass_GC[65]=1;
 8005cdc:	4b09      	ldr	r3, [pc, #36]	@ (8005d04 <Setting_Initial_PLAN_Phase_2+0x510>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	Selected_PLAN=1;
 8005ce4:	4b08      	ldr	r3, [pc, #32]	@ (8005d08 <Setting_Initial_PLAN_Phase_2+0x514>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	701a      	strb	r2, [r3, #0]
	PLAN_Cycle[1]=68;
 8005cea:	4b08      	ldr	r3, [pc, #32]	@ (8005d0c <Setting_Initial_PLAN_Phase_2+0x518>)
 8005cec:	2244      	movs	r2, #68	@ 0x44
 8005cee:	805a      	strh	r2, [r3, #2]
	PLAN_Offset[1]=1;
 8005cf0:	4b07      	ldr	r3, [pc, #28]	@ (8005d10 <Setting_Initial_PLAN_Phase_2+0x51c>)
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	805a      	strh	r2, [r3, #2]

}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	2000edac 	.word	0x2000edac
 8005d08:	2000f48a 	.word	0x2000f48a
 8005d0c:	2000ee34 	.word	0x2000ee34
 8005d10:	2000ee44 	.word	0x2000ee44

08005d14 <kedip_startup>:

void kedip_startup(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
//	sprintf(send,"{\"C1\":%d,\"C2\":%d,\"C3\":%d,\"C4\":%d,\"C5\":%d,\"C6\":%d,\"C7\":%d,\"C8\":%d,\"C9\":%d,\"C10\":%d,\"C11\":%d,\"C12\":%d,\"C13\":%d,\"C14\":%d,\"C15\":%d}\n",
//								elapsed_time_green[0],elapsed_time_green[1],elapsed_time_green[2],elapsed_time_green[3],elapsed_time_green[4],elapsed_time_green[5],elapsed_time_green[6],elapsed_time_green[7],
//								elapsed_time_green[8],elapsed_time_green[9],elapsed_time_green[10],elapsed_time_green[11], PLAN_Cycle[Selected_PLAN]-timerun_cyc, Selected_PLAN+1, Running_Phase+1);
//	HAL_UART_Transmit(&huart1, (uint8_t *)send, strlen(send), HAL_MAX_DELAY);

	for(ulang=0;ulang<3;ulang++)  //Untuk trial kedip=3
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	e054      	b.n	8005dca <kedip_startup+0xb6>
	{
		for(int jk=0;jk<12; jk++)
 8005d20:	2300      	movs	r3, #0
 8005d22:	60bb      	str	r3, [r7, #8]
 8005d24:	e01c      	b.n	8005d60 <kedip_startup+0x4c>
		{
			SG[jk][0]=0;
 8005d26:	4941      	ldr	r1, [pc, #260]	@ (8005e2c <kedip_startup+0x118>)
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	4413      	add	r3, r2
 8005d30:	440b      	add	r3, r1
 8005d32:	2200      	movs	r2, #0
 8005d34:	701a      	strb	r2, [r3, #0]
			SG[jk][1]=1;
 8005d36:	493d      	ldr	r1, [pc, #244]	@ (8005e2c <kedip_startup+0x118>)
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	4413      	add	r3, r2
 8005d40:	440b      	add	r3, r1
 8005d42:	3301      	adds	r3, #1
 8005d44:	2201      	movs	r2, #1
 8005d46:	701a      	strb	r2, [r3, #0]
			SG[jk][2]=0;
 8005d48:	4938      	ldr	r1, [pc, #224]	@ (8005e2c <kedip_startup+0x118>)
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	4413      	add	r3, r2
 8005d52:	440b      	add	r3, r1
 8005d54:	3302      	adds	r3, #2
 8005d56:	2200      	movs	r2, #0
 8005d58:	701a      	strb	r2, [r3, #0]
		for(int jk=0;jk<12; jk++)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	60bb      	str	r3, [r7, #8]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b0b      	cmp	r3, #11
 8005d64:	dddf      	ble.n	8005d26 <kedip_startup+0x12>
		}
		update_logic_lampu();
 8005d66:	f000 f863 	bl	8005e30 <update_logic_lampu>
		//send_lamp_sig();
		HAL_Delay(500);
 8005d6a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005d6e:	f002 fa1f 	bl	80081b0 <HAL_Delay>
		for(int jk=0;jk<12; jk++)
 8005d72:	2300      	movs	r3, #0
 8005d74:	607b      	str	r3, [r7, #4]
 8005d76:	e01c      	b.n	8005db2 <kedip_startup+0x9e>
		{
			SG[jk][0]=0;
 8005d78:	492c      	ldr	r1, [pc, #176]	@ (8005e2c <kedip_startup+0x118>)
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	4413      	add	r3, r2
 8005d82:	440b      	add	r3, r1
 8005d84:	2200      	movs	r2, #0
 8005d86:	701a      	strb	r2, [r3, #0]
			SG[jk][1]=0;
 8005d88:	4928      	ldr	r1, [pc, #160]	@ (8005e2c <kedip_startup+0x118>)
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	4413      	add	r3, r2
 8005d92:	440b      	add	r3, r1
 8005d94:	3301      	adds	r3, #1
 8005d96:	2200      	movs	r2, #0
 8005d98:	701a      	strb	r2, [r3, #0]
			SG[jk][2]=0;
 8005d9a:	4924      	ldr	r1, [pc, #144]	@ (8005e2c <kedip_startup+0x118>)
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	4413      	add	r3, r2
 8005da4:	440b      	add	r3, r1
 8005da6:	3302      	adds	r3, #2
 8005da8:	2200      	movs	r2, #0
 8005daa:	701a      	strb	r2, [r3, #0]
		for(int jk=0;jk<12; jk++)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3301      	adds	r3, #1
 8005db0:	607b      	str	r3, [r7, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b0b      	cmp	r3, #11
 8005db6:	dddf      	ble.n	8005d78 <kedip_startup+0x64>
		}
		update_logic_lampu();
 8005db8:	f000 f83a 	bl	8005e30 <update_logic_lampu>
		//send_lamp_sig();
		HAL_Delay(500);
 8005dbc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005dc0:	f002 f9f6 	bl	80081b0 <HAL_Delay>
	for(ulang=0;ulang<3;ulang++)  //Untuk trial kedip=3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	dda7      	ble.n	8005d20 <kedip_startup+0xc>
	}
	for(int jk=0;jk<12; jk++)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	603b      	str	r3, [r7, #0]
 8005dd4:	e01c      	b.n	8005e10 <kedip_startup+0xfc>
	{
		SG[jk][0]=1;
 8005dd6:	4915      	ldr	r1, [pc, #84]	@ (8005e2c <kedip_startup+0x118>)
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	4413      	add	r3, r2
 8005de0:	440b      	add	r3, r1
 8005de2:	2201      	movs	r2, #1
 8005de4:	701a      	strb	r2, [r3, #0]
		SG[jk][1]=0;
 8005de6:	4911      	ldr	r1, [pc, #68]	@ (8005e2c <kedip_startup+0x118>)
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	4613      	mov	r3, r2
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	4413      	add	r3, r2
 8005df0:	440b      	add	r3, r1
 8005df2:	3301      	adds	r3, #1
 8005df4:	2200      	movs	r2, #0
 8005df6:	701a      	strb	r2, [r3, #0]
		SG[jk][2]=0;
 8005df8:	490c      	ldr	r1, [pc, #48]	@ (8005e2c <kedip_startup+0x118>)
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	4413      	add	r3, r2
 8005e02:	440b      	add	r3, r1
 8005e04:	3302      	adds	r3, #2
 8005e06:	2200      	movs	r2, #0
 8005e08:	701a      	strb	r2, [r3, #0]
	for(int jk=0;jk<12; jk++)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b0b      	cmp	r3, #11
 8005e14:	dddf      	ble.n	8005dd6 <kedip_startup+0xc2>
	}
	update_logic_lampu();
 8005e16:	f000 f80b 	bl	8005e30 <update_logic_lampu>
	//send_lamp_sig();
	HAL_Delay(2000);
 8005e1a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8005e1e:	f002 f9c7 	bl	80081b0 <HAL_Delay>
}
 8005e22:	bf00      	nop
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	2000ecc8 	.word	0x2000ecc8

08005e30 <update_logic_lampu>:
										SG[8][0],SG[8][1],SG[8][2],SG[9][0],SG[9][1],SG[9][2],SG[10][0],SG[10][1],SG[10][2],SG[11][0],SG[11][1],SG[11][2]);
			HAL_UART_Transmit(&huart1, (uint8_t *)send, strlen(send), HAL_MAX_DELAY);
}

void update_logic_lampu(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
	 for(int jk=0; jk<12; jk++)
 8005e36:	2300      	movs	r3, #0
 8005e38:	607b      	str	r3, [r7, #4]
 8005e3a:	e040      	b.n	8005ebe <update_logic_lampu+0x8e>
	  {
		  if(SG[jk][0]==0)					//CEK LAMPU MERAH
 8005e3c:	4924      	ldr	r1, [pc, #144]	@ (8005ed0 <update_logic_lampu+0xa0>)
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	4613      	mov	r3, r2
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	4413      	add	r3, r2
 8005e46:	440b      	add	r3, r1
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d105      	bne.n	8005e5a <update_logic_lampu+0x2a>
		  {
			  command_lamp(jk,0,0);
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2100      	movs	r1, #0
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7fc ffd0 	bl	8002df8 <command_lamp>
 8005e58:	e004      	b.n	8005e64 <update_logic_lampu+0x34>
		  }
		  else
		  {
			  command_lamp(jk,0,1);
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7fc ffca 	bl	8002df8 <command_lamp>
		  }

		  if(SG[jk][1]==0)					//CEK LAMPU KUNING
 8005e64:	491a      	ldr	r1, [pc, #104]	@ (8005ed0 <update_logic_lampu+0xa0>)
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	4413      	add	r3, r2
 8005e6e:	440b      	add	r3, r1
 8005e70:	3301      	adds	r3, #1
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d105      	bne.n	8005e84 <update_logic_lampu+0x54>
		  {
			  command_lamp(jk,1,0);
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7fc ffbb 	bl	8002df8 <command_lamp>
 8005e82:	e004      	b.n	8005e8e <update_logic_lampu+0x5e>
		  }
		  else
		  {
			  command_lamp(jk,1,1);
 8005e84:	2201      	movs	r2, #1
 8005e86:	2101      	movs	r1, #1
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7fc ffb5 	bl	8002df8 <command_lamp>
		  }

		  if(SG[jk][2]==0)					//CEK LAMPU HIJAU
 8005e8e:	4910      	ldr	r1, [pc, #64]	@ (8005ed0 <update_logic_lampu+0xa0>)
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	4613      	mov	r3, r2
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	4413      	add	r3, r2
 8005e98:	440b      	add	r3, r1
 8005e9a:	3302      	adds	r3, #2
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d105      	bne.n	8005eae <update_logic_lampu+0x7e>
		  {
			  command_lamp(jk,2,0);
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	2102      	movs	r1, #2
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fc ffa6 	bl	8002df8 <command_lamp>
 8005eac:	e004      	b.n	8005eb8 <update_logic_lampu+0x88>
		  }
		  else
		  {
			  command_lamp(jk,2,1);
 8005eae:	2201      	movs	r2, #1
 8005eb0:	2102      	movs	r1, #2
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7fc ffa0 	bl	8002df8 <command_lamp>
	 for(int jk=0; jk<12; jk++)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	607b      	str	r3, [r7, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b0b      	cmp	r3, #11
 8005ec2:	ddbb      	ble.n	8005e3c <update_logic_lampu+0xc>
		  }
	  }

}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	2000ecc8 	.word	0x2000ecc8

08005ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005ed8:	b672      	cpsid	i
}
 8005eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005edc:	bf00      	nop
 8005ede:	e7fd      	b.n	8005edc <Error_Handler+0x8>

08005ee0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8005ee6:	1d3b      	adds	r3, r7, #4
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	605a      	str	r2, [r3, #4]
 8005eee:	609a      	str	r2, [r3, #8]
 8005ef0:	60da      	str	r2, [r3, #12]
 8005ef2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005ef8:	4b24      	ldr	r3, [pc, #144]	@ (8005f8c <MX_RTC_Init+0xac>)
 8005efa:	4a25      	ldr	r2, [pc, #148]	@ (8005f90 <MX_RTC_Init+0xb0>)
 8005efc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005efe:	4b23      	ldr	r3, [pc, #140]	@ (8005f8c <MX_RTC_Init+0xac>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005f04:	4b21      	ldr	r3, [pc, #132]	@ (8005f8c <MX_RTC_Init+0xac>)
 8005f06:	227f      	movs	r2, #127	@ 0x7f
 8005f08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005f0a:	4b20      	ldr	r3, [pc, #128]	@ (8005f8c <MX_RTC_Init+0xac>)
 8005f0c:	22ff      	movs	r2, #255	@ 0xff
 8005f0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005f10:	4b1e      	ldr	r3, [pc, #120]	@ (8005f8c <MX_RTC_Init+0xac>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005f16:	4b1d      	ldr	r3, [pc, #116]	@ (8005f8c <MX_RTC_Init+0xac>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005f8c <MX_RTC_Init+0xac>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005f22:	481a      	ldr	r0, [pc, #104]	@ (8005f8c <MX_RTC_Init+0xac>)
 8005f24:	f003 fe14 	bl	8009b50 <HAL_RTC_Init>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8005f2e:	f7ff ffd1 	bl	8005ed4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_SET;
 8005f42:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005f46:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8005f48:	1d3b      	adds	r3, r7, #4
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	480f      	ldr	r0, [pc, #60]	@ (8005f8c <MX_RTC_Init+0xac>)
 8005f50:	f003 fe81 	bl	8009c56 <HAL_RTC_SetTime>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8005f5a:	f7ff ffbb 	bl	8005ed4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8005f5e:	2306      	movs	r3, #6
 8005f60:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 8005f62:	2303      	movs	r3, #3
 8005f64:	707b      	strb	r3, [r7, #1]
  sDate.Date = 16;
 8005f66:	2310      	movs	r3, #16
 8005f68:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8005f6a:	2318      	movs	r3, #24
 8005f6c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8005f6e:	463b      	mov	r3, r7
 8005f70:	2200      	movs	r2, #0
 8005f72:	4619      	mov	r1, r3
 8005f74:	4805      	ldr	r0, [pc, #20]	@ (8005f8c <MX_RTC_Init+0xac>)
 8005f76:	f003 ff66 	bl	8009e46 <HAL_RTC_SetDate>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8005f80:	f7ff ffa8 	bl	8005ed4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005f84:	bf00      	nop
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	20011bec 	.word	0x20011bec
 8005f90:	40002800 	.word	0x40002800

08005f94 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f9c:	f107 0308 	add.w	r3, r7, #8
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	605a      	str	r2, [r3, #4]
 8005fa6:	609a      	str	r2, [r3, #8]
 8005fa8:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a0c      	ldr	r2, [pc, #48]	@ (8005fe0 <HAL_RTC_MspInit+0x4c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d111      	bne.n	8005fd8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005fb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fbc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005fbe:	f107 0308 	add.w	r3, r7, #8
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f003 fce2 	bl	800998c <HAL_RCCEx_PeriphCLKConfig>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8005fce:	f7ff ff81 	bl	8005ed4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005fd2:	4b04      	ldr	r3, [pc, #16]	@ (8005fe4 <HAL_RTC_MspInit+0x50>)
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005fd8:	bf00      	nop
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40002800 	.word	0x40002800
 8005fe4:	42470e3c 	.word	0x42470e3c

08005fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fee:	2300      	movs	r3, #0
 8005ff0:	607b      	str	r3, [r7, #4]
 8005ff2:	4b10      	ldr	r3, [pc, #64]	@ (8006034 <HAL_MspInit+0x4c>)
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8006034 <HAL_MspInit+0x4c>)
 8005ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8006034 <HAL_MspInit+0x4c>)
 8006000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006006:	607b      	str	r3, [r7, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800600a:	2300      	movs	r3, #0
 800600c:	603b      	str	r3, [r7, #0]
 800600e:	4b09      	ldr	r3, [pc, #36]	@ (8006034 <HAL_MspInit+0x4c>)
 8006010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006012:	4a08      	ldr	r2, [pc, #32]	@ (8006034 <HAL_MspInit+0x4c>)
 8006014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006018:	6413      	str	r3, [r2, #64]	@ 0x40
 800601a:	4b06      	ldr	r3, [pc, #24]	@ (8006034 <HAL_MspInit+0x4c>)
 800601c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006022:	603b      	str	r3, [r7, #0]
 8006024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40023800 	.word	0x40023800

08006038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800603c:	bf00      	nop
 800603e:	e7fd      	b.n	800603c <NMI_Handler+0x4>

08006040 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006044:	bf00      	nop
 8006046:	e7fd      	b.n	8006044 <HardFault_Handler+0x4>

08006048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800604c:	bf00      	nop
 800604e:	e7fd      	b.n	800604c <MemManage_Handler+0x4>

08006050 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006050:	b480      	push	{r7}
 8006052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006054:	bf00      	nop
 8006056:	e7fd      	b.n	8006054 <BusFault_Handler+0x4>

08006058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006058:	b480      	push	{r7}
 800605a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800605c:	bf00      	nop
 800605e:	e7fd      	b.n	800605c <UsageFault_Handler+0x4>

08006060 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006064:	bf00      	nop
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800606e:	b480      	push	{r7}
 8006070:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006072:	bf00      	nop
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006080:	bf00      	nop
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800608e:	f002 f86f 	bl	8008170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006092:	bf00      	nop
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800609c:	4804      	ldr	r0, [pc, #16]	@ (80060b0 <TIM2_IRQHandler+0x18>)
 800609e:	f004 f923 	bl	800a2e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(CPU_PROCESS_GPIO_Port, CPU_PROCESS_Pin);
 80060a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80060a6:	4803      	ldr	r0, [pc, #12]	@ (80060b4 <TIM2_IRQHandler+0x1c>)
 80060a8:	f002 fe79 	bl	8008d9e <HAL_GPIO_TogglePin>
  //Send_Data_To_Server_Proc();
  /* USER CODE END TIM2_IRQn 1 */
}
 80060ac:	bf00      	nop
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20016a50 	.word	0x20016a50
 80060b4:	40020c00 	.word	0x40020c00

080060b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80060bc:	4808      	ldr	r0, [pc, #32]	@ (80060e0 <TIM3_IRQHandler+0x28>)
 80060be:	f004 f913 	bl	800a2e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  second++;
 80060c2:	4b08      	ldr	r3, [pc, #32]	@ (80060e4 <TIM3_IRQHandler+0x2c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3301      	adds	r3, #1
 80060c8:	4a06      	ldr	r2, [pc, #24]	@ (80060e4 <TIM3_IRQHandler+0x2c>)
 80060ca:	6013      	str	r3, [r2, #0]
  if(second>1000) second=0;
 80060cc:	4b05      	ldr	r3, [pc, #20]	@ (80060e4 <TIM3_IRQHandler+0x2c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060d4:	dd02      	ble.n	80060dc <TIM3_IRQHandler+0x24>
 80060d6:	4b03      	ldr	r3, [pc, #12]	@ (80060e4 <TIM3_IRQHandler+0x2c>)
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 80060dc:	bf00      	nop
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	20016a98 	.word	0x20016a98
 80060e4:	20011c0c 	.word	0x20011c0c

080060e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	static uint8_t loop;
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80060ee:	4816      	ldr	r0, [pc, #88]	@ (8006148 <TIM4_IRQHandler+0x60>)
 80060f0:	f004 f8fa 	bl	800a2e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  for(int kl=0; kl<12; kl++)
 80060f4:	2300      	movs	r3, #0
 80060f6:	607b      	str	r3, [r7, #4]
 80060f8:	e018      	b.n	800612c <TIM4_IRQHandler+0x44>
  {
	  if(flag_flash_y[kl] == 1)
 80060fa:	4a14      	ldr	r2, [pc, #80]	@ (800614c <TIM4_IRQHandler+0x64>)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4413      	add	r3, r2
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d104      	bne.n	8006110 <TIM4_IRQHandler+0x28>
	  {
		  command_toggle_y(kl);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	b2db      	uxtb	r3, r3
 800610a:	4618      	mov	r0, r3
 800610c:	f000 fda6 	bl	8006c5c <command_toggle_y>
	  }
	  if(flag_flash_g[kl] == 1)
 8006110:	4a0f      	ldr	r2, [pc, #60]	@ (8006150 <TIM4_IRQHandler+0x68>)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4413      	add	r3, r2
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d104      	bne.n	8006126 <TIM4_IRQHandler+0x3e>
	  {
		  command_toggle_g(kl);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	b2db      	uxtb	r3, r3
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fdc5 	bl	8006cb0 <command_toggle_g>
  for(int kl=0; kl<12; kl++)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3301      	adds	r3, #1
 800612a:	607b      	str	r3, [r7, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b0b      	cmp	r3, #11
 8006130:	dde3      	ble.n	80060fa <TIM4_IRQHandler+0x12>
	  }
  }

  loop++;
 8006132:	4b08      	ldr	r3, [pc, #32]	@ (8006154 <TIM4_IRQHandler+0x6c>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	3301      	adds	r3, #1
 8006138:	b2da      	uxtb	r2, r3
 800613a:	4b06      	ldr	r3, [pc, #24]	@ (8006154 <TIM4_IRQHandler+0x6c>)
 800613c:	701a      	strb	r2, [r3, #0]
  if(loop>=2)
  {

  }
  /* USER CODE END TIM4_IRQn 1 */
}
 800613e:	bf00      	nop
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20016ae0 	.word	0x20016ae0
 800614c:	2000f458 	.word	0x2000f458
 8006150:	2000f464 	.word	0x2000f464
 8006154:	20016a48 	.word	0x20016a48

08006158 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800615c:	4803      	ldr	r0, [pc, #12]	@ (800616c <USART1_IRQHandler+0x14>)
 800615e:	f004 fd83 	bl	800ac68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  Receive_485(&huart1);
 8006162:	4802      	ldr	r0, [pc, #8]	@ (800616c <USART1_IRQHandler+0x14>)
 8006164:	f7fa fef0 	bl	8000f48 <Receive_485>
  /* USER CODE END USART1_IRQn 1 */
}
 8006168:	bf00      	nop
 800616a:	bd80      	pop	{r7, pc}
 800616c:	20016b70 	.word	0x20016b70

08006170 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006176:	484d      	ldr	r0, [pc, #308]	@ (80062ac <USART3_IRQHandler+0x13c>)
 8006178:	f004 fd76 	bl	800ac68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, Rx_data_i,1);
 800617c:	2201      	movs	r2, #1
 800617e:	494c      	ldr	r1, [pc, #304]	@ (80062b0 <USART3_IRQHandler+0x140>)
 8006180:	484a      	ldr	r0, [pc, #296]	@ (80062ac <USART3_IRQHandler+0x13c>)
 8006182:	f004 fd4c 	bl	800ac1e <HAL_UART_Receive_IT>
  if(Rx_data_i[0] == '$'){
 8006186:	4b4a      	ldr	r3, [pc, #296]	@ (80062b0 <USART3_IRQHandler+0x140>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	2b24      	cmp	r3, #36	@ 0x24
 800618c:	d10b      	bne.n	80061a6 <USART3_IRQHandler+0x36>
   		indeks_detect_i = 0;
 800618e:	4b49      	ldr	r3, [pc, #292]	@ (80062b4 <USART3_IRQHandler+0x144>)
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]
   		DataIn_detect_i = 1;
 8006194:	4b48      	ldr	r3, [pc, #288]	@ (80062b8 <USART3_IRQHandler+0x148>)
 8006196:	2201      	movs	r2, #1
 8006198:	701a      	strb	r2, [r3, #0]
   		DataIn_i[indeks_detect_i] = Rx_data_i[0];
 800619a:	4b46      	ldr	r3, [pc, #280]	@ (80062b4 <USART3_IRQHandler+0x144>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a44      	ldr	r2, [pc, #272]	@ (80062b0 <USART3_IRQHandler+0x140>)
 80061a0:	7811      	ldrb	r1, [r2, #0]
 80061a2:	4a46      	ldr	r2, [pc, #280]	@ (80062bc <USART3_IRQHandler+0x14c>)
 80061a4:	54d1      	strb	r1, [r2, r3]
  }
  if(DataIn_detect_i == 1 && Rx_data_i[0] != '$' && Rx_data_i[0] != '#'){
 80061a6:	4b44      	ldr	r3, [pc, #272]	@ (80062b8 <USART3_IRQHandler+0x148>)
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d112      	bne.n	80061d4 <USART3_IRQHandler+0x64>
 80061ae:	4b40      	ldr	r3, [pc, #256]	@ (80062b0 <USART3_IRQHandler+0x140>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b24      	cmp	r3, #36	@ 0x24
 80061b4:	d00e      	beq.n	80061d4 <USART3_IRQHandler+0x64>
 80061b6:	4b3e      	ldr	r3, [pc, #248]	@ (80062b0 <USART3_IRQHandler+0x140>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b23      	cmp	r3, #35	@ 0x23
 80061bc:	d00a      	beq.n	80061d4 <USART3_IRQHandler+0x64>
	  indeks_detect_i++;
 80061be:	4b3d      	ldr	r3, [pc, #244]	@ (80062b4 <USART3_IRQHandler+0x144>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3301      	adds	r3, #1
 80061c4:	4a3b      	ldr	r2, [pc, #236]	@ (80062b4 <USART3_IRQHandler+0x144>)
 80061c6:	6013      	str	r3, [r2, #0]
	  DataIn_i[indeks_detect_i] = Rx_data_i[0];
 80061c8:	4b3a      	ldr	r3, [pc, #232]	@ (80062b4 <USART3_IRQHandler+0x144>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a38      	ldr	r2, [pc, #224]	@ (80062b0 <USART3_IRQHandler+0x140>)
 80061ce:	7811      	ldrb	r1, [r2, #0]
 80061d0:	4a3a      	ldr	r2, [pc, #232]	@ (80062bc <USART3_IRQHandler+0x14c>)
 80061d2:	54d1      	strb	r1, [r2, r3]
  }
  if(Rx_data_i[0] == '#'){
 80061d4:	4b36      	ldr	r3, [pc, #216]	@ (80062b0 <USART3_IRQHandler+0x140>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b23      	cmp	r3, #35	@ 0x23
 80061da:	d110      	bne.n	80061fe <USART3_IRQHandler+0x8e>
	  DataIn_detect_i = 0;
 80061dc:	4b36      	ldr	r3, [pc, #216]	@ (80062b8 <USART3_IRQHandler+0x148>)
 80061de:	2200      	movs	r2, #0
 80061e0:	701a      	strb	r2, [r3, #0]
	  indeks_detect_i++;
 80061e2:	4b34      	ldr	r3, [pc, #208]	@ (80062b4 <USART3_IRQHandler+0x144>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3301      	adds	r3, #1
 80061e8:	4a32      	ldr	r2, [pc, #200]	@ (80062b4 <USART3_IRQHandler+0x144>)
 80061ea:	6013      	str	r3, [r2, #0]
	  DataIn_i[indeks_detect_i] = Rx_data_i[0];
 80061ec:	4b31      	ldr	r3, [pc, #196]	@ (80062b4 <USART3_IRQHandler+0x144>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a2f      	ldr	r2, [pc, #188]	@ (80062b0 <USART3_IRQHandler+0x140>)
 80061f2:	7811      	ldrb	r1, [r2, #0]
 80061f4:	4a31      	ldr	r2, [pc, #196]	@ (80062bc <USART3_IRQHandler+0x14c>)
 80061f6:	54d1      	strb	r1, [r2, r3]
	  Process_DataIn = 1;
 80061f8:	4b31      	ldr	r3, [pc, #196]	@ (80062c0 <USART3_IRQHandler+0x150>)
 80061fa:	2201      	movs	r2, #1
 80061fc:	701a      	strb	r2, [r3, #0]
  }
  if(Process_DataIn == 1){
 80061fe:	4b30      	ldr	r3, [pc, #192]	@ (80062c0 <USART3_IRQHandler+0x150>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d14e      	bne.n	80062a4 <USART3_IRQHandler+0x134>


	  // Memproses Feedback ke Server
	  if(indeks_detect_i == 4)
 8006206:	4b2b      	ldr	r3, [pc, #172]	@ (80062b4 <USART3_IRQHandler+0x144>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b04      	cmp	r3, #4
 800620c:	d10c      	bne.n	8006228 <USART3_IRQHandler+0xb8>
	  {
		  if(DataIn_i[1]=='D')
 800620e:	4b2b      	ldr	r3, [pc, #172]	@ (80062bc <USART3_IRQHandler+0x14c>)
 8006210:	785b      	ldrb	r3, [r3, #1]
 8006212:	2b44      	cmp	r3, #68	@ 0x44
 8006214:	d102      	bne.n	800621c <USART3_IRQHandler+0xac>
		  {
			  send_section_D();
 8006216:	f000 fd75 	bl	8006d04 <send_section_D>
 800621a:	e005      	b.n	8006228 <USART3_IRQHandler+0xb8>
		  }
		  else if(DataIn_i[1]=='T')
 800621c:	4b27      	ldr	r3, [pc, #156]	@ (80062bc <USART3_IRQHandler+0x14c>)
 800621e:	785b      	ldrb	r3, [r3, #1]
 8006220:	2b54      	cmp	r3, #84	@ 0x54
 8006222:	d101      	bne.n	8006228 <USART3_IRQHandler+0xb8>
		  {
			  send_section_T();
 8006224:	f000 fecc 	bl	8006fc0 <send_section_T>
		  }
	  }

	  if(indeks_detect_i >4)
 8006228:	4b22      	ldr	r3, [pc, #136]	@ (80062b4 <USART3_IRQHandler+0x144>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b04      	cmp	r3, #4
 800622e:	dd26      	ble.n	800627e <USART3_IRQHandler+0x10e>
	  {
		  if(DataIn_i[1]=='D')
 8006230:	4b22      	ldr	r3, [pc, #136]	@ (80062bc <USART3_IRQHandler+0x14c>)
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	2b44      	cmp	r3, #68	@ 0x44
 8006236:	d105      	bne.n	8006244 <USART3_IRQHandler+0xd4>
		  {
			  DecryptData(DataIn_i);
 8006238:	4820      	ldr	r0, [pc, #128]	@ (80062bc <USART3_IRQHandler+0x14c>)
 800623a:	f7fb fd35 	bl	8001ca8 <DecryptData>
			  send_feedback_section_D();
 800623e:	f000 ffd5 	bl	80071ec <send_feedback_section_D>
 8006242:	e01c      	b.n	800627e <USART3_IRQHandler+0x10e>
		  }
		  else if(DataIn_i[1]=='T')
 8006244:	4b1d      	ldr	r3, [pc, #116]	@ (80062bc <USART3_IRQHandler+0x14c>)
 8006246:	785b      	ldrb	r3, [r3, #1]
 8006248:	2b54      	cmp	r3, #84	@ 0x54
 800624a:	d105      	bne.n	8006258 <USART3_IRQHandler+0xe8>
		  {
			  DecryptData(DataIn_i);
 800624c:	481b      	ldr	r0, [pc, #108]	@ (80062bc <USART3_IRQHandler+0x14c>)
 800624e:	f7fb fd2b 	bl	8001ca8 <DecryptData>
			  send_feedback_section_T();
 8006252:	f001 f939 	bl	80074c8 <send_feedback_section_T>
 8006256:	e012      	b.n	800627e <USART3_IRQHandler+0x10e>
		  }
		  else if(DataIn_i[1]=='R')
 8006258:	4b18      	ldr	r3, [pc, #96]	@ (80062bc <USART3_IRQHandler+0x14c>)
 800625a:	785b      	ldrb	r3, [r3, #1]
 800625c:	2b52      	cmp	r3, #82	@ 0x52
 800625e:	d105      	bne.n	800626c <USART3_IRQHandler+0xfc>
		  {
			  DecryptData(DataIn_i);
 8006260:	4816      	ldr	r0, [pc, #88]	@ (80062bc <USART3_IRQHandler+0x14c>)
 8006262:	f7fb fd21 	bl	8001ca8 <DecryptData>
			  send_feedback_section_R();
 8006266:	f001 fa43 	bl	80076f0 <send_feedback_section_R>
 800626a:	e008      	b.n	800627e <USART3_IRQHandler+0x10e>
		  }
		  else if(DataIn_i[1]=='Q')
 800626c:	4b13      	ldr	r3, [pc, #76]	@ (80062bc <USART3_IRQHandler+0x14c>)
 800626e:	785b      	ldrb	r3, [r3, #1]
 8006270:	2b51      	cmp	r3, #81	@ 0x51
 8006272:	d104      	bne.n	800627e <USART3_IRQHandler+0x10e>
		  {
			  DecryptData(DataIn_i);
 8006274:	4811      	ldr	r0, [pc, #68]	@ (80062bc <USART3_IRQHandler+0x14c>)
 8006276:	f7fb fd17 	bl	8001ca8 <DecryptData>
			  send_feedback_section_Q();
 800627a:	f001 fac3 	bl	8007804 <send_feedback_section_Q>
		  }

	  }

	  for(int i=0;i<sizeof(DataIn_i);i++){
 800627e:	2300      	movs	r3, #0
 8006280:	607b      	str	r3, [r7, #4]
 8006282:	e007      	b.n	8006294 <USART3_IRQHandler+0x124>
		  DataIn_i[i] = '\0';
 8006284:	4a0d      	ldr	r2, [pc, #52]	@ (80062bc <USART3_IRQHandler+0x14c>)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4413      	add	r3, r2
 800628a:	2200      	movs	r2, #0
 800628c:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<sizeof(DataIn_i);i++){
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	3301      	adds	r3, #1
 8006292:	607b      	str	r3, [r7, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f242 720f 	movw	r2, #9999	@ 0x270f
 800629a:	4293      	cmp	r3, r2
 800629c:	d9f2      	bls.n	8006284 <USART3_IRQHandler+0x114>
	  }

	  Process_DataIn = 0;
 800629e:	4b08      	ldr	r3, [pc, #32]	@ (80062c0 <USART3_IRQHandler+0x150>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END USART3_IRQn 1 */
}
 80062a4:	bf00      	nop
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20016bb8 	.word	0x20016bb8
 80062b0:	2000c3dc 	.word	0x2000c3dc
 80062b4:	20011c14 	.word	0x20011c14
 80062b8:	20011c18 	.word	0x20011c18
 80062bc:	20011c1c 	.word	0x20011c1c
 80062c0:	20011c19 	.word	0x20011c19

080062c4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80062c8:	4802      	ldr	r0, [pc, #8]	@ (80062d4 <UART4_IRQHandler+0x10>)
 80062ca:	f004 fccd 	bl	800ac68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80062ce:	bf00      	nop
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20016b28 	.word	0x20016b28

080062d8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80062d8:	b5b0      	push	{r4, r5, r7, lr}
 80062da:	b088      	sub	sp, #32
 80062dc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80062de:	4899      	ldr	r0, [pc, #612]	@ (8006544 <USART6_IRQHandler+0x26c>)
 80062e0:	f004 fcc2 	bl	800ac68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  HAL_UART_Receive_IT(&huart6, Rx_data_a,1);
 80062e4:	2201      	movs	r2, #1
 80062e6:	4998      	ldr	r1, [pc, #608]	@ (8006548 <USART6_IRQHandler+0x270>)
 80062e8:	4896      	ldr	r0, [pc, #600]	@ (8006544 <USART6_IRQHandler+0x26c>)
 80062ea:	f004 fc98 	bl	800ac1e <HAL_UART_Receive_IT>
 //	if(Rx_data_a[0] == 'I')					{topic_apps[0] = 'I';}
 	if(Rx_data_a[0] == 'O')					{topic_apps[0] = 'O';}
 80062ee:	4b96      	ldr	r3, [pc, #600]	@ (8006548 <USART6_IRQHandler+0x270>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b4f      	cmp	r3, #79	@ 0x4f
 80062f4:	d102      	bne.n	80062fc <USART6_IRQHandler+0x24>
 80062f6:	4b95      	ldr	r3, [pc, #596]	@ (800654c <USART6_IRQHandler+0x274>)
 80062f8:	224f      	movs	r2, #79	@ 0x4f
 80062fa:	701a      	strb	r2, [r3, #0]
 	if(Rx_data_a[0] == 'S')         		{topic_apps[0] = 'S';}
 80062fc:	4b92      	ldr	r3, [pc, #584]	@ (8006548 <USART6_IRQHandler+0x270>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b53      	cmp	r3, #83	@ 0x53
 8006302:	d102      	bne.n	800630a <USART6_IRQHandler+0x32>
 8006304:	4b91      	ldr	r3, [pc, #580]	@ (800654c <USART6_IRQHandler+0x274>)
 8006306:	2253      	movs	r2, #83	@ 0x53
 8006308:	701a      	strb	r2, [r3, #0]
 	if(Rx_data_a[0] == 'T')                 {topic_apps[0] = 'T';}
 800630a:	4b8f      	ldr	r3, [pc, #572]	@ (8006548 <USART6_IRQHandler+0x270>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b54      	cmp	r3, #84	@ 0x54
 8006310:	d102      	bne.n	8006318 <USART6_IRQHandler+0x40>
 8006312:	4b8e      	ldr	r3, [pc, #568]	@ (800654c <USART6_IRQHandler+0x274>)
 8006314:	2254      	movs	r2, #84	@ 0x54
 8006316:	701a      	strb	r2, [r3, #0]
 	if(Rx_data_a[0] == 'U')                 {topic_apps[0] = 'U';}
 8006318:	4b8b      	ldr	r3, [pc, #556]	@ (8006548 <USART6_IRQHandler+0x270>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b55      	cmp	r3, #85	@ 0x55
 800631e:	d102      	bne.n	8006326 <USART6_IRQHandler+0x4e>
 8006320:	4b8a      	ldr	r3, [pc, #552]	@ (800654c <USART6_IRQHandler+0x274>)
 8006322:	2255      	movs	r2, #85	@ 0x55
 8006324:	701a      	strb	r2, [r3, #0]
 	if(Rx_data_a[0] == 'J')                 {topic_apps[0] = 'J';}
 8006326:	4b88      	ldr	r3, [pc, #544]	@ (8006548 <USART6_IRQHandler+0x270>)
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b4a      	cmp	r3, #74	@ 0x4a
 800632c:	d102      	bne.n	8006334 <USART6_IRQHandler+0x5c>
 800632e:	4b87      	ldr	r3, [pc, #540]	@ (800654c <USART6_IRQHandler+0x274>)
 8006330:	224a      	movs	r2, #74	@ 0x4a
 8006332:	701a      	strb	r2, [r3, #0]
 	if(Rx_data_a[0] == 'H')                 {topic_apps[0] = 'H';}
 8006334:	4b84      	ldr	r3, [pc, #528]	@ (8006548 <USART6_IRQHandler+0x270>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b48      	cmp	r3, #72	@ 0x48
 800633a:	d102      	bne.n	8006342 <USART6_IRQHandler+0x6a>
 800633c:	4b83      	ldr	r3, [pc, #524]	@ (800654c <USART6_IRQHandler+0x274>)
 800633e:	2248      	movs	r2, #72	@ 0x48
 8006340:	701a      	strb	r2, [r3, #0]
 	if(Rx_data_a[0] == 'M')                 {topic_apps[0] = 'M';}
 8006342:	4b81      	ldr	r3, [pc, #516]	@ (8006548 <USART6_IRQHandler+0x270>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b4d      	cmp	r3, #77	@ 0x4d
 8006348:	d102      	bne.n	8006350 <USART6_IRQHandler+0x78>
 800634a:	4b80      	ldr	r3, [pc, #512]	@ (800654c <USART6_IRQHandler+0x274>)
 800634c:	224d      	movs	r2, #77	@ 0x4d
 800634e:	701a      	strb	r2, [r3, #0]
 	if(Rx_data_a[0] == 'N')                 {topic_apps[0] = 'N';}
 8006350:	4b7d      	ldr	r3, [pc, #500]	@ (8006548 <USART6_IRQHandler+0x270>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b4e      	cmp	r3, #78	@ 0x4e
 8006356:	d102      	bne.n	800635e <USART6_IRQHandler+0x86>
 8006358:	4b7c      	ldr	r3, [pc, #496]	@ (800654c <USART6_IRQHandler+0x274>)
 800635a:	224e      	movs	r2, #78	@ 0x4e
 800635c:	701a      	strb	r2, [r3, #0]
 	if(Rx_data_a[0] == 'P')                 {topic_apps[0] = 'P';}
 800635e:	4b7a      	ldr	r3, [pc, #488]	@ (8006548 <USART6_IRQHandler+0x270>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b50      	cmp	r3, #80	@ 0x50
 8006364:	d102      	bne.n	800636c <USART6_IRQHandler+0x94>
 8006366:	4b79      	ldr	r3, [pc, #484]	@ (800654c <USART6_IRQHandler+0x274>)
 8006368:	2250      	movs	r2, #80	@ 0x50
 800636a:	701a      	strb	r2, [r3, #0]
 	if(Rx_data_a[0] == 'G')                 {topic_apps[0] = 'G';}
 800636c:	4b76      	ldr	r3, [pc, #472]	@ (8006548 <USART6_IRQHandler+0x270>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b47      	cmp	r3, #71	@ 0x47
 8006372:	d102      	bne.n	800637a <USART6_IRQHandler+0xa2>
 8006374:	4b75      	ldr	r3, [pc, #468]	@ (800654c <USART6_IRQHandler+0x274>)
 8006376:	2247      	movs	r2, #71	@ 0x47
 8006378:	701a      	strb	r2, [r3, #0]
 	if(Rx_data_a[0] == 'B')                 {topic_apps[0] = 'B';}
 800637a:	4b73      	ldr	r3, [pc, #460]	@ (8006548 <USART6_IRQHandler+0x270>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b42      	cmp	r3, #66	@ 0x42
 8006380:	d102      	bne.n	8006388 <USART6_IRQHandler+0xb0>
 8006382:	4b72      	ldr	r3, [pc, #456]	@ (800654c <USART6_IRQHandler+0x274>)
 8006384:	2242      	movs	r2, #66	@ 0x42
 8006386:	701a      	strb	r2, [r3, #0]

 	if(Rx_data_a[0] == '{'){
 8006388:	4b6f      	ldr	r3, [pc, #444]	@ (8006548 <USART6_IRQHandler+0x270>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b7b      	cmp	r3, #123	@ 0x7b
 800638e:	d105      	bne.n	800639c <USART6_IRQHandler+0xc4>
 		ca = 0;
 8006390:	4b6f      	ldr	r3, [pc, #444]	@ (8006550 <USART6_IRQHandler+0x278>)
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
 		json_detect_a = 1;
 8006396:	4b6f      	ldr	r3, [pc, #444]	@ (8006554 <USART6_IRQHandler+0x27c>)
 8006398:	2201      	movs	r2, #1
 800639a:	801a      	strh	r2, [r3, #0]
 	}
 	if(json_detect_a == 1 && Rx_data_a[0] != '{' && Rx_data_a[0] != '}'){
 800639c:	4b6d      	ldr	r3, [pc, #436]	@ (8006554 <USART6_IRQHandler+0x27c>)
 800639e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d112      	bne.n	80063cc <USART6_IRQHandler+0xf4>
 80063a6:	4b68      	ldr	r3, [pc, #416]	@ (8006548 <USART6_IRQHandler+0x270>)
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	2b7b      	cmp	r3, #123	@ 0x7b
 80063ac:	d00e      	beq.n	80063cc <USART6_IRQHandler+0xf4>
 80063ae:	4b66      	ldr	r3, [pc, #408]	@ (8006548 <USART6_IRQHandler+0x270>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b7d      	cmp	r3, #125	@ 0x7d
 80063b4:	d00a      	beq.n	80063cc <USART6_IRQHandler+0xf4>
 		data_apps[ca] = Rx_data_a[0];
 80063b6:	4b66      	ldr	r3, [pc, #408]	@ (8006550 <USART6_IRQHandler+0x278>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a63      	ldr	r2, [pc, #396]	@ (8006548 <USART6_IRQHandler+0x270>)
 80063bc:	7811      	ldrb	r1, [r2, #0]
 80063be:	4a66      	ldr	r2, [pc, #408]	@ (8006558 <USART6_IRQHandler+0x280>)
 80063c0:	54d1      	strb	r1, [r2, r3]
 		ca++;
 80063c2:	4b63      	ldr	r3, [pc, #396]	@ (8006550 <USART6_IRQHandler+0x278>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3301      	adds	r3, #1
 80063c8:	4a61      	ldr	r2, [pc, #388]	@ (8006550 <USART6_IRQHandler+0x278>)
 80063ca:	6013      	str	r3, [r2, #0]
 	}
 	if(Rx_data_a[0] == '}'){
 80063cc:	4b5e      	ldr	r3, [pc, #376]	@ (8006548 <USART6_IRQHandler+0x270>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b7d      	cmp	r3, #125	@ 0x7d
 80063d2:	d10a      	bne.n	80063ea <USART6_IRQHandler+0x112>
 		data_apps[ca] = ',';
 80063d4:	4b5e      	ldr	r3, [pc, #376]	@ (8006550 <USART6_IRQHandler+0x278>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a5f      	ldr	r2, [pc, #380]	@ (8006558 <USART6_IRQHandler+0x280>)
 80063da:	212c      	movs	r1, #44	@ 0x2c
 80063dc:	54d1      	strb	r1, [r2, r3]
 		json_detect_a = 0;
 80063de:	4b5d      	ldr	r3, [pc, #372]	@ (8006554 <USART6_IRQHandler+0x27c>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	801a      	strh	r2, [r3, #0]
 		update_data_a = 1;
 80063e4:	4b5d      	ldr	r3, [pc, #372]	@ (800655c <USART6_IRQHandler+0x284>)
 80063e6:	2201      	movs	r2, #1
 80063e8:	801a      	strh	r2, [r3, #0]
 	}

 	if(update_data_a == 1 && topic_apps[0] == 'P'){
 80063ea:	4b5c      	ldr	r3, [pc, #368]	@ (800655c <USART6_IRQHandler+0x284>)
 80063ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	f040 838e 	bne.w	8006b12 <USART6_IRQHandler+0x83a>
 80063f6:	4b55      	ldr	r3, [pc, #340]	@ (800654c <USART6_IRQHandler+0x274>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	2b50      	cmp	r3, #80	@ 0x50
 80063fc:	f040 8389 	bne.w	8006b12 <USART6_IRQHandler+0x83a>
		get_json_unsignedint(data_apps,"P1" ,&phase1.SG1);   get_json_unsignedint(data_apps,"P2"   ,&phase1.SG2);
 8006400:	4a57      	ldr	r2, [pc, #348]	@ (8006560 <USART6_IRQHandler+0x288>)
 8006402:	4958      	ldr	r1, [pc, #352]	@ (8006564 <USART6_IRQHandler+0x28c>)
 8006404:	4854      	ldr	r0, [pc, #336]	@ (8006558 <USART6_IRQHandler+0x280>)
 8006406:	f7ff f9a1 	bl	800574c <get_json_unsignedint>
 800640a:	4a57      	ldr	r2, [pc, #348]	@ (8006568 <USART6_IRQHandler+0x290>)
 800640c:	4957      	ldr	r1, [pc, #348]	@ (800656c <USART6_IRQHandler+0x294>)
 800640e:	4852      	ldr	r0, [pc, #328]	@ (8006558 <USART6_IRQHandler+0x280>)
 8006410:	f7ff f99c 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P3" ,&phase1.SG3);   get_json_unsignedint(data_apps,"P4"   ,&phase1.SG4);
 8006414:	4a56      	ldr	r2, [pc, #344]	@ (8006570 <USART6_IRQHandler+0x298>)
 8006416:	4957      	ldr	r1, [pc, #348]	@ (8006574 <USART6_IRQHandler+0x29c>)
 8006418:	484f      	ldr	r0, [pc, #316]	@ (8006558 <USART6_IRQHandler+0x280>)
 800641a:	f7ff f997 	bl	800574c <get_json_unsignedint>
 800641e:	4a56      	ldr	r2, [pc, #344]	@ (8006578 <USART6_IRQHandler+0x2a0>)
 8006420:	4956      	ldr	r1, [pc, #344]	@ (800657c <USART6_IRQHandler+0x2a4>)
 8006422:	484d      	ldr	r0, [pc, #308]	@ (8006558 <USART6_IRQHandler+0x280>)
 8006424:	f7ff f992 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P5" ,&phase1.SG5);   get_json_unsignedint(data_apps,"P6"   ,&phase1.SG6);
 8006428:	4a55      	ldr	r2, [pc, #340]	@ (8006580 <USART6_IRQHandler+0x2a8>)
 800642a:	4956      	ldr	r1, [pc, #344]	@ (8006584 <USART6_IRQHandler+0x2ac>)
 800642c:	484a      	ldr	r0, [pc, #296]	@ (8006558 <USART6_IRQHandler+0x280>)
 800642e:	f7ff f98d 	bl	800574c <get_json_unsignedint>
 8006432:	4a55      	ldr	r2, [pc, #340]	@ (8006588 <USART6_IRQHandler+0x2b0>)
 8006434:	4955      	ldr	r1, [pc, #340]	@ (800658c <USART6_IRQHandler+0x2b4>)
 8006436:	4848      	ldr	r0, [pc, #288]	@ (8006558 <USART6_IRQHandler+0x280>)
 8006438:	f7ff f988 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P7" ,&phase1.SG7);   get_json_unsignedint(data_apps,"P8"   ,&phase1.SG8);
 800643c:	4a54      	ldr	r2, [pc, #336]	@ (8006590 <USART6_IRQHandler+0x2b8>)
 800643e:	4955      	ldr	r1, [pc, #340]	@ (8006594 <USART6_IRQHandler+0x2bc>)
 8006440:	4845      	ldr	r0, [pc, #276]	@ (8006558 <USART6_IRQHandler+0x280>)
 8006442:	f7ff f983 	bl	800574c <get_json_unsignedint>
 8006446:	4a54      	ldr	r2, [pc, #336]	@ (8006598 <USART6_IRQHandler+0x2c0>)
 8006448:	4954      	ldr	r1, [pc, #336]	@ (800659c <USART6_IRQHandler+0x2c4>)
 800644a:	4843      	ldr	r0, [pc, #268]	@ (8006558 <USART6_IRQHandler+0x280>)
 800644c:	f7ff f97e 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P9" ,&phase1.SG9);   get_json_unsignedint(data_apps,"P10" ,&phase1.SG10);
 8006450:	4a53      	ldr	r2, [pc, #332]	@ (80065a0 <USART6_IRQHandler+0x2c8>)
 8006452:	4954      	ldr	r1, [pc, #336]	@ (80065a4 <USART6_IRQHandler+0x2cc>)
 8006454:	4840      	ldr	r0, [pc, #256]	@ (8006558 <USART6_IRQHandler+0x280>)
 8006456:	f7ff f979 	bl	800574c <get_json_unsignedint>
 800645a:	4a53      	ldr	r2, [pc, #332]	@ (80065a8 <USART6_IRQHandler+0x2d0>)
 800645c:	4953      	ldr	r1, [pc, #332]	@ (80065ac <USART6_IRQHandler+0x2d4>)
 800645e:	483e      	ldr	r0, [pc, #248]	@ (8006558 <USART6_IRQHandler+0x280>)
 8006460:	f7ff f974 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P11" ,&phase1.SG11); get_json_unsignedint(data_apps,"P12" ,&phase1.SG12);
 8006464:	4a52      	ldr	r2, [pc, #328]	@ (80065b0 <USART6_IRQHandler+0x2d8>)
 8006466:	4953      	ldr	r1, [pc, #332]	@ (80065b4 <USART6_IRQHandler+0x2dc>)
 8006468:	483b      	ldr	r0, [pc, #236]	@ (8006558 <USART6_IRQHandler+0x280>)
 800646a:	f7ff f96f 	bl	800574c <get_json_unsignedint>
 800646e:	4a52      	ldr	r2, [pc, #328]	@ (80065b8 <USART6_IRQHandler+0x2e0>)
 8006470:	4952      	ldr	r1, [pc, #328]	@ (80065bc <USART6_IRQHandler+0x2e4>)
 8006472:	4839      	ldr	r0, [pc, #228]	@ (8006558 <USART6_IRQHandler+0x280>)
 8006474:	f7ff f96a 	bl	800574c <get_json_unsignedint>

		get_json_unsignedint(data_apps,"P13" ,&phase2.SG1);  get_json_unsignedint(data_apps,"P14"  ,&phase2.SG2);
 8006478:	4a51      	ldr	r2, [pc, #324]	@ (80065c0 <USART6_IRQHandler+0x2e8>)
 800647a:	4952      	ldr	r1, [pc, #328]	@ (80065c4 <USART6_IRQHandler+0x2ec>)
 800647c:	4836      	ldr	r0, [pc, #216]	@ (8006558 <USART6_IRQHandler+0x280>)
 800647e:	f7ff f965 	bl	800574c <get_json_unsignedint>
 8006482:	4a51      	ldr	r2, [pc, #324]	@ (80065c8 <USART6_IRQHandler+0x2f0>)
 8006484:	4951      	ldr	r1, [pc, #324]	@ (80065cc <USART6_IRQHandler+0x2f4>)
 8006486:	4834      	ldr	r0, [pc, #208]	@ (8006558 <USART6_IRQHandler+0x280>)
 8006488:	f7ff f960 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P15" ,&phase2.SG3);  get_json_unsignedint(data_apps,"P16"  ,&phase2.SG4);
 800648c:	4a50      	ldr	r2, [pc, #320]	@ (80065d0 <USART6_IRQHandler+0x2f8>)
 800648e:	4951      	ldr	r1, [pc, #324]	@ (80065d4 <USART6_IRQHandler+0x2fc>)
 8006490:	4831      	ldr	r0, [pc, #196]	@ (8006558 <USART6_IRQHandler+0x280>)
 8006492:	f7ff f95b 	bl	800574c <get_json_unsignedint>
 8006496:	4a50      	ldr	r2, [pc, #320]	@ (80065d8 <USART6_IRQHandler+0x300>)
 8006498:	4950      	ldr	r1, [pc, #320]	@ (80065dc <USART6_IRQHandler+0x304>)
 800649a:	482f      	ldr	r0, [pc, #188]	@ (8006558 <USART6_IRQHandler+0x280>)
 800649c:	f7ff f956 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P17" ,&phase2.SG5);  get_json_unsignedint(data_apps,"P18"  ,&phase2.SG6);
 80064a0:	4a4f      	ldr	r2, [pc, #316]	@ (80065e0 <USART6_IRQHandler+0x308>)
 80064a2:	4950      	ldr	r1, [pc, #320]	@ (80065e4 <USART6_IRQHandler+0x30c>)
 80064a4:	482c      	ldr	r0, [pc, #176]	@ (8006558 <USART6_IRQHandler+0x280>)
 80064a6:	f7ff f951 	bl	800574c <get_json_unsignedint>
 80064aa:	4a4f      	ldr	r2, [pc, #316]	@ (80065e8 <USART6_IRQHandler+0x310>)
 80064ac:	494f      	ldr	r1, [pc, #316]	@ (80065ec <USART6_IRQHandler+0x314>)
 80064ae:	482a      	ldr	r0, [pc, #168]	@ (8006558 <USART6_IRQHandler+0x280>)
 80064b0:	f7ff f94c 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P19" ,&phase2.SG7);  get_json_unsignedint(data_apps,"P20"  ,&phase2.SG8);
 80064b4:	4a4e      	ldr	r2, [pc, #312]	@ (80065f0 <USART6_IRQHandler+0x318>)
 80064b6:	494f      	ldr	r1, [pc, #316]	@ (80065f4 <USART6_IRQHandler+0x31c>)
 80064b8:	4827      	ldr	r0, [pc, #156]	@ (8006558 <USART6_IRQHandler+0x280>)
 80064ba:	f7ff f947 	bl	800574c <get_json_unsignedint>
 80064be:	4a4e      	ldr	r2, [pc, #312]	@ (80065f8 <USART6_IRQHandler+0x320>)
 80064c0:	494e      	ldr	r1, [pc, #312]	@ (80065fc <USART6_IRQHandler+0x324>)
 80064c2:	4825      	ldr	r0, [pc, #148]	@ (8006558 <USART6_IRQHandler+0x280>)
 80064c4:	f7ff f942 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P21" ,&phase2.SG9);  get_json_unsignedint(data_apps,"P22" ,&phase2.SG10);
 80064c8:	4a4d      	ldr	r2, [pc, #308]	@ (8006600 <USART6_IRQHandler+0x328>)
 80064ca:	494e      	ldr	r1, [pc, #312]	@ (8006604 <USART6_IRQHandler+0x32c>)
 80064cc:	4822      	ldr	r0, [pc, #136]	@ (8006558 <USART6_IRQHandler+0x280>)
 80064ce:	f7ff f93d 	bl	800574c <get_json_unsignedint>
 80064d2:	4a4d      	ldr	r2, [pc, #308]	@ (8006608 <USART6_IRQHandler+0x330>)
 80064d4:	494d      	ldr	r1, [pc, #308]	@ (800660c <USART6_IRQHandler+0x334>)
 80064d6:	4820      	ldr	r0, [pc, #128]	@ (8006558 <USART6_IRQHandler+0x280>)
 80064d8:	f7ff f938 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P23" ,&phase2.SG11); get_json_unsignedint(data_apps,"P24" ,&phase2.SG12);
 80064dc:	4a4c      	ldr	r2, [pc, #304]	@ (8006610 <USART6_IRQHandler+0x338>)
 80064de:	494d      	ldr	r1, [pc, #308]	@ (8006614 <USART6_IRQHandler+0x33c>)
 80064e0:	481d      	ldr	r0, [pc, #116]	@ (8006558 <USART6_IRQHandler+0x280>)
 80064e2:	f7ff f933 	bl	800574c <get_json_unsignedint>
 80064e6:	4a4c      	ldr	r2, [pc, #304]	@ (8006618 <USART6_IRQHandler+0x340>)
 80064e8:	494c      	ldr	r1, [pc, #304]	@ (800661c <USART6_IRQHandler+0x344>)
 80064ea:	481b      	ldr	r0, [pc, #108]	@ (8006558 <USART6_IRQHandler+0x280>)
 80064ec:	f7ff f92e 	bl	800574c <get_json_unsignedint>

		get_json_unsignedint(data_apps,"P25" ,&phase3.SG1);  get_json_unsignedint(data_apps,"P26"  ,&phase3.SG2);
 80064f0:	4a4b      	ldr	r2, [pc, #300]	@ (8006620 <USART6_IRQHandler+0x348>)
 80064f2:	494c      	ldr	r1, [pc, #304]	@ (8006624 <USART6_IRQHandler+0x34c>)
 80064f4:	4818      	ldr	r0, [pc, #96]	@ (8006558 <USART6_IRQHandler+0x280>)
 80064f6:	f7ff f929 	bl	800574c <get_json_unsignedint>
 80064fa:	4a4b      	ldr	r2, [pc, #300]	@ (8006628 <USART6_IRQHandler+0x350>)
 80064fc:	494b      	ldr	r1, [pc, #300]	@ (800662c <USART6_IRQHandler+0x354>)
 80064fe:	4816      	ldr	r0, [pc, #88]	@ (8006558 <USART6_IRQHandler+0x280>)
 8006500:	f7ff f924 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P27" ,&phase3.SG3);  get_json_unsignedint(data_apps,"P28"  ,&phase3.SG4);
 8006504:	4a4a      	ldr	r2, [pc, #296]	@ (8006630 <USART6_IRQHandler+0x358>)
 8006506:	494b      	ldr	r1, [pc, #300]	@ (8006634 <USART6_IRQHandler+0x35c>)
 8006508:	4813      	ldr	r0, [pc, #76]	@ (8006558 <USART6_IRQHandler+0x280>)
 800650a:	f7ff f91f 	bl	800574c <get_json_unsignedint>
 800650e:	4a4a      	ldr	r2, [pc, #296]	@ (8006638 <USART6_IRQHandler+0x360>)
 8006510:	494a      	ldr	r1, [pc, #296]	@ (800663c <USART6_IRQHandler+0x364>)
 8006512:	4811      	ldr	r0, [pc, #68]	@ (8006558 <USART6_IRQHandler+0x280>)
 8006514:	f7ff f91a 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P29" ,&phase3.SG5);  get_json_unsignedint(data_apps,"P30"  ,&phase3.SG6);
 8006518:	4a49      	ldr	r2, [pc, #292]	@ (8006640 <USART6_IRQHandler+0x368>)
 800651a:	494a      	ldr	r1, [pc, #296]	@ (8006644 <USART6_IRQHandler+0x36c>)
 800651c:	480e      	ldr	r0, [pc, #56]	@ (8006558 <USART6_IRQHandler+0x280>)
 800651e:	f7ff f915 	bl	800574c <get_json_unsignedint>
 8006522:	4a49      	ldr	r2, [pc, #292]	@ (8006648 <USART6_IRQHandler+0x370>)
 8006524:	4949      	ldr	r1, [pc, #292]	@ (800664c <USART6_IRQHandler+0x374>)
 8006526:	480c      	ldr	r0, [pc, #48]	@ (8006558 <USART6_IRQHandler+0x280>)
 8006528:	f7ff f910 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P31" ,&phase3.SG7);  get_json_unsignedint(data_apps,"P32"  ,&phase3.SG8);
 800652c:	4a48      	ldr	r2, [pc, #288]	@ (8006650 <USART6_IRQHandler+0x378>)
 800652e:	4949      	ldr	r1, [pc, #292]	@ (8006654 <USART6_IRQHandler+0x37c>)
 8006530:	4809      	ldr	r0, [pc, #36]	@ (8006558 <USART6_IRQHandler+0x280>)
 8006532:	f7ff f90b 	bl	800574c <get_json_unsignedint>
 8006536:	4a48      	ldr	r2, [pc, #288]	@ (8006658 <USART6_IRQHandler+0x380>)
 8006538:	4948      	ldr	r1, [pc, #288]	@ (800665c <USART6_IRQHandler+0x384>)
 800653a:	4807      	ldr	r0, [pc, #28]	@ (8006558 <USART6_IRQHandler+0x280>)
 800653c:	f7ff f906 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P33" ,&phase3.SG9);  get_json_unsignedint(data_apps,"P34" ,&phase3.SG10);
 8006540:	4a47      	ldr	r2, [pc, #284]	@ (8006660 <USART6_IRQHandler+0x388>)
 8006542:	e08f      	b.n	8006664 <USART6_IRQHandler+0x38c>
 8006544:	20016c00 	.word	0x20016c00
 8006548:	2000c3d8 	.word	0x2000c3d8
 800654c:	2000eaf8 	.word	0x2000eaf8
 8006550:	2000c3e4 	.word	0x2000c3e4
 8006554:	2000c3de 	.word	0x2000c3de
 8006558:	2000c3e8 	.word	0x2000c3e8
 800655c:	2000c3e0 	.word	0x2000c3e0
 8006560:	2000eb48 	.word	0x2000eb48
 8006564:	0800e364 	.word	0x0800e364
 8006568:	2000eb4c 	.word	0x2000eb4c
 800656c:	0800e368 	.word	0x0800e368
 8006570:	2000eb50 	.word	0x2000eb50
 8006574:	0800e36c 	.word	0x0800e36c
 8006578:	2000eb54 	.word	0x2000eb54
 800657c:	0800e370 	.word	0x0800e370
 8006580:	2000eb58 	.word	0x2000eb58
 8006584:	0800e374 	.word	0x0800e374
 8006588:	2000eb5c 	.word	0x2000eb5c
 800658c:	0800e378 	.word	0x0800e378
 8006590:	2000eb60 	.word	0x2000eb60
 8006594:	0800e37c 	.word	0x0800e37c
 8006598:	2000eb64 	.word	0x2000eb64
 800659c:	0800e380 	.word	0x0800e380
 80065a0:	2000eb68 	.word	0x2000eb68
 80065a4:	0800e384 	.word	0x0800e384
 80065a8:	2000eb6c 	.word	0x2000eb6c
 80065ac:	0800e388 	.word	0x0800e388
 80065b0:	2000eb70 	.word	0x2000eb70
 80065b4:	0800e38c 	.word	0x0800e38c
 80065b8:	2000eb74 	.word	0x2000eb74
 80065bc:	0800e390 	.word	0x0800e390
 80065c0:	2000eb78 	.word	0x2000eb78
 80065c4:	0800e394 	.word	0x0800e394
 80065c8:	2000eb7c 	.word	0x2000eb7c
 80065cc:	0800e398 	.word	0x0800e398
 80065d0:	2000eb80 	.word	0x2000eb80
 80065d4:	0800e39c 	.word	0x0800e39c
 80065d8:	2000eb84 	.word	0x2000eb84
 80065dc:	0800e3a0 	.word	0x0800e3a0
 80065e0:	2000eb88 	.word	0x2000eb88
 80065e4:	0800e3a4 	.word	0x0800e3a4
 80065e8:	2000eb8c 	.word	0x2000eb8c
 80065ec:	0800e3a8 	.word	0x0800e3a8
 80065f0:	2000eb90 	.word	0x2000eb90
 80065f4:	0800e3ac 	.word	0x0800e3ac
 80065f8:	2000eb94 	.word	0x2000eb94
 80065fc:	0800e3b0 	.word	0x0800e3b0
 8006600:	2000eb98 	.word	0x2000eb98
 8006604:	0800e3b4 	.word	0x0800e3b4
 8006608:	2000eb9c 	.word	0x2000eb9c
 800660c:	0800e3b8 	.word	0x0800e3b8
 8006610:	2000eba0 	.word	0x2000eba0
 8006614:	0800e3bc 	.word	0x0800e3bc
 8006618:	2000eba4 	.word	0x2000eba4
 800661c:	0800e3c0 	.word	0x0800e3c0
 8006620:	2000eba8 	.word	0x2000eba8
 8006624:	0800e3c4 	.word	0x0800e3c4
 8006628:	2000ebac 	.word	0x2000ebac
 800662c:	0800e3c8 	.word	0x0800e3c8
 8006630:	2000ebb0 	.word	0x2000ebb0
 8006634:	0800e3cc 	.word	0x0800e3cc
 8006638:	2000ebb4 	.word	0x2000ebb4
 800663c:	0800e3d0 	.word	0x0800e3d0
 8006640:	2000ebb8 	.word	0x2000ebb8
 8006644:	0800e3d4 	.word	0x0800e3d4
 8006648:	2000ebbc 	.word	0x2000ebbc
 800664c:	0800e3d8 	.word	0x0800e3d8
 8006650:	2000ebc0 	.word	0x2000ebc0
 8006654:	0800e3dc 	.word	0x0800e3dc
 8006658:	2000ebc4 	.word	0x2000ebc4
 800665c:	0800e3e0 	.word	0x0800e3e0
 8006660:	2000ebc8 	.word	0x2000ebc8
 8006664:	499e      	ldr	r1, [pc, #632]	@ (80068e0 <USART6_IRQHandler+0x608>)
 8006666:	489f      	ldr	r0, [pc, #636]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006668:	f7ff f870 	bl	800574c <get_json_unsignedint>
 800666c:	4a9e      	ldr	r2, [pc, #632]	@ (80068e8 <USART6_IRQHandler+0x610>)
 800666e:	499f      	ldr	r1, [pc, #636]	@ (80068ec <USART6_IRQHandler+0x614>)
 8006670:	489c      	ldr	r0, [pc, #624]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006672:	f7ff f86b 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P35" ,&phase3.SG11); get_json_unsignedint(data_apps,"P36" ,&phase3.SG12);
 8006676:	4a9e      	ldr	r2, [pc, #632]	@ (80068f0 <USART6_IRQHandler+0x618>)
 8006678:	499e      	ldr	r1, [pc, #632]	@ (80068f4 <USART6_IRQHandler+0x61c>)
 800667a:	489a      	ldr	r0, [pc, #616]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 800667c:	f7ff f866 	bl	800574c <get_json_unsignedint>
 8006680:	4a9d      	ldr	r2, [pc, #628]	@ (80068f8 <USART6_IRQHandler+0x620>)
 8006682:	499e      	ldr	r1, [pc, #632]	@ (80068fc <USART6_IRQHandler+0x624>)
 8006684:	4897      	ldr	r0, [pc, #604]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006686:	f7ff f861 	bl	800574c <get_json_unsignedint>

		get_json_unsignedint(data_apps,"P37" ,&phase4.SG1);  get_json_unsignedint(data_apps,"P38"  ,&phase4.SG2);
 800668a:	4a9d      	ldr	r2, [pc, #628]	@ (8006900 <USART6_IRQHandler+0x628>)
 800668c:	499d      	ldr	r1, [pc, #628]	@ (8006904 <USART6_IRQHandler+0x62c>)
 800668e:	4895      	ldr	r0, [pc, #596]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006690:	f7ff f85c 	bl	800574c <get_json_unsignedint>
 8006694:	4a9c      	ldr	r2, [pc, #624]	@ (8006908 <USART6_IRQHandler+0x630>)
 8006696:	499d      	ldr	r1, [pc, #628]	@ (800690c <USART6_IRQHandler+0x634>)
 8006698:	4892      	ldr	r0, [pc, #584]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 800669a:	f7ff f857 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P39" ,&phase4.SG3);  get_json_unsignedint(data_apps,"P40"  ,&phase4.SG4);
 800669e:	4a9c      	ldr	r2, [pc, #624]	@ (8006910 <USART6_IRQHandler+0x638>)
 80066a0:	499c      	ldr	r1, [pc, #624]	@ (8006914 <USART6_IRQHandler+0x63c>)
 80066a2:	4890      	ldr	r0, [pc, #576]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80066a4:	f7ff f852 	bl	800574c <get_json_unsignedint>
 80066a8:	4a9b      	ldr	r2, [pc, #620]	@ (8006918 <USART6_IRQHandler+0x640>)
 80066aa:	499c      	ldr	r1, [pc, #624]	@ (800691c <USART6_IRQHandler+0x644>)
 80066ac:	488d      	ldr	r0, [pc, #564]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80066ae:	f7ff f84d 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P41" ,&phase4.SG5);  get_json_unsignedint(data_apps,"P42"  ,&phase4.SG6);
 80066b2:	4a9b      	ldr	r2, [pc, #620]	@ (8006920 <USART6_IRQHandler+0x648>)
 80066b4:	499b      	ldr	r1, [pc, #620]	@ (8006924 <USART6_IRQHandler+0x64c>)
 80066b6:	488b      	ldr	r0, [pc, #556]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80066b8:	f7ff f848 	bl	800574c <get_json_unsignedint>
 80066bc:	4a9a      	ldr	r2, [pc, #616]	@ (8006928 <USART6_IRQHandler+0x650>)
 80066be:	499b      	ldr	r1, [pc, #620]	@ (800692c <USART6_IRQHandler+0x654>)
 80066c0:	4888      	ldr	r0, [pc, #544]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80066c2:	f7ff f843 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P43" ,&phase4.SG7);  get_json_unsignedint(data_apps,"P44"  ,&phase4.SG8);
 80066c6:	4a9a      	ldr	r2, [pc, #616]	@ (8006930 <USART6_IRQHandler+0x658>)
 80066c8:	499a      	ldr	r1, [pc, #616]	@ (8006934 <USART6_IRQHandler+0x65c>)
 80066ca:	4886      	ldr	r0, [pc, #536]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80066cc:	f7ff f83e 	bl	800574c <get_json_unsignedint>
 80066d0:	4a99      	ldr	r2, [pc, #612]	@ (8006938 <USART6_IRQHandler+0x660>)
 80066d2:	499a      	ldr	r1, [pc, #616]	@ (800693c <USART6_IRQHandler+0x664>)
 80066d4:	4883      	ldr	r0, [pc, #524]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80066d6:	f7ff f839 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P45" ,&phase4.SG9);  get_json_unsignedint(data_apps,"P46" ,&phase4.SG10);
 80066da:	4a99      	ldr	r2, [pc, #612]	@ (8006940 <USART6_IRQHandler+0x668>)
 80066dc:	4999      	ldr	r1, [pc, #612]	@ (8006944 <USART6_IRQHandler+0x66c>)
 80066de:	4881      	ldr	r0, [pc, #516]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80066e0:	f7ff f834 	bl	800574c <get_json_unsignedint>
 80066e4:	4a98      	ldr	r2, [pc, #608]	@ (8006948 <USART6_IRQHandler+0x670>)
 80066e6:	4999      	ldr	r1, [pc, #612]	@ (800694c <USART6_IRQHandler+0x674>)
 80066e8:	487e      	ldr	r0, [pc, #504]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80066ea:	f7ff f82f 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P47" ,&phase4.SG11); get_json_unsignedint(data_apps,"P48" ,&phase4.SG12);
 80066ee:	4a98      	ldr	r2, [pc, #608]	@ (8006950 <USART6_IRQHandler+0x678>)
 80066f0:	4998      	ldr	r1, [pc, #608]	@ (8006954 <USART6_IRQHandler+0x67c>)
 80066f2:	487c      	ldr	r0, [pc, #496]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80066f4:	f7ff f82a 	bl	800574c <get_json_unsignedint>
 80066f8:	4a97      	ldr	r2, [pc, #604]	@ (8006958 <USART6_IRQHandler+0x680>)
 80066fa:	4998      	ldr	r1, [pc, #608]	@ (800695c <USART6_IRQHandler+0x684>)
 80066fc:	4879      	ldr	r0, [pc, #484]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80066fe:	f7ff f825 	bl	800574c <get_json_unsignedint>

		get_json_unsignedint(data_apps,"P49" ,&phase5.SG1);  get_json_unsignedint(data_apps,"P50"  ,&phase5.SG2);
 8006702:	4a97      	ldr	r2, [pc, #604]	@ (8006960 <USART6_IRQHandler+0x688>)
 8006704:	4997      	ldr	r1, [pc, #604]	@ (8006964 <USART6_IRQHandler+0x68c>)
 8006706:	4877      	ldr	r0, [pc, #476]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006708:	f7ff f820 	bl	800574c <get_json_unsignedint>
 800670c:	4a96      	ldr	r2, [pc, #600]	@ (8006968 <USART6_IRQHandler+0x690>)
 800670e:	4997      	ldr	r1, [pc, #604]	@ (800696c <USART6_IRQHandler+0x694>)
 8006710:	4874      	ldr	r0, [pc, #464]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006712:	f7ff f81b 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P51" ,&phase5.SG3);  get_json_unsignedint(data_apps,"P52"  ,&phase5.SG4);
 8006716:	4a96      	ldr	r2, [pc, #600]	@ (8006970 <USART6_IRQHandler+0x698>)
 8006718:	4996      	ldr	r1, [pc, #600]	@ (8006974 <USART6_IRQHandler+0x69c>)
 800671a:	4872      	ldr	r0, [pc, #456]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 800671c:	f7ff f816 	bl	800574c <get_json_unsignedint>
 8006720:	4a95      	ldr	r2, [pc, #596]	@ (8006978 <USART6_IRQHandler+0x6a0>)
 8006722:	4996      	ldr	r1, [pc, #600]	@ (800697c <USART6_IRQHandler+0x6a4>)
 8006724:	486f      	ldr	r0, [pc, #444]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006726:	f7ff f811 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P53" ,&phase5.SG5);  get_json_unsignedint(data_apps,"P54"  ,&phase5.SG6);
 800672a:	4a95      	ldr	r2, [pc, #596]	@ (8006980 <USART6_IRQHandler+0x6a8>)
 800672c:	4995      	ldr	r1, [pc, #596]	@ (8006984 <USART6_IRQHandler+0x6ac>)
 800672e:	486d      	ldr	r0, [pc, #436]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006730:	f7ff f80c 	bl	800574c <get_json_unsignedint>
 8006734:	4a94      	ldr	r2, [pc, #592]	@ (8006988 <USART6_IRQHandler+0x6b0>)
 8006736:	4995      	ldr	r1, [pc, #596]	@ (800698c <USART6_IRQHandler+0x6b4>)
 8006738:	486a      	ldr	r0, [pc, #424]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 800673a:	f7ff f807 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P55" ,&phase5.SG7);  get_json_unsignedint(data_apps,"P56"  ,&phase5.SG8);
 800673e:	4a94      	ldr	r2, [pc, #592]	@ (8006990 <USART6_IRQHandler+0x6b8>)
 8006740:	4994      	ldr	r1, [pc, #592]	@ (8006994 <USART6_IRQHandler+0x6bc>)
 8006742:	4868      	ldr	r0, [pc, #416]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006744:	f7ff f802 	bl	800574c <get_json_unsignedint>
 8006748:	4a93      	ldr	r2, [pc, #588]	@ (8006998 <USART6_IRQHandler+0x6c0>)
 800674a:	4994      	ldr	r1, [pc, #592]	@ (800699c <USART6_IRQHandler+0x6c4>)
 800674c:	4865      	ldr	r0, [pc, #404]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 800674e:	f7fe fffd 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P57" ,&phase5.SG9);  get_json_unsignedint(data_apps,"P58" ,&phase5.SG10);
 8006752:	4a93      	ldr	r2, [pc, #588]	@ (80069a0 <USART6_IRQHandler+0x6c8>)
 8006754:	4993      	ldr	r1, [pc, #588]	@ (80069a4 <USART6_IRQHandler+0x6cc>)
 8006756:	4863      	ldr	r0, [pc, #396]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006758:	f7fe fff8 	bl	800574c <get_json_unsignedint>
 800675c:	4a92      	ldr	r2, [pc, #584]	@ (80069a8 <USART6_IRQHandler+0x6d0>)
 800675e:	4993      	ldr	r1, [pc, #588]	@ (80069ac <USART6_IRQHandler+0x6d4>)
 8006760:	4860      	ldr	r0, [pc, #384]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006762:	f7fe fff3 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P59" ,&phase5.SG11); get_json_unsignedint(data_apps,"P60" ,&phase5.SG12);
 8006766:	4a92      	ldr	r2, [pc, #584]	@ (80069b0 <USART6_IRQHandler+0x6d8>)
 8006768:	4992      	ldr	r1, [pc, #584]	@ (80069b4 <USART6_IRQHandler+0x6dc>)
 800676a:	485e      	ldr	r0, [pc, #376]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 800676c:	f7fe ffee 	bl	800574c <get_json_unsignedint>
 8006770:	4a91      	ldr	r2, [pc, #580]	@ (80069b8 <USART6_IRQHandler+0x6e0>)
 8006772:	4992      	ldr	r1, [pc, #584]	@ (80069bc <USART6_IRQHandler+0x6e4>)
 8006774:	485b      	ldr	r0, [pc, #364]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006776:	f7fe ffe9 	bl	800574c <get_json_unsignedint>

		get_json_unsignedint(data_apps,"P61" ,&phase6.SG1);  get_json_unsignedint(data_apps,"P62"  ,&phase6.SG2);
 800677a:	4a91      	ldr	r2, [pc, #580]	@ (80069c0 <USART6_IRQHandler+0x6e8>)
 800677c:	4991      	ldr	r1, [pc, #580]	@ (80069c4 <USART6_IRQHandler+0x6ec>)
 800677e:	4859      	ldr	r0, [pc, #356]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006780:	f7fe ffe4 	bl	800574c <get_json_unsignedint>
 8006784:	4a90      	ldr	r2, [pc, #576]	@ (80069c8 <USART6_IRQHandler+0x6f0>)
 8006786:	4991      	ldr	r1, [pc, #580]	@ (80069cc <USART6_IRQHandler+0x6f4>)
 8006788:	4856      	ldr	r0, [pc, #344]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 800678a:	f7fe ffdf 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P63" ,&phase6.SG3);  get_json_unsignedint(data_apps,"P64"  ,&phase6.SG4);
 800678e:	4a90      	ldr	r2, [pc, #576]	@ (80069d0 <USART6_IRQHandler+0x6f8>)
 8006790:	4990      	ldr	r1, [pc, #576]	@ (80069d4 <USART6_IRQHandler+0x6fc>)
 8006792:	4854      	ldr	r0, [pc, #336]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006794:	f7fe ffda 	bl	800574c <get_json_unsignedint>
 8006798:	4a8f      	ldr	r2, [pc, #572]	@ (80069d8 <USART6_IRQHandler+0x700>)
 800679a:	4990      	ldr	r1, [pc, #576]	@ (80069dc <USART6_IRQHandler+0x704>)
 800679c:	4851      	ldr	r0, [pc, #324]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 800679e:	f7fe ffd5 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P65" ,&phase6.SG5);  get_json_unsignedint(data_apps,"P66"  ,&phase6.SG6);
 80067a2:	4a8f      	ldr	r2, [pc, #572]	@ (80069e0 <USART6_IRQHandler+0x708>)
 80067a4:	498f      	ldr	r1, [pc, #572]	@ (80069e4 <USART6_IRQHandler+0x70c>)
 80067a6:	484f      	ldr	r0, [pc, #316]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80067a8:	f7fe ffd0 	bl	800574c <get_json_unsignedint>
 80067ac:	4a8e      	ldr	r2, [pc, #568]	@ (80069e8 <USART6_IRQHandler+0x710>)
 80067ae:	498f      	ldr	r1, [pc, #572]	@ (80069ec <USART6_IRQHandler+0x714>)
 80067b0:	484c      	ldr	r0, [pc, #304]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80067b2:	f7fe ffcb 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P67" ,&phase6.SG7);  get_json_unsignedint(data_apps,"P68"  ,&phase6.SG8);
 80067b6:	4a8e      	ldr	r2, [pc, #568]	@ (80069f0 <USART6_IRQHandler+0x718>)
 80067b8:	498e      	ldr	r1, [pc, #568]	@ (80069f4 <USART6_IRQHandler+0x71c>)
 80067ba:	484a      	ldr	r0, [pc, #296]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80067bc:	f7fe ffc6 	bl	800574c <get_json_unsignedint>
 80067c0:	4a8d      	ldr	r2, [pc, #564]	@ (80069f8 <USART6_IRQHandler+0x720>)
 80067c2:	498e      	ldr	r1, [pc, #568]	@ (80069fc <USART6_IRQHandler+0x724>)
 80067c4:	4847      	ldr	r0, [pc, #284]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80067c6:	f7fe ffc1 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P69" ,&phase6.SG9);  get_json_unsignedint(data_apps,"P70" ,&phase6.SG10);
 80067ca:	4a8d      	ldr	r2, [pc, #564]	@ (8006a00 <USART6_IRQHandler+0x728>)
 80067cc:	498d      	ldr	r1, [pc, #564]	@ (8006a04 <USART6_IRQHandler+0x72c>)
 80067ce:	4845      	ldr	r0, [pc, #276]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80067d0:	f7fe ffbc 	bl	800574c <get_json_unsignedint>
 80067d4:	4a8c      	ldr	r2, [pc, #560]	@ (8006a08 <USART6_IRQHandler+0x730>)
 80067d6:	498d      	ldr	r1, [pc, #564]	@ (8006a0c <USART6_IRQHandler+0x734>)
 80067d8:	4842      	ldr	r0, [pc, #264]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80067da:	f7fe ffb7 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P71" ,&phase6.SG11); get_json_unsignedint(data_apps,"P72" ,&phase6.SG12);
 80067de:	4a8c      	ldr	r2, [pc, #560]	@ (8006a10 <USART6_IRQHandler+0x738>)
 80067e0:	498c      	ldr	r1, [pc, #560]	@ (8006a14 <USART6_IRQHandler+0x73c>)
 80067e2:	4840      	ldr	r0, [pc, #256]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80067e4:	f7fe ffb2 	bl	800574c <get_json_unsignedint>
 80067e8:	4a8b      	ldr	r2, [pc, #556]	@ (8006a18 <USART6_IRQHandler+0x740>)
 80067ea:	498c      	ldr	r1, [pc, #560]	@ (8006a1c <USART6_IRQHandler+0x744>)
 80067ec:	483d      	ldr	r0, [pc, #244]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80067ee:	f7fe ffad 	bl	800574c <get_json_unsignedint>

		get_json_unsignedint(data_apps,"P73" ,&phase7.SG1);  get_json_unsignedint(data_apps,"P74"  ,&phase7.SG2);
 80067f2:	4a8b      	ldr	r2, [pc, #556]	@ (8006a20 <USART6_IRQHandler+0x748>)
 80067f4:	498b      	ldr	r1, [pc, #556]	@ (8006a24 <USART6_IRQHandler+0x74c>)
 80067f6:	483b      	ldr	r0, [pc, #236]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80067f8:	f7fe ffa8 	bl	800574c <get_json_unsignedint>
 80067fc:	4a8a      	ldr	r2, [pc, #552]	@ (8006a28 <USART6_IRQHandler+0x750>)
 80067fe:	498b      	ldr	r1, [pc, #556]	@ (8006a2c <USART6_IRQHandler+0x754>)
 8006800:	4838      	ldr	r0, [pc, #224]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006802:	f7fe ffa3 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P75" ,&phase7.SG3);  get_json_unsignedint(data_apps,"P76"  ,&phase7.SG4);
 8006806:	4a8a      	ldr	r2, [pc, #552]	@ (8006a30 <USART6_IRQHandler+0x758>)
 8006808:	498a      	ldr	r1, [pc, #552]	@ (8006a34 <USART6_IRQHandler+0x75c>)
 800680a:	4836      	ldr	r0, [pc, #216]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 800680c:	f7fe ff9e 	bl	800574c <get_json_unsignedint>
 8006810:	4a89      	ldr	r2, [pc, #548]	@ (8006a38 <USART6_IRQHandler+0x760>)
 8006812:	498a      	ldr	r1, [pc, #552]	@ (8006a3c <USART6_IRQHandler+0x764>)
 8006814:	4833      	ldr	r0, [pc, #204]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006816:	f7fe ff99 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P77" ,&phase7.SG5);  get_json_unsignedint(data_apps,"P78"  ,&phase7.SG6);
 800681a:	4a89      	ldr	r2, [pc, #548]	@ (8006a40 <USART6_IRQHandler+0x768>)
 800681c:	4989      	ldr	r1, [pc, #548]	@ (8006a44 <USART6_IRQHandler+0x76c>)
 800681e:	4831      	ldr	r0, [pc, #196]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006820:	f7fe ff94 	bl	800574c <get_json_unsignedint>
 8006824:	4a88      	ldr	r2, [pc, #544]	@ (8006a48 <USART6_IRQHandler+0x770>)
 8006826:	4989      	ldr	r1, [pc, #548]	@ (8006a4c <USART6_IRQHandler+0x774>)
 8006828:	482e      	ldr	r0, [pc, #184]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 800682a:	f7fe ff8f 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P79" ,&phase7.SG7);  get_json_unsignedint(data_apps,"P80"  ,&phase7.SG8);
 800682e:	4a88      	ldr	r2, [pc, #544]	@ (8006a50 <USART6_IRQHandler+0x778>)
 8006830:	4988      	ldr	r1, [pc, #544]	@ (8006a54 <USART6_IRQHandler+0x77c>)
 8006832:	482c      	ldr	r0, [pc, #176]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006834:	f7fe ff8a 	bl	800574c <get_json_unsignedint>
 8006838:	4a87      	ldr	r2, [pc, #540]	@ (8006a58 <USART6_IRQHandler+0x780>)
 800683a:	4988      	ldr	r1, [pc, #544]	@ (8006a5c <USART6_IRQHandler+0x784>)
 800683c:	4829      	ldr	r0, [pc, #164]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 800683e:	f7fe ff85 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P81" ,&phase7.SG9);  get_json_unsignedint(data_apps,"P82" ,&phase7.SG10);
 8006842:	4a87      	ldr	r2, [pc, #540]	@ (8006a60 <USART6_IRQHandler+0x788>)
 8006844:	4987      	ldr	r1, [pc, #540]	@ (8006a64 <USART6_IRQHandler+0x78c>)
 8006846:	4827      	ldr	r0, [pc, #156]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006848:	f7fe ff80 	bl	800574c <get_json_unsignedint>
 800684c:	4a86      	ldr	r2, [pc, #536]	@ (8006a68 <USART6_IRQHandler+0x790>)
 800684e:	4987      	ldr	r1, [pc, #540]	@ (8006a6c <USART6_IRQHandler+0x794>)
 8006850:	4824      	ldr	r0, [pc, #144]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006852:	f7fe ff7b 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P83" ,&phase7.SG11); get_json_unsignedint(data_apps,"P84" ,&phase7.SG12);
 8006856:	4a86      	ldr	r2, [pc, #536]	@ (8006a70 <USART6_IRQHandler+0x798>)
 8006858:	4986      	ldr	r1, [pc, #536]	@ (8006a74 <USART6_IRQHandler+0x79c>)
 800685a:	4822      	ldr	r0, [pc, #136]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 800685c:	f7fe ff76 	bl	800574c <get_json_unsignedint>
 8006860:	4a85      	ldr	r2, [pc, #532]	@ (8006a78 <USART6_IRQHandler+0x7a0>)
 8006862:	4986      	ldr	r1, [pc, #536]	@ (8006a7c <USART6_IRQHandler+0x7a4>)
 8006864:	481f      	ldr	r0, [pc, #124]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006866:	f7fe ff71 	bl	800574c <get_json_unsignedint>

		get_json_unsignedint(data_apps,"P85" ,&phase8.SG1);  get_json_unsignedint(data_apps,"P86"  ,&phase8.SG2);
 800686a:	4a85      	ldr	r2, [pc, #532]	@ (8006a80 <USART6_IRQHandler+0x7a8>)
 800686c:	4985      	ldr	r1, [pc, #532]	@ (8006a84 <USART6_IRQHandler+0x7ac>)
 800686e:	481d      	ldr	r0, [pc, #116]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006870:	f7fe ff6c 	bl	800574c <get_json_unsignedint>
 8006874:	4a84      	ldr	r2, [pc, #528]	@ (8006a88 <USART6_IRQHandler+0x7b0>)
 8006876:	4985      	ldr	r1, [pc, #532]	@ (8006a8c <USART6_IRQHandler+0x7b4>)
 8006878:	481a      	ldr	r0, [pc, #104]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 800687a:	f7fe ff67 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P87" ,&phase8.SG3);  get_json_unsignedint(data_apps,"P88"  ,&phase8.SG4);
 800687e:	4a84      	ldr	r2, [pc, #528]	@ (8006a90 <USART6_IRQHandler+0x7b8>)
 8006880:	4984      	ldr	r1, [pc, #528]	@ (8006a94 <USART6_IRQHandler+0x7bc>)
 8006882:	4818      	ldr	r0, [pc, #96]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006884:	f7fe ff62 	bl	800574c <get_json_unsignedint>
 8006888:	4a83      	ldr	r2, [pc, #524]	@ (8006a98 <USART6_IRQHandler+0x7c0>)
 800688a:	4984      	ldr	r1, [pc, #528]	@ (8006a9c <USART6_IRQHandler+0x7c4>)
 800688c:	4815      	ldr	r0, [pc, #84]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 800688e:	f7fe ff5d 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P89" ,&phase8.SG5);  get_json_unsignedint(data_apps,"P90"  ,&phase8.SG6);
 8006892:	4a83      	ldr	r2, [pc, #524]	@ (8006aa0 <USART6_IRQHandler+0x7c8>)
 8006894:	4983      	ldr	r1, [pc, #524]	@ (8006aa4 <USART6_IRQHandler+0x7cc>)
 8006896:	4813      	ldr	r0, [pc, #76]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 8006898:	f7fe ff58 	bl	800574c <get_json_unsignedint>
 800689c:	4a82      	ldr	r2, [pc, #520]	@ (8006aa8 <USART6_IRQHandler+0x7d0>)
 800689e:	4983      	ldr	r1, [pc, #524]	@ (8006aac <USART6_IRQHandler+0x7d4>)
 80068a0:	4810      	ldr	r0, [pc, #64]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80068a2:	f7fe ff53 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P91" ,&phase8.SG7);  get_json_unsignedint(data_apps,"P92"  ,&phase8.SG8);
 80068a6:	4a82      	ldr	r2, [pc, #520]	@ (8006ab0 <USART6_IRQHandler+0x7d8>)
 80068a8:	4982      	ldr	r1, [pc, #520]	@ (8006ab4 <USART6_IRQHandler+0x7dc>)
 80068aa:	480e      	ldr	r0, [pc, #56]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80068ac:	f7fe ff4e 	bl	800574c <get_json_unsignedint>
 80068b0:	4a81      	ldr	r2, [pc, #516]	@ (8006ab8 <USART6_IRQHandler+0x7e0>)
 80068b2:	4982      	ldr	r1, [pc, #520]	@ (8006abc <USART6_IRQHandler+0x7e4>)
 80068b4:	480b      	ldr	r0, [pc, #44]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80068b6:	f7fe ff49 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P93" ,&phase8.SG9);  get_json_unsignedint(data_apps,"P94" ,&phase8.SG10);
 80068ba:	4a81      	ldr	r2, [pc, #516]	@ (8006ac0 <USART6_IRQHandler+0x7e8>)
 80068bc:	4981      	ldr	r1, [pc, #516]	@ (8006ac4 <USART6_IRQHandler+0x7ec>)
 80068be:	4809      	ldr	r0, [pc, #36]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80068c0:	f7fe ff44 	bl	800574c <get_json_unsignedint>
 80068c4:	4a80      	ldr	r2, [pc, #512]	@ (8006ac8 <USART6_IRQHandler+0x7f0>)
 80068c6:	4981      	ldr	r1, [pc, #516]	@ (8006acc <USART6_IRQHandler+0x7f4>)
 80068c8:	4806      	ldr	r0, [pc, #24]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80068ca:	f7fe ff3f 	bl	800574c <get_json_unsignedint>
		get_json_unsignedint(data_apps,"P95" ,&phase8.SG11); get_json_unsignedint(data_apps,"P96" ,&phase8.SG12);
 80068ce:	4a80      	ldr	r2, [pc, #512]	@ (8006ad0 <USART6_IRQHandler+0x7f8>)
 80068d0:	4980      	ldr	r1, [pc, #512]	@ (8006ad4 <USART6_IRQHandler+0x7fc>)
 80068d2:	4804      	ldr	r0, [pc, #16]	@ (80068e4 <USART6_IRQHandler+0x60c>)
 80068d4:	f7fe ff3a 	bl	800574c <get_json_unsignedint>
 80068d8:	4a7f      	ldr	r2, [pc, #508]	@ (8006ad8 <USART6_IRQHandler+0x800>)
 80068da:	4980      	ldr	r1, [pc, #512]	@ (8006adc <USART6_IRQHandler+0x804>)
 80068dc:	e100      	b.n	8006ae0 <USART6_IRQHandler+0x808>
 80068de:	bf00      	nop
 80068e0:	0800e3e4 	.word	0x0800e3e4
 80068e4:	2000c3e8 	.word	0x2000c3e8
 80068e8:	2000ebcc 	.word	0x2000ebcc
 80068ec:	0800e3e8 	.word	0x0800e3e8
 80068f0:	2000ebd0 	.word	0x2000ebd0
 80068f4:	0800e3ec 	.word	0x0800e3ec
 80068f8:	2000ebd4 	.word	0x2000ebd4
 80068fc:	0800e3f0 	.word	0x0800e3f0
 8006900:	2000ebd8 	.word	0x2000ebd8
 8006904:	0800e3f4 	.word	0x0800e3f4
 8006908:	2000ebdc 	.word	0x2000ebdc
 800690c:	0800e3f8 	.word	0x0800e3f8
 8006910:	2000ebe0 	.word	0x2000ebe0
 8006914:	0800e3fc 	.word	0x0800e3fc
 8006918:	2000ebe4 	.word	0x2000ebe4
 800691c:	0800e400 	.word	0x0800e400
 8006920:	2000ebe8 	.word	0x2000ebe8
 8006924:	0800e404 	.word	0x0800e404
 8006928:	2000ebec 	.word	0x2000ebec
 800692c:	0800e408 	.word	0x0800e408
 8006930:	2000ebf0 	.word	0x2000ebf0
 8006934:	0800e40c 	.word	0x0800e40c
 8006938:	2000ebf4 	.word	0x2000ebf4
 800693c:	0800e410 	.word	0x0800e410
 8006940:	2000ebf8 	.word	0x2000ebf8
 8006944:	0800e414 	.word	0x0800e414
 8006948:	2000ebfc 	.word	0x2000ebfc
 800694c:	0800e418 	.word	0x0800e418
 8006950:	2000ec00 	.word	0x2000ec00
 8006954:	0800e41c 	.word	0x0800e41c
 8006958:	2000ec04 	.word	0x2000ec04
 800695c:	0800e420 	.word	0x0800e420
 8006960:	2000ec08 	.word	0x2000ec08
 8006964:	0800e424 	.word	0x0800e424
 8006968:	2000ec0c 	.word	0x2000ec0c
 800696c:	0800e428 	.word	0x0800e428
 8006970:	2000ec10 	.word	0x2000ec10
 8006974:	0800e42c 	.word	0x0800e42c
 8006978:	2000ec14 	.word	0x2000ec14
 800697c:	0800e430 	.word	0x0800e430
 8006980:	2000ec18 	.word	0x2000ec18
 8006984:	0800e434 	.word	0x0800e434
 8006988:	2000ec1c 	.word	0x2000ec1c
 800698c:	0800e438 	.word	0x0800e438
 8006990:	2000ec20 	.word	0x2000ec20
 8006994:	0800e43c 	.word	0x0800e43c
 8006998:	2000ec24 	.word	0x2000ec24
 800699c:	0800e440 	.word	0x0800e440
 80069a0:	2000ec28 	.word	0x2000ec28
 80069a4:	0800e444 	.word	0x0800e444
 80069a8:	2000ec2c 	.word	0x2000ec2c
 80069ac:	0800e448 	.word	0x0800e448
 80069b0:	2000ec30 	.word	0x2000ec30
 80069b4:	0800e44c 	.word	0x0800e44c
 80069b8:	2000ec34 	.word	0x2000ec34
 80069bc:	0800e450 	.word	0x0800e450
 80069c0:	2000ec38 	.word	0x2000ec38
 80069c4:	0800e454 	.word	0x0800e454
 80069c8:	2000ec3c 	.word	0x2000ec3c
 80069cc:	0800e458 	.word	0x0800e458
 80069d0:	2000ec40 	.word	0x2000ec40
 80069d4:	0800e45c 	.word	0x0800e45c
 80069d8:	2000ec44 	.word	0x2000ec44
 80069dc:	0800e460 	.word	0x0800e460
 80069e0:	2000ec48 	.word	0x2000ec48
 80069e4:	0800e464 	.word	0x0800e464
 80069e8:	2000ec4c 	.word	0x2000ec4c
 80069ec:	0800e468 	.word	0x0800e468
 80069f0:	2000ec50 	.word	0x2000ec50
 80069f4:	0800e46c 	.word	0x0800e46c
 80069f8:	2000ec54 	.word	0x2000ec54
 80069fc:	0800e470 	.word	0x0800e470
 8006a00:	2000ec58 	.word	0x2000ec58
 8006a04:	0800e474 	.word	0x0800e474
 8006a08:	2000ec5c 	.word	0x2000ec5c
 8006a0c:	0800e478 	.word	0x0800e478
 8006a10:	2000ec60 	.word	0x2000ec60
 8006a14:	0800e47c 	.word	0x0800e47c
 8006a18:	2000ec64 	.word	0x2000ec64
 8006a1c:	0800e480 	.word	0x0800e480
 8006a20:	2000ec68 	.word	0x2000ec68
 8006a24:	0800e484 	.word	0x0800e484
 8006a28:	2000ec6c 	.word	0x2000ec6c
 8006a2c:	0800e488 	.word	0x0800e488
 8006a30:	2000ec70 	.word	0x2000ec70
 8006a34:	0800e48c 	.word	0x0800e48c
 8006a38:	2000ec74 	.word	0x2000ec74
 8006a3c:	0800e490 	.word	0x0800e490
 8006a40:	2000ec78 	.word	0x2000ec78
 8006a44:	0800e494 	.word	0x0800e494
 8006a48:	2000ec7c 	.word	0x2000ec7c
 8006a4c:	0800e498 	.word	0x0800e498
 8006a50:	2000ec80 	.word	0x2000ec80
 8006a54:	0800e49c 	.word	0x0800e49c
 8006a58:	2000ec84 	.word	0x2000ec84
 8006a5c:	0800e4a0 	.word	0x0800e4a0
 8006a60:	2000ec88 	.word	0x2000ec88
 8006a64:	0800e4a4 	.word	0x0800e4a4
 8006a68:	2000ec8c 	.word	0x2000ec8c
 8006a6c:	0800e4a8 	.word	0x0800e4a8
 8006a70:	2000ec90 	.word	0x2000ec90
 8006a74:	0800e4ac 	.word	0x0800e4ac
 8006a78:	2000ec94 	.word	0x2000ec94
 8006a7c:	0800e4b0 	.word	0x0800e4b0
 8006a80:	2000ec98 	.word	0x2000ec98
 8006a84:	0800e4b4 	.word	0x0800e4b4
 8006a88:	2000ec9c 	.word	0x2000ec9c
 8006a8c:	0800e4b8 	.word	0x0800e4b8
 8006a90:	2000eca0 	.word	0x2000eca0
 8006a94:	0800e4bc 	.word	0x0800e4bc
 8006a98:	2000eca4 	.word	0x2000eca4
 8006a9c:	0800e4c0 	.word	0x0800e4c0
 8006aa0:	2000eca8 	.word	0x2000eca8
 8006aa4:	0800e4c4 	.word	0x0800e4c4
 8006aa8:	2000ecac 	.word	0x2000ecac
 8006aac:	0800e4c8 	.word	0x0800e4c8
 8006ab0:	2000ecb0 	.word	0x2000ecb0
 8006ab4:	0800e4cc 	.word	0x0800e4cc
 8006ab8:	2000ecb4 	.word	0x2000ecb4
 8006abc:	0800e4d0 	.word	0x0800e4d0
 8006ac0:	2000ecb8 	.word	0x2000ecb8
 8006ac4:	0800e4d4 	.word	0x0800e4d4
 8006ac8:	2000ecbc 	.word	0x2000ecbc
 8006acc:	0800e4d8 	.word	0x0800e4d8
 8006ad0:	2000ecc0 	.word	0x2000ecc0
 8006ad4:	0800e4dc 	.word	0x0800e4dc
 8006ad8:	2000ecc4 	.word	0x2000ecc4
 8006adc:	0800e4e0 	.word	0x0800e4e0
 8006ae0:	4855      	ldr	r0, [pc, #340]	@ (8006c38 <USART6_IRQHandler+0x960>)
 8006ae2:	f7fe fe33 	bl	800574c <get_json_unsignedint>
		for(int i=0;i<sizeof(data_apps);i++){
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	e007      	b.n	8006afc <USART6_IRQHandler+0x824>
			data_apps[i] = NULL;
 8006aec:	4a52      	ldr	r2, [pc, #328]	@ (8006c38 <USART6_IRQHandler+0x960>)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4413      	add	r3, r2
 8006af2:	2200      	movs	r2, #0
 8006af4:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(data_apps);i++){
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	3301      	adds	r3, #1
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d9f2      	bls.n	8006aec <USART6_IRQHandler+0x814>
		}
		update_data_a = 0;
 8006b06:	4b4d      	ldr	r3, [pc, #308]	@ (8006c3c <USART6_IRQHandler+0x964>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	801a      	strh	r2, [r3, #0]

		setting_changed=1;
 8006b0c:	4b4c      	ldr	r3, [pc, #304]	@ (8006c40 <USART6_IRQHandler+0x968>)
 8006b0e:	2201      	movs	r2, #1
 8006b10:	701a      	strb	r2, [r3, #0]
	}
 	if(update_data_a == 1 && topic_apps[0] == 'B'){
 8006b12:	4b4a      	ldr	r3, [pc, #296]	@ (8006c3c <USART6_IRQHandler+0x964>)
 8006b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	f040 8088 	bne.w	8006c2e <USART6_IRQHandler+0x956>
 8006b1e:	4b49      	ldr	r3, [pc, #292]	@ (8006c44 <USART6_IRQHandler+0x96c>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	2b42      	cmp	r3, #66	@ 0x42
 8006b24:	f040 8083 	bne.w	8006c2e <USART6_IRQHandler+0x956>
 		unsigned int status;
 		get_json_unsignedint(data_apps,"B1" ,&status);
 8006b28:	1d3b      	adds	r3, r7, #4
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	4946      	ldr	r1, [pc, #280]	@ (8006c48 <USART6_IRQHandler+0x970>)
 8006b2e:	4842      	ldr	r0, [pc, #264]	@ (8006c38 <USART6_IRQHandler+0x960>)
 8006b30:	f7fe fe0c 	bl	800574c <get_json_unsignedint>

 		switch(status){
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d83f      	bhi.n	8006bbc <USART6_IRQHandler+0x8e4>
 8006b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b44 <USART6_IRQHandler+0x86c>)
 8006b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b42:	bf00      	nop
 8006b44:	08006b55 	.word	0x08006b55
 8006b48:	08006b6f 	.word	0x08006b6f
 8006b4c:	08006b89 	.word	0x08006b89
 8006b50:	08006ba3 	.word	0x08006ba3
 		case(1):
 				state.normal=1;
 8006b54:	4b3d      	ldr	r3, [pc, #244]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006b56:	2201      	movs	r2, #1
 8006b58:	709a      	strb	r2, [r3, #2]
 				state.hold=0;
 8006b5a:	4b3c      	ldr	r3, [pc, #240]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	70da      	strb	r2, [r3, #3]
 				state.skip=0;
 8006b60:	4b3a      	ldr	r3, [pc, #232]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	711a      	strb	r2, [r3, #4]
 				state.flasher=0;
 8006b66:	4b39      	ldr	r3, [pc, #228]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	715a      	strb	r2, [r3, #5]
 				break;
 8006b6c:	e026      	b.n	8006bbc <USART6_IRQHandler+0x8e4>
 		case(2):
				state.normal=0;
 8006b6e:	4b37      	ldr	r3, [pc, #220]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	709a      	strb	r2, [r3, #2]
				state.hold=1;
 8006b74:	4b35      	ldr	r3, [pc, #212]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006b76:	2201      	movs	r2, #1
 8006b78:	70da      	strb	r2, [r3, #3]
				state.skip=0;
 8006b7a:	4b34      	ldr	r3, [pc, #208]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	711a      	strb	r2, [r3, #4]
				state.flasher=0;
 8006b80:	4b32      	ldr	r3, [pc, #200]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	715a      	strb	r2, [r3, #5]
				break;
 8006b86:	e019      	b.n	8006bbc <USART6_IRQHandler+0x8e4>
 		case(3):
				state.normal=0;
 8006b88:	4b30      	ldr	r3, [pc, #192]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	709a      	strb	r2, [r3, #2]
				state.hold=0;
 8006b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	70da      	strb	r2, [r3, #3]
				state.skip=1;
 8006b94:	4b2d      	ldr	r3, [pc, #180]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006b96:	2201      	movs	r2, #1
 8006b98:	711a      	strb	r2, [r3, #4]
				state.flasher=0;
 8006b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	715a      	strb	r2, [r3, #5]
				break;
 8006ba0:	e00c      	b.n	8006bbc <USART6_IRQHandler+0x8e4>
 		case(4):
				state.normal=0;
 8006ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	709a      	strb	r2, [r3, #2]
				state.hold=0;
 8006ba8:	4b28      	ldr	r3, [pc, #160]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	70da      	strb	r2, [r3, #3]
				state.skip=0;
 8006bae:	4b27      	ldr	r3, [pc, #156]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	711a      	strb	r2, [r3, #4]
				state.flasher=1;
 8006bb4:	4b25      	ldr	r3, [pc, #148]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	715a      	strb	r2, [r3, #5]
				break;
 8006bba:	bf00      	nop

 		}
 		for(int i=0;i<sizeof(data_apps);i++){
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60bb      	str	r3, [r7, #8]
 8006bc0:	e007      	b.n	8006bd2 <USART6_IRQHandler+0x8fa>
 					data_apps[i] = NULL;
 8006bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8006c38 <USART6_IRQHandler+0x960>)
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	2200      	movs	r2, #0
 8006bca:	701a      	strb	r2, [r3, #0]
 		for(int i=0;i<sizeof(data_apps);i++){
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	60bb      	str	r3, [r7, #8]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d9f2      	bls.n	8006bc2 <USART6_IRQHandler+0x8ea>
 		}

 		sprintf(send,"{\"D1\":%d,\"D2\":%d,\"D3\":%d,\"D4\":%d,\"D5\":%d,\"D6\":%d}\n",
 				state.power,state.system,state.normal,state.hold, state.skip, state.flasher);
 8006bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 		sprintf(send,"{\"D1\":%d,\"D2\":%d,\"D3\":%d,\"D4\":%d,\"D5\":%d,\"D6\":%d}\n",
 8006be0:	461c      	mov	r4, r3
 				state.power,state.system,state.normal,state.hold, state.skip, state.flasher);
 8006be2:	4b1a      	ldr	r3, [pc, #104]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006be4:	785b      	ldrb	r3, [r3, #1]
 		sprintf(send,"{\"D1\":%d,\"D2\":%d,\"D3\":%d,\"D4\":%d,\"D5\":%d,\"D6\":%d}\n",
 8006be6:	461d      	mov	r5, r3
 				state.power,state.system,state.normal,state.hold, state.skip, state.flasher);
 8006be8:	4b18      	ldr	r3, [pc, #96]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006bea:	789b      	ldrb	r3, [r3, #2]
 		sprintf(send,"{\"D1\":%d,\"D2\":%d,\"D3\":%d,\"D4\":%d,\"D5\":%d,\"D6\":%d}\n",
 8006bec:	461a      	mov	r2, r3
 				state.power,state.system,state.normal,state.hold, state.skip, state.flasher);
 8006bee:	4b17      	ldr	r3, [pc, #92]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006bf0:	78db      	ldrb	r3, [r3, #3]
 		sprintf(send,"{\"D1\":%d,\"D2\":%d,\"D3\":%d,\"D4\":%d,\"D5\":%d,\"D6\":%d}\n",
 8006bf2:	4619      	mov	r1, r3
 				state.power,state.system,state.normal,state.hold, state.skip, state.flasher);
 8006bf4:	4b15      	ldr	r3, [pc, #84]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006bf6:	791b      	ldrb	r3, [r3, #4]
 		sprintf(send,"{\"D1\":%d,\"D2\":%d,\"D3\":%d,\"D4\":%d,\"D5\":%d,\"D6\":%d}\n",
 8006bf8:	4618      	mov	r0, r3
 				state.power,state.system,state.normal,state.hold, state.skip, state.flasher);
 8006bfa:	4b14      	ldr	r3, [pc, #80]	@ (8006c4c <USART6_IRQHandler+0x974>)
 8006bfc:	795b      	ldrb	r3, [r3, #5]
 		sprintf(send,"{\"D1\":%d,\"D2\":%d,\"D3\":%d,\"D4\":%d,\"D5\":%d,\"D6\":%d}\n",
 8006bfe:	9303      	str	r3, [sp, #12]
 8006c00:	9002      	str	r0, [sp, #8]
 8006c02:	9101      	str	r1, [sp, #4]
 8006c04:	9200      	str	r2, [sp, #0]
 8006c06:	462b      	mov	r3, r5
 8006c08:	4622      	mov	r2, r4
 8006c0a:	4911      	ldr	r1, [pc, #68]	@ (8006c50 <USART6_IRQHandler+0x978>)
 8006c0c:	4811      	ldr	r0, [pc, #68]	@ (8006c54 <USART6_IRQHandler+0x97c>)
 8006c0e:	f005 f941 	bl	800be94 <siprintf>
 		HAL_UART_Transmit(&huart6, (uint8_t *)send, strlen(send), HAL_MAX_DELAY);
 8006c12:	4810      	ldr	r0, [pc, #64]	@ (8006c54 <USART6_IRQHandler+0x97c>)
 8006c14:	f7f9 fadc 	bl	80001d0 <strlen>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c20:	490c      	ldr	r1, [pc, #48]	@ (8006c54 <USART6_IRQHandler+0x97c>)
 8006c22:	480d      	ldr	r0, [pc, #52]	@ (8006c58 <USART6_IRQHandler+0x980>)
 8006c24:	f003 ff70 	bl	800ab08 <HAL_UART_Transmit>

 		update_data_a = 0;
 8006c28:	4b04      	ldr	r3, [pc, #16]	@ (8006c3c <USART6_IRQHandler+0x964>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	801a      	strh	r2, [r3, #0]
 	}
  /* USER CODE END USART6_IRQn 1 */
}
 8006c2e:	bf00      	nop
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bdb0      	pop	{r4, r5, r7, pc}
 8006c36:	bf00      	nop
 8006c38:	2000c3e8 	.word	0x2000c3e8
 8006c3c:	2000c3e0 	.word	0x2000c3e0
 8006c40:	2000f48b 	.word	0x2000f48b
 8006c44:	2000eaf8 	.word	0x2000eaf8
 8006c48:	0800e4e4 	.word	0x0800e4e4
 8006c4c:	2000f444 	.word	0x2000f444
 8006c50:	0800e4e8 	.word	0x0800e4e8
 8006c54:	200075b8 	.word	0x200075b8
 8006c58:	20016c00 	.word	0x20016c00

08006c5c <command_toggle_y>:

/* USER CODE BEGIN 1 */
void command_toggle_y(uint8_t sig)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	4603      	mov	r3, r0
 8006c64:	71fb      	strb	r3, [r7, #7]
	if(SG[sig][1] == 0) SG[sig][1]=1;
 8006c66:	79fa      	ldrb	r2, [r7, #7]
 8006c68:	4910      	ldr	r1, [pc, #64]	@ (8006cac <command_toggle_y+0x50>)
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	4413      	add	r3, r2
 8006c70:	440b      	add	r3, r1
 8006c72:	3301      	adds	r3, #1
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d109      	bne.n	8006c8e <command_toggle_y+0x32>
 8006c7a:	79fa      	ldrb	r2, [r7, #7]
 8006c7c:	490b      	ldr	r1, [pc, #44]	@ (8006cac <command_toggle_y+0x50>)
 8006c7e:	4613      	mov	r3, r2
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	4413      	add	r3, r2
 8006c84:	440b      	add	r3, r1
 8006c86:	3301      	adds	r3, #1
 8006c88:	2201      	movs	r2, #1
 8006c8a:	701a      	strb	r2, [r3, #0]
	else SG[sig][1]=0;
}
 8006c8c:	e008      	b.n	8006ca0 <command_toggle_y+0x44>
	else SG[sig][1]=0;
 8006c8e:	79fa      	ldrb	r2, [r7, #7]
 8006c90:	4906      	ldr	r1, [pc, #24]	@ (8006cac <command_toggle_y+0x50>)
 8006c92:	4613      	mov	r3, r2
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	4413      	add	r3, r2
 8006c98:	440b      	add	r3, r1
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	701a      	strb	r2, [r3, #0]
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	2000ecc8 	.word	0x2000ecc8

08006cb0 <command_toggle_g>:
void command_toggle_g(uint8_t sig)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	71fb      	strb	r3, [r7, #7]
	if(SG[sig][2] == 0) SG[sig][2]=1;
 8006cba:	79fa      	ldrb	r2, [r7, #7]
 8006cbc:	4910      	ldr	r1, [pc, #64]	@ (8006d00 <command_toggle_g+0x50>)
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	4413      	add	r3, r2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	3302      	adds	r3, #2
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d109      	bne.n	8006ce2 <command_toggle_g+0x32>
 8006cce:	79fa      	ldrb	r2, [r7, #7]
 8006cd0:	490b      	ldr	r1, [pc, #44]	@ (8006d00 <command_toggle_g+0x50>)
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	4413      	add	r3, r2
 8006cd8:	440b      	add	r3, r1
 8006cda:	3302      	adds	r3, #2
 8006cdc:	2201      	movs	r2, #1
 8006cde:	701a      	strb	r2, [r3, #0]
	else SG[sig][2]=0;
}
 8006ce0:	e008      	b.n	8006cf4 <command_toggle_g+0x44>
	else SG[sig][2]=0;
 8006ce2:	79fa      	ldrb	r2, [r7, #7]
 8006ce4:	4906      	ldr	r1, [pc, #24]	@ (8006d00 <command_toggle_g+0x50>)
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	4413      	add	r3, r2
 8006cec:	440b      	add	r3, r1
 8006cee:	3302      	adds	r3, #2
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	2000ecc8 	.word	0x2000ecc8

08006d04 <send_section_D>:
uint32_t Green_Conflict22[3];
void send_section_D(void)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af02      	add	r7, sp, #8
	Green_Conflict22[0]=0;
 8006d0a:	4ba0      	ldr	r3, [pc, #640]	@ (8006f8c <send_section_D+0x288>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]
	Green_Conflict22[1]=0;
 8006d10:	4b9e      	ldr	r3, [pc, #632]	@ (8006f8c <send_section_D+0x288>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	605a      	str	r2, [r3, #4]
	Green_Conflict22[2]=0;
 8006d16:	4b9d      	ldr	r3, [pc, #628]	@ (8006f8c <send_section_D+0x288>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	609a      	str	r2, [r3, #8]

	for(uint8_t p=0; p<22; p++)
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	73fb      	strb	r3, [r7, #15]
 8006d20:	e02b      	b.n	8006d7a <send_section_D+0x76>
	{
		Green_Conflict22[0] = Green_Conflict22[0]|((flag_bypass_GC[p] & 0x01) << p);
 8006d22:	4b9a      	ldr	r3, [pc, #616]	@ (8006f8c <send_section_D+0x288>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	7bfa      	ldrb	r2, [r7, #15]
 8006d28:	4999      	ldr	r1, [pc, #612]	@ (8006f90 <send_section_D+0x28c>)
 8006d2a:	5c8a      	ldrb	r2, [r1, r2]
 8006d2c:	f002 0101 	and.w	r1, r2, #1
 8006d30:	7bfa      	ldrb	r2, [r7, #15]
 8006d32:	fa01 f202 	lsl.w	r2, r1, r2
 8006d36:	4313      	orrs	r3, r2
 8006d38:	4a94      	ldr	r2, [pc, #592]	@ (8006f8c <send_section_D+0x288>)
 8006d3a:	6013      	str	r3, [r2, #0]
		Green_Conflict22[1] = Green_Conflict22[1]|((flag_bypass_GC[22+p] & 0x01) << p);
 8006d3c:	4b93      	ldr	r3, [pc, #588]	@ (8006f8c <send_section_D+0x288>)
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	7bfa      	ldrb	r2, [r7, #15]
 8006d42:	3216      	adds	r2, #22
 8006d44:	4992      	ldr	r1, [pc, #584]	@ (8006f90 <send_section_D+0x28c>)
 8006d46:	5c8a      	ldrb	r2, [r1, r2]
 8006d48:	f002 0101 	and.w	r1, r2, #1
 8006d4c:	7bfa      	ldrb	r2, [r7, #15]
 8006d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8006d52:	4313      	orrs	r3, r2
 8006d54:	4a8d      	ldr	r2, [pc, #564]	@ (8006f8c <send_section_D+0x288>)
 8006d56:	6053      	str	r3, [r2, #4]
		Green_Conflict22[2] = Green_Conflict22[2]|((flag_bypass_GC[44+p] & 0x01) << p); //
 8006d58:	4b8c      	ldr	r3, [pc, #560]	@ (8006f8c <send_section_D+0x288>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	7bfa      	ldrb	r2, [r7, #15]
 8006d5e:	322c      	adds	r2, #44	@ 0x2c
 8006d60:	498b      	ldr	r1, [pc, #556]	@ (8006f90 <send_section_D+0x28c>)
 8006d62:	5c8a      	ldrb	r2, [r1, r2]
 8006d64:	f002 0101 	and.w	r1, r2, #1
 8006d68:	7bfa      	ldrb	r2, [r7, #15]
 8006d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	4a86      	ldr	r2, [pc, #536]	@ (8006f8c <send_section_D+0x288>)
 8006d72:	6093      	str	r3, [r2, #8]
	for(uint8_t p=0; p<22; p++)
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	3301      	adds	r3, #1
 8006d78:	73fb      	strb	r3, [r7, #15]
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
 8006d7c:	2b15      	cmp	r3, #21
 8006d7e:	d9d0      	bls.n	8006d22 <send_section_D+0x1e>
	}

	sprintf(send_i,"%d;%d;%d;%d;",
 8006d80:	4b82      	ldr	r3, [pc, #520]	@ (8006f8c <send_section_D+0x288>)
 8006d82:	6819      	ldr	r1, [r3, #0]
 8006d84:	4b81      	ldr	r3, [pc, #516]	@ (8006f8c <send_section_D+0x288>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	4a80      	ldr	r2, [pc, #512]	@ (8006f8c <send_section_D+0x288>)
 8006d8a:	6892      	ldr	r2, [r2, #8]
 8006d8c:	9201      	str	r2, [sp, #4]
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	460b      	mov	r3, r1
 8006d92:	2200      	movs	r2, #0
 8006d94:	497f      	ldr	r1, [pc, #508]	@ (8006f94 <send_section_D+0x290>)
 8006d96:	4880      	ldr	r0, [pc, #512]	@ (8006f98 <send_section_D+0x294>)
 8006d98:	f005 f87c 	bl	800be94 <siprintf>
			0,Green_Conflict22[0],Green_Conflict22[1],Green_Conflict22[2]);

	for(uint8_t q=0; q<8;q++)
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	73bb      	strb	r3, [r7, #14]
 8006da0:	e01a      	b.n	8006dd8 <send_section_D+0xd4>
	{
		for(uint8_t r=0;r<12;r++)
 8006da2:	2300      	movs	r3, #0
 8006da4:	737b      	strb	r3, [r7, #13]
 8006da6:	e011      	b.n	8006dcc <send_section_D+0xc8>
		{
			sprintf(send_i,"%s%d;",send_i,SG_set[q][r]);
 8006da8:	7bba      	ldrb	r2, [r7, #14]
 8006daa:	7b79      	ldrb	r1, [r7, #13]
 8006dac:	487b      	ldr	r0, [pc, #492]	@ (8006f9c <send_section_D+0x298>)
 8006dae:	4613      	mov	r3, r2
 8006db0:	005b      	lsls	r3, r3, #1
 8006db2:	4413      	add	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4403      	add	r3, r0
 8006db8:	440b      	add	r3, r1
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	4a76      	ldr	r2, [pc, #472]	@ (8006f98 <send_section_D+0x294>)
 8006dbe:	4978      	ldr	r1, [pc, #480]	@ (8006fa0 <send_section_D+0x29c>)
 8006dc0:	4875      	ldr	r0, [pc, #468]	@ (8006f98 <send_section_D+0x294>)
 8006dc2:	f005 f867 	bl	800be94 <siprintf>
		for(uint8_t r=0;r<12;r++)
 8006dc6:	7b7b      	ldrb	r3, [r7, #13]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	737b      	strb	r3, [r7, #13]
 8006dcc:	7b7b      	ldrb	r3, [r7, #13]
 8006dce:	2b0b      	cmp	r3, #11
 8006dd0:	d9ea      	bls.n	8006da8 <send_section_D+0xa4>
	for(uint8_t q=0; q<8;q++)
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	73bb      	strb	r3, [r7, #14]
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
 8006dda:	2b07      	cmp	r3, #7
 8006ddc:	d9e1      	bls.n	8006da2 <send_section_D+0x9e>
		}
	}

	for(uint8_t r=0; r<8; r++)
 8006dde:	2300      	movs	r3, #0
 8006de0:	733b      	strb	r3, [r7, #12]
 8006de2:	e01f      	b.n	8006e24 <send_section_D+0x120>
	{
		for(uint8_t s=0; s<8; s++)
 8006de4:	2300      	movs	r3, #0
 8006de6:	72fb      	strb	r3, [r7, #11]
 8006de8:	e016      	b.n	8006e18 <send_section_D+0x114>
		{
			sprintf(send_i,"%s%d;",send_i,PLAN[r][s].g);
 8006dea:	7b39      	ldrb	r1, [r7, #12]
 8006dec:	7afb      	ldrb	r3, [r7, #11]
 8006dee:	486d      	ldr	r0, [pc, #436]	@ (8006fa4 <send_section_D+0x2a0>)
 8006df0:	461a      	mov	r2, r3
 8006df2:	0052      	lsls	r2, r2, #1
 8006df4:	441a      	add	r2, r3
 8006df6:	0053      	lsls	r3, r2, #1
 8006df8:	461a      	mov	r2, r3
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	440b      	add	r3, r1
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	4413      	add	r3, r2
 8006e04:	4403      	add	r3, r0
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	4a63      	ldr	r2, [pc, #396]	@ (8006f98 <send_section_D+0x294>)
 8006e0a:	4965      	ldr	r1, [pc, #404]	@ (8006fa0 <send_section_D+0x29c>)
 8006e0c:	4862      	ldr	r0, [pc, #392]	@ (8006f98 <send_section_D+0x294>)
 8006e0e:	f005 f841 	bl	800be94 <siprintf>
		for(uint8_t s=0; s<8; s++)
 8006e12:	7afb      	ldrb	r3, [r7, #11]
 8006e14:	3301      	adds	r3, #1
 8006e16:	72fb      	strb	r3, [r7, #11]
 8006e18:	7afb      	ldrb	r3, [r7, #11]
 8006e1a:	2b07      	cmp	r3, #7
 8006e1c:	d9e5      	bls.n	8006dea <send_section_D+0xe6>
	for(uint8_t r=0; r<8; r++)
 8006e1e:	7b3b      	ldrb	r3, [r7, #12]
 8006e20:	3301      	adds	r3, #1
 8006e22:	733b      	strb	r3, [r7, #12]
 8006e24:	7b3b      	ldrb	r3, [r7, #12]
 8006e26:	2b07      	cmp	r3, #7
 8006e28:	d9dc      	bls.n	8006de4 <send_section_D+0xe0>
		}
	}
	for(uint8_t r=0; r<8; r++)
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	72bb      	strb	r3, [r7, #10]
 8006e2e:	e020      	b.n	8006e72 <send_section_D+0x16e>
	{
		for(uint8_t s=0; s<8; s++)
 8006e30:	2300      	movs	r3, #0
 8006e32:	727b      	strb	r3, [r7, #9]
 8006e34:	e017      	b.n	8006e66 <send_section_D+0x162>
		{
			sprintf(send_i,"%s%d;",send_i,PLAN[r][s].y);
 8006e36:	7ab9      	ldrb	r1, [r7, #10]
 8006e38:	7a7b      	ldrb	r3, [r7, #9]
 8006e3a:	485a      	ldr	r0, [pc, #360]	@ (8006fa4 <send_section_D+0x2a0>)
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	0052      	lsls	r2, r2, #1
 8006e40:	441a      	add	r2, r3
 8006e42:	0053      	lsls	r3, r2, #1
 8006e44:	461a      	mov	r2, r3
 8006e46:	460b      	mov	r3, r1
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	440b      	add	r3, r1
 8006e4c:	011b      	lsls	r3, r3, #4
 8006e4e:	4413      	add	r3, r2
 8006e50:	4403      	add	r3, r0
 8006e52:	3301      	adds	r3, #1
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	4a50      	ldr	r2, [pc, #320]	@ (8006f98 <send_section_D+0x294>)
 8006e58:	4951      	ldr	r1, [pc, #324]	@ (8006fa0 <send_section_D+0x29c>)
 8006e5a:	484f      	ldr	r0, [pc, #316]	@ (8006f98 <send_section_D+0x294>)
 8006e5c:	f005 f81a 	bl	800be94 <siprintf>
		for(uint8_t s=0; s<8; s++)
 8006e60:	7a7b      	ldrb	r3, [r7, #9]
 8006e62:	3301      	adds	r3, #1
 8006e64:	727b      	strb	r3, [r7, #9]
 8006e66:	7a7b      	ldrb	r3, [r7, #9]
 8006e68:	2b07      	cmp	r3, #7
 8006e6a:	d9e4      	bls.n	8006e36 <send_section_D+0x132>
	for(uint8_t r=0; r<8; r++)
 8006e6c:	7abb      	ldrb	r3, [r7, #10]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	72bb      	strb	r3, [r7, #10]
 8006e72:	7abb      	ldrb	r3, [r7, #10]
 8006e74:	2b07      	cmp	r3, #7
 8006e76:	d9db      	bls.n	8006e30 <send_section_D+0x12c>
		}
	}
	for(uint8_t r=0; r<8; r++)
 8006e78:	2300      	movs	r3, #0
 8006e7a:	723b      	strb	r3, [r7, #8]
 8006e7c:	e020      	b.n	8006ec0 <send_section_D+0x1bc>
	{
		for(uint8_t s=0; s<8; s++)
 8006e7e:	2300      	movs	r3, #0
 8006e80:	71fb      	strb	r3, [r7, #7]
 8006e82:	e017      	b.n	8006eb4 <send_section_D+0x1b0>
		{
			sprintf(send_i,"%s%d;",send_i,PLAN[r][s].r);
 8006e84:	7a39      	ldrb	r1, [r7, #8]
 8006e86:	79fb      	ldrb	r3, [r7, #7]
 8006e88:	4846      	ldr	r0, [pc, #280]	@ (8006fa4 <send_section_D+0x2a0>)
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	0052      	lsls	r2, r2, #1
 8006e8e:	441a      	add	r2, r3
 8006e90:	0053      	lsls	r3, r2, #1
 8006e92:	461a      	mov	r2, r3
 8006e94:	460b      	mov	r3, r1
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	440b      	add	r3, r1
 8006e9a:	011b      	lsls	r3, r3, #4
 8006e9c:	4413      	add	r3, r2
 8006e9e:	4403      	add	r3, r0
 8006ea0:	3302      	adds	r3, #2
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	4a3c      	ldr	r2, [pc, #240]	@ (8006f98 <send_section_D+0x294>)
 8006ea6:	493e      	ldr	r1, [pc, #248]	@ (8006fa0 <send_section_D+0x29c>)
 8006ea8:	483b      	ldr	r0, [pc, #236]	@ (8006f98 <send_section_D+0x294>)
 8006eaa:	f004 fff3 	bl	800be94 <siprintf>
		for(uint8_t s=0; s<8; s++)
 8006eae:	79fb      	ldrb	r3, [r7, #7]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	71fb      	strb	r3, [r7, #7]
 8006eb4:	79fb      	ldrb	r3, [r7, #7]
 8006eb6:	2b07      	cmp	r3, #7
 8006eb8:	d9e4      	bls.n	8006e84 <send_section_D+0x180>
	for(uint8_t r=0; r<8; r++)
 8006eba:	7a3b      	ldrb	r3, [r7, #8]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	723b      	strb	r3, [r7, #8]
 8006ec0:	7a3b      	ldrb	r3, [r7, #8]
 8006ec2:	2b07      	cmp	r3, #7
 8006ec4:	d9db      	bls.n	8006e7e <send_section_D+0x17a>
		}
	}
	for(uint8_t r=0; r<8; r++)
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	71bb      	strb	r3, [r7, #6]
 8006eca:	e020      	b.n	8006f0e <send_section_D+0x20a>
	{
		for(uint8_t s=0; s<8; s++)
 8006ecc:	2300      	movs	r3, #0
 8006ece:	717b      	strb	r3, [r7, #5]
 8006ed0:	e017      	b.n	8006f02 <send_section_D+0x1fe>
		{
			sprintf(send_i,"%s%d;",send_i,PLAN[r][s].AddG);
 8006ed2:	79b9      	ldrb	r1, [r7, #6]
 8006ed4:	797b      	ldrb	r3, [r7, #5]
 8006ed6:	4833      	ldr	r0, [pc, #204]	@ (8006fa4 <send_section_D+0x2a0>)
 8006ed8:	461a      	mov	r2, r3
 8006eda:	0052      	lsls	r2, r2, #1
 8006edc:	441a      	add	r2, r3
 8006ede:	0053      	lsls	r3, r2, #1
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	440b      	add	r3, r1
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	4413      	add	r3, r2
 8006eec:	4403      	add	r3, r0
 8006eee:	3303      	adds	r3, #3
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	4a29      	ldr	r2, [pc, #164]	@ (8006f98 <send_section_D+0x294>)
 8006ef4:	492a      	ldr	r1, [pc, #168]	@ (8006fa0 <send_section_D+0x29c>)
 8006ef6:	4828      	ldr	r0, [pc, #160]	@ (8006f98 <send_section_D+0x294>)
 8006ef8:	f004 ffcc 	bl	800be94 <siprintf>
		for(uint8_t s=0; s<8; s++)
 8006efc:	797b      	ldrb	r3, [r7, #5]
 8006efe:	3301      	adds	r3, #1
 8006f00:	717b      	strb	r3, [r7, #5]
 8006f02:	797b      	ldrb	r3, [r7, #5]
 8006f04:	2b07      	cmp	r3, #7
 8006f06:	d9e4      	bls.n	8006ed2 <send_section_D+0x1ce>
	for(uint8_t r=0; r<8; r++)
 8006f08:	79bb      	ldrb	r3, [r7, #6]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	71bb      	strb	r3, [r7, #6]
 8006f0e:	79bb      	ldrb	r3, [r7, #6]
 8006f10:	2b07      	cmp	r3, #7
 8006f12:	d9db      	bls.n	8006ecc <send_section_D+0x1c8>
		}
	}
	for(uint8_t r=0; r<8; r++)
 8006f14:	2300      	movs	r3, #0
 8006f16:	713b      	strb	r3, [r7, #4]
 8006f18:	e00b      	b.n	8006f32 <send_section_D+0x22e>
	{
		sprintf(send_i,"%s%d;",send_i,PLAN_Cycle[r]);
 8006f1a:	793b      	ldrb	r3, [r7, #4]
 8006f1c:	4a22      	ldr	r2, [pc, #136]	@ (8006fa8 <send_section_D+0x2a4>)
 8006f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f22:	4a1d      	ldr	r2, [pc, #116]	@ (8006f98 <send_section_D+0x294>)
 8006f24:	491e      	ldr	r1, [pc, #120]	@ (8006fa0 <send_section_D+0x29c>)
 8006f26:	481c      	ldr	r0, [pc, #112]	@ (8006f98 <send_section_D+0x294>)
 8006f28:	f004 ffb4 	bl	800be94 <siprintf>
	for(uint8_t r=0; r<8; r++)
 8006f2c:	793b      	ldrb	r3, [r7, #4]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	713b      	strb	r3, [r7, #4]
 8006f32:	793b      	ldrb	r3, [r7, #4]
 8006f34:	2b07      	cmp	r3, #7
 8006f36:	d9f0      	bls.n	8006f1a <send_section_D+0x216>
	}
	for(uint8_t r=0; r<8; r++)
 8006f38:	2300      	movs	r3, #0
 8006f3a:	70fb      	strb	r3, [r7, #3]
 8006f3c:	e00b      	b.n	8006f56 <send_section_D+0x252>
	{
		sprintf(send_i,"%s%d;",send_i,PLAN_Offset[r]);
 8006f3e:	78fb      	ldrb	r3, [r7, #3]
 8006f40:	4a1a      	ldr	r2, [pc, #104]	@ (8006fac <send_section_D+0x2a8>)
 8006f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f46:	4a14      	ldr	r2, [pc, #80]	@ (8006f98 <send_section_D+0x294>)
 8006f48:	4915      	ldr	r1, [pc, #84]	@ (8006fa0 <send_section_D+0x29c>)
 8006f4a:	4813      	ldr	r0, [pc, #76]	@ (8006f98 <send_section_D+0x294>)
 8006f4c:	f004 ffa2 	bl	800be94 <siprintf>
	for(uint8_t r=0; r<8; r++)
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	3301      	adds	r3, #1
 8006f54:	70fb      	strb	r3, [r7, #3]
 8006f56:	78fb      	ldrb	r3, [r7, #3]
 8006f58:	2b07      	cmp	r3, #7
 8006f5a:	d9f0      	bls.n	8006f3e <send_section_D+0x23a>
	}


	EncryptData(send_i, 'D');
 8006f5c:	2144      	movs	r1, #68	@ 0x44
 8006f5e:	480e      	ldr	r0, [pc, #56]	@ (8006f98 <send_section_D+0x294>)
 8006f60:	f7fa fc96 	bl	8001890 <EncryptData>
	sprintf(send_enc, "%s",encryptedData);
 8006f64:	4a12      	ldr	r2, [pc, #72]	@ (8006fb0 <send_section_D+0x2ac>)
 8006f66:	4913      	ldr	r1, [pc, #76]	@ (8006fb4 <send_section_D+0x2b0>)
 8006f68:	4813      	ldr	r0, [pc, #76]	@ (8006fb8 <send_section_D+0x2b4>)
 8006f6a:	f004 ff93 	bl	800be94 <siprintf>

	HAL_UART_Transmit(&huart3, (uint8_t *)send_enc, strlen(send_enc), HAL_MAX_DELAY);
 8006f6e:	4812      	ldr	r0, [pc, #72]	@ (8006fb8 <send_section_D+0x2b4>)
 8006f70:	f7f9 f92e 	bl	80001d0 <strlen>
 8006f74:	4603      	mov	r3, r0
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7c:	490e      	ldr	r1, [pc, #56]	@ (8006fb8 <send_section_D+0x2b4>)
 8006f7e:	480f      	ldr	r0, [pc, #60]	@ (8006fbc <send_section_D+0x2b8>)
 8006f80:	f003 fdc2 	bl	800ab08 <HAL_UART_Transmit>
}
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	20016a3c 	.word	0x20016a3c
 8006f90:	2000edac 	.word	0x2000edac
 8006f94:	0800e51c 	.word	0x0800e51c
 8006f98:	2001432c 	.word	0x2001432c
 8006f9c:	2000ecec 	.word	0x2000ecec
 8006fa0:	0800e52c 	.word	0x0800e52c
 8006fa4:	2000ee74 	.word	0x2000ee74
 8006fa8:	2000ee34 	.word	0x2000ee34
 8006fac:	2000ee44 	.word	0x2000ee44
 8006fb0:	20001934 	.word	0x20001934
 8006fb4:	0800e534 	.word	0x0800e534
 8006fb8:	20009cc8 	.word	0x20009cc8
 8006fbc:	20016bb8 	.word	0x20016bb8

08006fc0 <send_section_T>:
void send_section_T(void)
{
 8006fc0:	b590      	push	{r4, r7, lr}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af02      	add	r7, sp, #8
	sprintf(send_i,"");
 8006fc6:	497c      	ldr	r1, [pc, #496]	@ (80071b8 <send_section_T+0x1f8>)
 8006fc8:	487c      	ldr	r0, [pc, #496]	@ (80071bc <send_section_T+0x1fc>)
 8006fca:	f004 ff63 	bl	800be94 <siprintf>

	for(uint8_t p=0;p<7;p++)
 8006fce:	2300      	movs	r3, #0
 8006fd0:	71fb      	strb	r3, [r7, #7]
 8006fd2:	e08a      	b.n	80070ea <send_section_T+0x12a>
	{
		for(uint8_t q=0;q<9;q++)
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	71bb      	strb	r3, [r7, #6]
 8006fd8:	e080      	b.n	80070dc <send_section_T+0x11c>
		{
			if(SCHE[p][q].jam<=9) sprintf(send_i,"%s%02d", send_i,SCHE[p][q].jam);
 8006fda:	79fa      	ldrb	r2, [r7, #7]
 8006fdc:	79b9      	ldrb	r1, [r7, #6]
 8006fde:	4878      	ldr	r0, [pc, #480]	@ (80071c0 <send_section_T+0x200>)
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	4413      	add	r3, r2
 8006fe6:	440b      	add	r3, r1
 8006fe8:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 8006fec:	2b09      	cmp	r3, #9
 8006fee:	d80e      	bhi.n	800700e <send_section_T+0x4e>
 8006ff0:	79fa      	ldrb	r2, [r7, #7]
 8006ff2:	79b9      	ldrb	r1, [r7, #6]
 8006ff4:	4872      	ldr	r0, [pc, #456]	@ (80071c0 <send_section_T+0x200>)
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	00db      	lsls	r3, r3, #3
 8006ffa:	4413      	add	r3, r2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 8007002:	4a6e      	ldr	r2, [pc, #440]	@ (80071bc <send_section_T+0x1fc>)
 8007004:	496f      	ldr	r1, [pc, #444]	@ (80071c4 <send_section_T+0x204>)
 8007006:	486d      	ldr	r0, [pc, #436]	@ (80071bc <send_section_T+0x1fc>)
 8007008:	f004 ff44 	bl	800be94 <siprintf>
 800700c:	e00d      	b.n	800702a <send_section_T+0x6a>
			else sprintf(send_i,"%s%d", send_i,SCHE[p][q].jam);
 800700e:	79fa      	ldrb	r2, [r7, #7]
 8007010:	79b9      	ldrb	r1, [r7, #6]
 8007012:	486b      	ldr	r0, [pc, #428]	@ (80071c0 <send_section_T+0x200>)
 8007014:	4613      	mov	r3, r2
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	4413      	add	r3, r2
 800701a:	440b      	add	r3, r1
 800701c:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 8007020:	4a66      	ldr	r2, [pc, #408]	@ (80071bc <send_section_T+0x1fc>)
 8007022:	4969      	ldr	r1, [pc, #420]	@ (80071c8 <send_section_T+0x208>)
 8007024:	4865      	ldr	r0, [pc, #404]	@ (80071bc <send_section_T+0x1fc>)
 8007026:	f004 ff35 	bl	800be94 <siprintf>
			if(SCHE[p][q].menit<=9) sprintf(send_i,"%s%02d", send_i,SCHE[p][q].menit);
 800702a:	79fa      	ldrb	r2, [r7, #7]
 800702c:	79b9      	ldrb	r1, [r7, #6]
 800702e:	4864      	ldr	r0, [pc, #400]	@ (80071c0 <send_section_T+0x200>)
 8007030:	4613      	mov	r3, r2
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	4413      	add	r3, r2
 8007036:	440b      	add	r3, r1
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4403      	add	r3, r0
 800703c:	785b      	ldrb	r3, [r3, #1]
 800703e:	2b09      	cmp	r3, #9
 8007040:	d80f      	bhi.n	8007062 <send_section_T+0xa2>
 8007042:	79fa      	ldrb	r2, [r7, #7]
 8007044:	79b9      	ldrb	r1, [r7, #6]
 8007046:	485e      	ldr	r0, [pc, #376]	@ (80071c0 <send_section_T+0x200>)
 8007048:	4613      	mov	r3, r2
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	4413      	add	r3, r2
 800704e:	440b      	add	r3, r1
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4403      	add	r3, r0
 8007054:	785b      	ldrb	r3, [r3, #1]
 8007056:	4a59      	ldr	r2, [pc, #356]	@ (80071bc <send_section_T+0x1fc>)
 8007058:	495a      	ldr	r1, [pc, #360]	@ (80071c4 <send_section_T+0x204>)
 800705a:	4858      	ldr	r0, [pc, #352]	@ (80071bc <send_section_T+0x1fc>)
 800705c:	f004 ff1a 	bl	800be94 <siprintf>
 8007060:	e00e      	b.n	8007080 <send_section_T+0xc0>
			else sprintf(send_i,"%s%d", send_i,SCHE[p][q].menit);
 8007062:	79fa      	ldrb	r2, [r7, #7]
 8007064:	79b9      	ldrb	r1, [r7, #6]
 8007066:	4856      	ldr	r0, [pc, #344]	@ (80071c0 <send_section_T+0x200>)
 8007068:	4613      	mov	r3, r2
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	4413      	add	r3, r2
 800706e:	440b      	add	r3, r1
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4403      	add	r3, r0
 8007074:	785b      	ldrb	r3, [r3, #1]
 8007076:	4a51      	ldr	r2, [pc, #324]	@ (80071bc <send_section_T+0x1fc>)
 8007078:	4953      	ldr	r1, [pc, #332]	@ (80071c8 <send_section_T+0x208>)
 800707a:	4850      	ldr	r0, [pc, #320]	@ (80071bc <send_section_T+0x1fc>)
 800707c:	f004 ff0a 	bl	800be94 <siprintf>
			if(SCHE[p][q].detik<=9) sprintf(send_i,"%s%02d;", send_i,SCHE[p][q].detik);
 8007080:	79fa      	ldrb	r2, [r7, #7]
 8007082:	79b9      	ldrb	r1, [r7, #6]
 8007084:	484e      	ldr	r0, [pc, #312]	@ (80071c0 <send_section_T+0x200>)
 8007086:	4613      	mov	r3, r2
 8007088:	00db      	lsls	r3, r3, #3
 800708a:	4413      	add	r3, r2
 800708c:	440b      	add	r3, r1
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4403      	add	r3, r0
 8007092:	789b      	ldrb	r3, [r3, #2]
 8007094:	2b09      	cmp	r3, #9
 8007096:	d80f      	bhi.n	80070b8 <send_section_T+0xf8>
 8007098:	79fa      	ldrb	r2, [r7, #7]
 800709a:	79b9      	ldrb	r1, [r7, #6]
 800709c:	4848      	ldr	r0, [pc, #288]	@ (80071c0 <send_section_T+0x200>)
 800709e:	4613      	mov	r3, r2
 80070a0:	00db      	lsls	r3, r3, #3
 80070a2:	4413      	add	r3, r2
 80070a4:	440b      	add	r3, r1
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4403      	add	r3, r0
 80070aa:	789b      	ldrb	r3, [r3, #2]
 80070ac:	4a43      	ldr	r2, [pc, #268]	@ (80071bc <send_section_T+0x1fc>)
 80070ae:	4947      	ldr	r1, [pc, #284]	@ (80071cc <send_section_T+0x20c>)
 80070b0:	4842      	ldr	r0, [pc, #264]	@ (80071bc <send_section_T+0x1fc>)
 80070b2:	f004 feef 	bl	800be94 <siprintf>
 80070b6:	e00e      	b.n	80070d6 <send_section_T+0x116>
			else sprintf(send_i,"%s%d;", send_i,SCHE[p][q].detik);
 80070b8:	79fa      	ldrb	r2, [r7, #7]
 80070ba:	79b9      	ldrb	r1, [r7, #6]
 80070bc:	4840      	ldr	r0, [pc, #256]	@ (80071c0 <send_section_T+0x200>)
 80070be:	4613      	mov	r3, r2
 80070c0:	00db      	lsls	r3, r3, #3
 80070c2:	4413      	add	r3, r2
 80070c4:	440b      	add	r3, r1
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4403      	add	r3, r0
 80070ca:	789b      	ldrb	r3, [r3, #2]
 80070cc:	4a3b      	ldr	r2, [pc, #236]	@ (80071bc <send_section_T+0x1fc>)
 80070ce:	4940      	ldr	r1, [pc, #256]	@ (80071d0 <send_section_T+0x210>)
 80070d0:	483a      	ldr	r0, [pc, #232]	@ (80071bc <send_section_T+0x1fc>)
 80070d2:	f004 fedf 	bl	800be94 <siprintf>
		for(uint8_t q=0;q<9;q++)
 80070d6:	79bb      	ldrb	r3, [r7, #6]
 80070d8:	3301      	adds	r3, #1
 80070da:	71bb      	strb	r3, [r7, #6]
 80070dc:	79bb      	ldrb	r3, [r7, #6]
 80070de:	2b08      	cmp	r3, #8
 80070e0:	f67f af7b 	bls.w	8006fda <send_section_T+0x1a>
	for(uint8_t p=0;p<7;p++)
 80070e4:	79fb      	ldrb	r3, [r7, #7]
 80070e6:	3301      	adds	r3, #1
 80070e8:	71fb      	strb	r3, [r7, #7]
 80070ea:	79fb      	ldrb	r3, [r7, #7]
 80070ec:	2b06      	cmp	r3, #6
 80070ee:	f67f af71 	bls.w	8006fd4 <send_section_T+0x14>
		}
	}

	for(uint8_t p=0;p<7;p++)
 80070f2:	2300      	movs	r3, #0
 80070f4:	717b      	strb	r3, [r7, #5]
 80070f6:	e01a      	b.n	800712e <send_section_T+0x16e>
	{
		for(uint8_t q=0;q<9;q++)
 80070f8:	2300      	movs	r3, #0
 80070fa:	713b      	strb	r3, [r7, #4]
 80070fc:	e011      	b.n	8007122 <send_section_T+0x162>
		{
			sprintf(send_i,"%s%d;", send_i,SCHE[p][q].plan);
 80070fe:	797a      	ldrb	r2, [r7, #5]
 8007100:	7939      	ldrb	r1, [r7, #4]
 8007102:	482f      	ldr	r0, [pc, #188]	@ (80071c0 <send_section_T+0x200>)
 8007104:	4613      	mov	r3, r2
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	4413      	add	r3, r2
 800710a:	440b      	add	r3, r1
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4403      	add	r3, r0
 8007110:	78db      	ldrb	r3, [r3, #3]
 8007112:	4a2a      	ldr	r2, [pc, #168]	@ (80071bc <send_section_T+0x1fc>)
 8007114:	492e      	ldr	r1, [pc, #184]	@ (80071d0 <send_section_T+0x210>)
 8007116:	4829      	ldr	r0, [pc, #164]	@ (80071bc <send_section_T+0x1fc>)
 8007118:	f004 febc 	bl	800be94 <siprintf>
		for(uint8_t q=0;q<9;q++)
 800711c:	793b      	ldrb	r3, [r7, #4]
 800711e:	3301      	adds	r3, #1
 8007120:	713b      	strb	r3, [r7, #4]
 8007122:	793b      	ldrb	r3, [r7, #4]
 8007124:	2b08      	cmp	r3, #8
 8007126:	d9ea      	bls.n	80070fe <send_section_T+0x13e>
	for(uint8_t p=0;p<7;p++)
 8007128:	797b      	ldrb	r3, [r7, #5]
 800712a:	3301      	adds	r3, #1
 800712c:	717b      	strb	r3, [r7, #5]
 800712e:	797b      	ldrb	r3, [r7, #5]
 8007130:	2b06      	cmp	r3, #6
 8007132:	d9e1      	bls.n	80070f8 <send_section_T+0x138>
		}
	}
	for(uint8_t p=0;p<30;p++)
 8007134:	2300      	movs	r3, #0
 8007136:	70fb      	strb	r3, [r7, #3]
 8007138:	e023      	b.n	8007182 <send_section_T+0x1c2>
	{
//		sprintf(send_i,"%s%02d;", send_i,HARILIBUR[p]);
		sprintf(send_i,"%s%02d%02d%02d;", send_i,HARILIBUR[p].tanggal,HARILIBUR[p].bulan,HARILIBUR[p].tahun);
 800713a:	78fa      	ldrb	r2, [r7, #3]
 800713c:	4925      	ldr	r1, [pc, #148]	@ (80071d4 <send_section_T+0x214>)
 800713e:	4613      	mov	r3, r2
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	4413      	add	r3, r2
 8007144:	440b      	add	r3, r1
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	461c      	mov	r4, r3
 800714a:	78fa      	ldrb	r2, [r7, #3]
 800714c:	4921      	ldr	r1, [pc, #132]	@ (80071d4 <send_section_T+0x214>)
 800714e:	4613      	mov	r3, r2
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	4413      	add	r3, r2
 8007154:	440b      	add	r3, r1
 8007156:	3301      	adds	r3, #1
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	4618      	mov	r0, r3
 800715c:	78fa      	ldrb	r2, [r7, #3]
 800715e:	491d      	ldr	r1, [pc, #116]	@ (80071d4 <send_section_T+0x214>)
 8007160:	4613      	mov	r3, r2
 8007162:	005b      	lsls	r3, r3, #1
 8007164:	4413      	add	r3, r2
 8007166:	440b      	add	r3, r1
 8007168:	3302      	adds	r3, #2
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	9000      	str	r0, [sp, #0]
 8007170:	4623      	mov	r3, r4
 8007172:	4a12      	ldr	r2, [pc, #72]	@ (80071bc <send_section_T+0x1fc>)
 8007174:	4918      	ldr	r1, [pc, #96]	@ (80071d8 <send_section_T+0x218>)
 8007176:	4811      	ldr	r0, [pc, #68]	@ (80071bc <send_section_T+0x1fc>)
 8007178:	f004 fe8c 	bl	800be94 <siprintf>
	for(uint8_t p=0;p<30;p++)
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	3301      	adds	r3, #1
 8007180:	70fb      	strb	r3, [r7, #3]
 8007182:	78fb      	ldrb	r3, [r7, #3]
 8007184:	2b1d      	cmp	r3, #29
 8007186:	d9d8      	bls.n	800713a <send_section_T+0x17a>
	}


	EncryptData(send_i, 'T');
 8007188:	2154      	movs	r1, #84	@ 0x54
 800718a:	480c      	ldr	r0, [pc, #48]	@ (80071bc <send_section_T+0x1fc>)
 800718c:	f7fa fb80 	bl	8001890 <EncryptData>
	sprintf(send_enc, "%s",encryptedData);
 8007190:	4a12      	ldr	r2, [pc, #72]	@ (80071dc <send_section_T+0x21c>)
 8007192:	4913      	ldr	r1, [pc, #76]	@ (80071e0 <send_section_T+0x220>)
 8007194:	4813      	ldr	r0, [pc, #76]	@ (80071e4 <send_section_T+0x224>)
 8007196:	f004 fe7d 	bl	800be94 <siprintf>

	HAL_UART_Transmit(&huart3, (uint8_t *)send_enc, strlen(send_enc), HAL_MAX_DELAY);
 800719a:	4812      	ldr	r0, [pc, #72]	@ (80071e4 <send_section_T+0x224>)
 800719c:	f7f9 f818 	bl	80001d0 <strlen>
 80071a0:	4603      	mov	r3, r0
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	f04f 33ff 	mov.w	r3, #4294967295
 80071a8:	490e      	ldr	r1, [pc, #56]	@ (80071e4 <send_section_T+0x224>)
 80071aa:	480f      	ldr	r0, [pc, #60]	@ (80071e8 <send_section_T+0x228>)
 80071ac:	f003 fcac 	bl	800ab08 <HAL_UART_Transmit>
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd90      	pop	{r4, r7, pc}
 80071b8:	0800e538 	.word	0x0800e538
 80071bc:	2001432c 	.word	0x2001432c
 80071c0:	2000f174 	.word	0x2000f174
 80071c4:	0800e53c 	.word	0x0800e53c
 80071c8:	0800e544 	.word	0x0800e544
 80071cc:	0800e54c 	.word	0x0800e54c
 80071d0:	0800e52c 	.word	0x0800e52c
 80071d4:	2000f36c 	.word	0x2000f36c
 80071d8:	0800e554 	.word	0x0800e554
 80071dc:	20001934 	.word	0x20001934
 80071e0:	0800e534 	.word	0x0800e534
 80071e4:	20009cc8 	.word	0x20009cc8
 80071e8:	20016bb8 	.word	0x20016bb8

080071ec <send_feedback_section_D>:
void send_feedback_section_D(void)
{
 80071ec:	b590      	push	{r4, r7, lr}
 80071ee:	b089      	sub	sp, #36	@ 0x24
 80071f0:	af00      	add	r7, sp, #0
	uint32_t Green_Conflict22_rcv[3];

	Green_Conflict22_rcv[0] = finalValue[1];
 80071f2:	4baa      	ldr	r3, [pc, #680]	@ (800749c <send_feedback_section_D+0x2b0>)
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	607b      	str	r3, [r7, #4]
	Green_Conflict22_rcv[1] = finalValue[2];
 80071f8:	4ba8      	ldr	r3, [pc, #672]	@ (800749c <send_feedback_section_D+0x2b0>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	60bb      	str	r3, [r7, #8]
	Green_Conflict22_rcv[2] = finalValue[3];
 80071fe:	4ba7      	ldr	r3, [pc, #668]	@ (800749c <send_feedback_section_D+0x2b0>)
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	60fb      	str	r3, [r7, #12]

	for(uint8_t p=0; p<22; p++)
 8007204:	2300      	movs	r3, #0
 8007206:	77fb      	strb	r3, [r7, #31]
 8007208:	e025      	b.n	8007256 <send_feedback_section_D+0x6a>
	{
		flag_bypass_GC_ext[p] = (Green_Conflict22_rcv[0]>>p) & 0x01;
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	7ffb      	ldrb	r3, [r7, #31]
 800720e:	fa22 f303 	lsr.w	r3, r2, r3
 8007212:	b2da      	uxtb	r2, r3
 8007214:	7ffb      	ldrb	r3, [r7, #31]
 8007216:	f002 0201 	and.w	r2, r2, #1
 800721a:	b2d1      	uxtb	r1, r2
 800721c:	4aa0      	ldr	r2, [pc, #640]	@ (80074a0 <send_feedback_section_D+0x2b4>)
 800721e:	54d1      	strb	r1, [r2, r3]
		flag_bypass_GC_ext[22+p] = (Green_Conflict22_rcv[1]>>p) & 0x01;
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	7ffb      	ldrb	r3, [r7, #31]
 8007224:	fa22 f303 	lsr.w	r3, r2, r3
 8007228:	b2da      	uxtb	r2, r3
 800722a:	7ffb      	ldrb	r3, [r7, #31]
 800722c:	3316      	adds	r3, #22
 800722e:	f002 0201 	and.w	r2, r2, #1
 8007232:	b2d1      	uxtb	r1, r2
 8007234:	4a9a      	ldr	r2, [pc, #616]	@ (80074a0 <send_feedback_section_D+0x2b4>)
 8007236:	54d1      	strb	r1, [r2, r3]
		flag_bypass_GC_ext[44+p] = (Green_Conflict22_rcv[2]>>p) & 0x01;
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	7ffb      	ldrb	r3, [r7, #31]
 800723c:	fa22 f303 	lsr.w	r3, r2, r3
 8007240:	b2da      	uxtb	r2, r3
 8007242:	7ffb      	ldrb	r3, [r7, #31]
 8007244:	332c      	adds	r3, #44	@ 0x2c
 8007246:	f002 0201 	and.w	r2, r2, #1
 800724a:	b2d1      	uxtb	r1, r2
 800724c:	4a94      	ldr	r2, [pc, #592]	@ (80074a0 <send_feedback_section_D+0x2b4>)
 800724e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t p=0; p<22; p++)
 8007250:	7ffb      	ldrb	r3, [r7, #31]
 8007252:	3301      	adds	r3, #1
 8007254:	77fb      	strb	r3, [r7, #31]
 8007256:	7ffb      	ldrb	r3, [r7, #31]
 8007258:	2b15      	cmp	r3, #21
 800725a:	d9d6      	bls.n	800720a <send_feedback_section_D+0x1e>
	}

	for(uint8_t q=0; q<8;q++)
 800725c:	2300      	movs	r3, #0
 800725e:	77bb      	strb	r3, [r7, #30]
 8007260:	e022      	b.n	80072a8 <send_feedback_section_D+0xbc>
	{
		for(uint8_t r=0;r<12;r++)
 8007262:	2300      	movs	r3, #0
 8007264:	777b      	strb	r3, [r7, #29]
 8007266:	e019      	b.n	800729c <send_feedback_section_D+0xb0>
		{
			SG_set_ext[q][r] = finalValue[(12*q)+4+r];
 8007268:	7fba      	ldrb	r2, [r7, #30]
 800726a:	4613      	mov	r3, r2
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	4413      	add	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	1d1a      	adds	r2, r3, #4
 8007274:	7f7b      	ldrb	r3, [r7, #29]
 8007276:	4413      	add	r3, r2
 8007278:	4a88      	ldr	r2, [pc, #544]	@ (800749c <send_feedback_section_D+0x2b0>)
 800727a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800727e:	7fba      	ldrb	r2, [r7, #30]
 8007280:	7f79      	ldrb	r1, [r7, #29]
 8007282:	b2dc      	uxtb	r4, r3
 8007284:	4887      	ldr	r0, [pc, #540]	@ (80074a4 <send_feedback_section_D+0x2b8>)
 8007286:	4613      	mov	r3, r2
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	4413      	add	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4403      	add	r3, r0
 8007290:	440b      	add	r3, r1
 8007292:	4622      	mov	r2, r4
 8007294:	701a      	strb	r2, [r3, #0]
		for(uint8_t r=0;r<12;r++)
 8007296:	7f7b      	ldrb	r3, [r7, #29]
 8007298:	3301      	adds	r3, #1
 800729a:	777b      	strb	r3, [r7, #29]
 800729c:	7f7b      	ldrb	r3, [r7, #29]
 800729e:	2b0b      	cmp	r3, #11
 80072a0:	d9e2      	bls.n	8007268 <send_feedback_section_D+0x7c>
	for(uint8_t q=0; q<8;q++)
 80072a2:	7fbb      	ldrb	r3, [r7, #30]
 80072a4:	3301      	adds	r3, #1
 80072a6:	77bb      	strb	r3, [r7, #30]
 80072a8:	7fbb      	ldrb	r3, [r7, #30]
 80072aa:	2b07      	cmp	r3, #7
 80072ac:	d9d9      	bls.n	8007262 <send_feedback_section_D+0x76>
		}
	}

	for(uint8_t r=0; r<8; r++)
 80072ae:	2300      	movs	r3, #0
 80072b0:	773b      	strb	r3, [r7, #28]
 80072b2:	e025      	b.n	8007300 <send_feedback_section_D+0x114>
	{
		for(uint8_t s=0; s<8; s++)
 80072b4:	2300      	movs	r3, #0
 80072b6:	76fb      	strb	r3, [r7, #27]
 80072b8:	e01c      	b.n	80072f4 <send_feedback_section_D+0x108>
		{
			PLAN_ext[r][s].g = finalValue[(8*r)+100+s];
 80072ba:	7f3b      	ldrb	r3, [r7, #28]
 80072bc:	00db      	lsls	r3, r3, #3
 80072be:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80072c2:	7efb      	ldrb	r3, [r7, #27]
 80072c4:	4413      	add	r3, r2
 80072c6:	4a75      	ldr	r2, [pc, #468]	@ (800749c <send_feedback_section_D+0x2b0>)
 80072c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80072cc:	7f39      	ldrb	r1, [r7, #28]
 80072ce:	7efb      	ldrb	r3, [r7, #27]
 80072d0:	b2d4      	uxtb	r4, r2
 80072d2:	4875      	ldr	r0, [pc, #468]	@ (80074a8 <send_feedback_section_D+0x2bc>)
 80072d4:	461a      	mov	r2, r3
 80072d6:	0052      	lsls	r2, r2, #1
 80072d8:	441a      	add	r2, r3
 80072da:	0053      	lsls	r3, r2, #1
 80072dc:	461a      	mov	r2, r3
 80072de:	460b      	mov	r3, r1
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	440b      	add	r3, r1
 80072e4:	011b      	lsls	r3, r3, #4
 80072e6:	4413      	add	r3, r2
 80072e8:	4403      	add	r3, r0
 80072ea:	4622      	mov	r2, r4
 80072ec:	701a      	strb	r2, [r3, #0]
		for(uint8_t s=0; s<8; s++)
 80072ee:	7efb      	ldrb	r3, [r7, #27]
 80072f0:	3301      	adds	r3, #1
 80072f2:	76fb      	strb	r3, [r7, #27]
 80072f4:	7efb      	ldrb	r3, [r7, #27]
 80072f6:	2b07      	cmp	r3, #7
 80072f8:	d9df      	bls.n	80072ba <send_feedback_section_D+0xce>
	for(uint8_t r=0; r<8; r++)
 80072fa:	7f3b      	ldrb	r3, [r7, #28]
 80072fc:	3301      	adds	r3, #1
 80072fe:	773b      	strb	r3, [r7, #28]
 8007300:	7f3b      	ldrb	r3, [r7, #28]
 8007302:	2b07      	cmp	r3, #7
 8007304:	d9d6      	bls.n	80072b4 <send_feedback_section_D+0xc8>
		}
	}
	for(uint8_t r=0; r<8; r++)
 8007306:	2300      	movs	r3, #0
 8007308:	76bb      	strb	r3, [r7, #26]
 800730a:	e026      	b.n	800735a <send_feedback_section_D+0x16e>
	{
		for(uint8_t s=0; s<8; s++)
 800730c:	2300      	movs	r3, #0
 800730e:	767b      	strb	r3, [r7, #25]
 8007310:	e01d      	b.n	800734e <send_feedback_section_D+0x162>
		{
			PLAN_ext[r][s].y = finalValue[(8*r)+164+s];
 8007312:	7ebb      	ldrb	r3, [r7, #26]
 8007314:	00db      	lsls	r3, r3, #3
 8007316:	f103 02a4 	add.w	r2, r3, #164	@ 0xa4
 800731a:	7e7b      	ldrb	r3, [r7, #25]
 800731c:	4413      	add	r3, r2
 800731e:	4a5f      	ldr	r2, [pc, #380]	@ (800749c <send_feedback_section_D+0x2b0>)
 8007320:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007324:	7eb9      	ldrb	r1, [r7, #26]
 8007326:	7e7b      	ldrb	r3, [r7, #25]
 8007328:	b2d4      	uxtb	r4, r2
 800732a:	485f      	ldr	r0, [pc, #380]	@ (80074a8 <send_feedback_section_D+0x2bc>)
 800732c:	461a      	mov	r2, r3
 800732e:	0052      	lsls	r2, r2, #1
 8007330:	441a      	add	r2, r3
 8007332:	0053      	lsls	r3, r2, #1
 8007334:	461a      	mov	r2, r3
 8007336:	460b      	mov	r3, r1
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	440b      	add	r3, r1
 800733c:	011b      	lsls	r3, r3, #4
 800733e:	4413      	add	r3, r2
 8007340:	4403      	add	r3, r0
 8007342:	3301      	adds	r3, #1
 8007344:	4622      	mov	r2, r4
 8007346:	701a      	strb	r2, [r3, #0]
		for(uint8_t s=0; s<8; s++)
 8007348:	7e7b      	ldrb	r3, [r7, #25]
 800734a:	3301      	adds	r3, #1
 800734c:	767b      	strb	r3, [r7, #25]
 800734e:	7e7b      	ldrb	r3, [r7, #25]
 8007350:	2b07      	cmp	r3, #7
 8007352:	d9de      	bls.n	8007312 <send_feedback_section_D+0x126>
	for(uint8_t r=0; r<8; r++)
 8007354:	7ebb      	ldrb	r3, [r7, #26]
 8007356:	3301      	adds	r3, #1
 8007358:	76bb      	strb	r3, [r7, #26]
 800735a:	7ebb      	ldrb	r3, [r7, #26]
 800735c:	2b07      	cmp	r3, #7
 800735e:	d9d5      	bls.n	800730c <send_feedback_section_D+0x120>
		}
	}
	for(uint8_t r=0; r<8; r++)
 8007360:	2300      	movs	r3, #0
 8007362:	763b      	strb	r3, [r7, #24]
 8007364:	e026      	b.n	80073b4 <send_feedback_section_D+0x1c8>
	{
		for(uint8_t s=0; s<8; s++)
 8007366:	2300      	movs	r3, #0
 8007368:	75fb      	strb	r3, [r7, #23]
 800736a:	e01d      	b.n	80073a8 <send_feedback_section_D+0x1bc>
		{
			PLAN_ext[r][s].r = finalValue[(8*r)+228+s];
 800736c:	7e3b      	ldrb	r3, [r7, #24]
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	f103 02e4 	add.w	r2, r3, #228	@ 0xe4
 8007374:	7dfb      	ldrb	r3, [r7, #23]
 8007376:	4413      	add	r3, r2
 8007378:	4a48      	ldr	r2, [pc, #288]	@ (800749c <send_feedback_section_D+0x2b0>)
 800737a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800737e:	7e39      	ldrb	r1, [r7, #24]
 8007380:	7dfb      	ldrb	r3, [r7, #23]
 8007382:	b2d4      	uxtb	r4, r2
 8007384:	4848      	ldr	r0, [pc, #288]	@ (80074a8 <send_feedback_section_D+0x2bc>)
 8007386:	461a      	mov	r2, r3
 8007388:	0052      	lsls	r2, r2, #1
 800738a:	441a      	add	r2, r3
 800738c:	0053      	lsls	r3, r2, #1
 800738e:	461a      	mov	r2, r3
 8007390:	460b      	mov	r3, r1
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	440b      	add	r3, r1
 8007396:	011b      	lsls	r3, r3, #4
 8007398:	4413      	add	r3, r2
 800739a:	4403      	add	r3, r0
 800739c:	3302      	adds	r3, #2
 800739e:	4622      	mov	r2, r4
 80073a0:	701a      	strb	r2, [r3, #0]
		for(uint8_t s=0; s<8; s++)
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
 80073a4:	3301      	adds	r3, #1
 80073a6:	75fb      	strb	r3, [r7, #23]
 80073a8:	7dfb      	ldrb	r3, [r7, #23]
 80073aa:	2b07      	cmp	r3, #7
 80073ac:	d9de      	bls.n	800736c <send_feedback_section_D+0x180>
	for(uint8_t r=0; r<8; r++)
 80073ae:	7e3b      	ldrb	r3, [r7, #24]
 80073b0:	3301      	adds	r3, #1
 80073b2:	763b      	strb	r3, [r7, #24]
 80073b4:	7e3b      	ldrb	r3, [r7, #24]
 80073b6:	2b07      	cmp	r3, #7
 80073b8:	d9d5      	bls.n	8007366 <send_feedback_section_D+0x17a>
		}
	}
	for(uint8_t r=0; r<8; r++)
 80073ba:	2300      	movs	r3, #0
 80073bc:	75bb      	strb	r3, [r7, #22]
 80073be:	e026      	b.n	800740e <send_feedback_section_D+0x222>
	{
		for(uint8_t s=0; s<8; s++)
 80073c0:	2300      	movs	r3, #0
 80073c2:	757b      	strb	r3, [r7, #21]
 80073c4:	e01d      	b.n	8007402 <send_feedback_section_D+0x216>
		{
			PLAN_ext[r][s].AddG = finalValue[(8*r)+292+s];
 80073c6:	7dbb      	ldrb	r3, [r7, #22]
 80073c8:	00db      	lsls	r3, r3, #3
 80073ca:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 80073ce:	7d7b      	ldrb	r3, [r7, #21]
 80073d0:	4413      	add	r3, r2
 80073d2:	4a32      	ldr	r2, [pc, #200]	@ (800749c <send_feedback_section_D+0x2b0>)
 80073d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80073d8:	7db9      	ldrb	r1, [r7, #22]
 80073da:	7d7b      	ldrb	r3, [r7, #21]
 80073dc:	b2d4      	uxtb	r4, r2
 80073de:	4832      	ldr	r0, [pc, #200]	@ (80074a8 <send_feedback_section_D+0x2bc>)
 80073e0:	461a      	mov	r2, r3
 80073e2:	0052      	lsls	r2, r2, #1
 80073e4:	441a      	add	r2, r3
 80073e6:	0053      	lsls	r3, r2, #1
 80073e8:	461a      	mov	r2, r3
 80073ea:	460b      	mov	r3, r1
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	440b      	add	r3, r1
 80073f0:	011b      	lsls	r3, r3, #4
 80073f2:	4413      	add	r3, r2
 80073f4:	4403      	add	r3, r0
 80073f6:	3303      	adds	r3, #3
 80073f8:	4622      	mov	r2, r4
 80073fa:	701a      	strb	r2, [r3, #0]
		for(uint8_t s=0; s<8; s++)
 80073fc:	7d7b      	ldrb	r3, [r7, #21]
 80073fe:	3301      	adds	r3, #1
 8007400:	757b      	strb	r3, [r7, #21]
 8007402:	7d7b      	ldrb	r3, [r7, #21]
 8007404:	2b07      	cmp	r3, #7
 8007406:	d9de      	bls.n	80073c6 <send_feedback_section_D+0x1da>
	for(uint8_t r=0; r<8; r++)
 8007408:	7dbb      	ldrb	r3, [r7, #22]
 800740a:	3301      	adds	r3, #1
 800740c:	75bb      	strb	r3, [r7, #22]
 800740e:	7dbb      	ldrb	r3, [r7, #22]
 8007410:	2b07      	cmp	r3, #7
 8007412:	d9d5      	bls.n	80073c0 <send_feedback_section_D+0x1d4>
		}
	}
	for(uint8_t r=0; r<8; r++)
 8007414:	2300      	movs	r3, #0
 8007416:	753b      	strb	r3, [r7, #20]
 8007418:	e00d      	b.n	8007436 <send_feedback_section_D+0x24a>
	{
		PLAN_Cycle_ext[r] = finalValue[356+r];
 800741a:	7d3b      	ldrb	r3, [r7, #20]
 800741c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007420:	4a1e      	ldr	r2, [pc, #120]	@ (800749c <send_feedback_section_D+0x2b0>)
 8007422:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007426:	7d3b      	ldrb	r3, [r7, #20]
 8007428:	b291      	uxth	r1, r2
 800742a:	4a20      	ldr	r2, [pc, #128]	@ (80074ac <send_feedback_section_D+0x2c0>)
 800742c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t r=0; r<8; r++)
 8007430:	7d3b      	ldrb	r3, [r7, #20]
 8007432:	3301      	adds	r3, #1
 8007434:	753b      	strb	r3, [r7, #20]
 8007436:	7d3b      	ldrb	r3, [r7, #20]
 8007438:	2b07      	cmp	r3, #7
 800743a:	d9ee      	bls.n	800741a <send_feedback_section_D+0x22e>
	}
	for(uint8_t r=0; r<8; r++)
 800743c:	2300      	movs	r3, #0
 800743e:	74fb      	strb	r3, [r7, #19]
 8007440:	e00d      	b.n	800745e <send_feedback_section_D+0x272>
	{
		PLAN_Offset_ext[r] = finalValue[364+r];
 8007442:	7cfb      	ldrb	r3, [r7, #19]
 8007444:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8007448:	4a14      	ldr	r2, [pc, #80]	@ (800749c <send_feedback_section_D+0x2b0>)
 800744a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800744e:	7cfb      	ldrb	r3, [r7, #19]
 8007450:	b291      	uxth	r1, r2
 8007452:	4a17      	ldr	r2, [pc, #92]	@ (80074b0 <send_feedback_section_D+0x2c4>)
 8007454:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t r=0; r<8; r++)
 8007458:	7cfb      	ldrb	r3, [r7, #19]
 800745a:	3301      	adds	r3, #1
 800745c:	74fb      	strb	r3, [r7, #19]
 800745e:	7cfb      	ldrb	r3, [r7, #19]
 8007460:	2b07      	cmp	r3, #7
 8007462:	d9ee      	bls.n	8007442 <send_feedback_section_D+0x256>
	}

	clear_finalValue();
 8007464:	f000 fa12 	bl	800788c <clear_finalValue>

	sprintf(send_enc, "$D:H:1#");
 8007468:	4912      	ldr	r1, [pc, #72]	@ (80074b4 <send_feedback_section_D+0x2c8>)
 800746a:	4813      	ldr	r0, [pc, #76]	@ (80074b8 <send_feedback_section_D+0x2cc>)
 800746c:	f004 fd12 	bl	800be94 <siprintf>

	HAL_UART_Transmit(&huart3, (uint8_t *)send_enc, strlen(send_enc), HAL_MAX_DELAY);
 8007470:	4811      	ldr	r0, [pc, #68]	@ (80074b8 <send_feedback_section_D+0x2cc>)
 8007472:	f7f8 fead 	bl	80001d0 <strlen>
 8007476:	4603      	mov	r3, r0
 8007478:	b29a      	uxth	r2, r3
 800747a:	f04f 33ff 	mov.w	r3, #4294967295
 800747e:	490e      	ldr	r1, [pc, #56]	@ (80074b8 <send_feedback_section_D+0x2cc>)
 8007480:	480e      	ldr	r0, [pc, #56]	@ (80074bc <send_feedback_section_D+0x2d0>)
 8007482:	f003 fb41 	bl	800ab08 <HAL_UART_Transmit>

	setting_changed = 0; setting_in_update = 1;
 8007486:	4b0e      	ldr	r3, [pc, #56]	@ (80074c0 <send_feedback_section_D+0x2d4>)
 8007488:	2200      	movs	r2, #0
 800748a:	701a      	strb	r2, [r3, #0]
 800748c:	4b0d      	ldr	r3, [pc, #52]	@ (80074c4 <send_feedback_section_D+0x2d8>)
 800748e:	2201      	movs	r2, #1
 8007490:	701a      	strb	r2, [r3, #0]
}
 8007492:	bf00      	nop
 8007494:	3724      	adds	r7, #36	@ 0x24
 8007496:	46bd      	mov	sp, r7
 8007498:	bd90      	pop	{r4, r7, pc}
 800749a:	bf00      	nop
 800749c:	20006f24 	.word	0x20006f24
 80074a0:	2000edf0 	.word	0x2000edf0
 80074a4:	2000ed4c 	.word	0x2000ed4c
 80074a8:	2000eff4 	.word	0x2000eff4
 80074ac:	2000ee54 	.word	0x2000ee54
 80074b0:	2000ee64 	.word	0x2000ee64
 80074b4:	0800e564 	.word	0x0800e564
 80074b8:	20009cc8 	.word	0x20009cc8
 80074bc:	20016bb8 	.word	0x20016bb8
 80074c0:	2000f48b 	.word	0x2000f48b
 80074c4:	2000f48c 	.word	0x2000f48c

080074c8 <send_feedback_section_T>:
void send_feedback_section_T(void)
{
 80074c8:	b590      	push	{r4, r7, lr}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
	for(uint8_t p=0;p<7;p++)
 80074ce:	2300      	movs	r3, #0
 80074d0:	71fb      	strb	r3, [r7, #7]
 80074d2:	e061      	b.n	8007598 <send_feedback_section_T+0xd0>
	{
		for(uint8_t q=0;q<9;q++)
 80074d4:	2300      	movs	r3, #0
 80074d6:	71bb      	strb	r3, [r7, #6]
 80074d8:	e058      	b.n	800758c <send_feedback_section_T+0xc4>
			/*
			 * Untuk mengambil angka 11 maka A/10000
			 * Untuk Mengambil angka 22 maka (A-(11*10000))/100
			 * Untuk mengambil angka 33 maka A - (11*10000) - (22*100)
			 */
			SCHE_ext[p][q].jam = finalValue[q+9*p]/10000;
 80074da:	79b9      	ldrb	r1, [r7, #6]
 80074dc:	79fa      	ldrb	r2, [r7, #7]
 80074de:	4613      	mov	r3, r2
 80074e0:	00db      	lsls	r3, r3, #3
 80074e2:	4413      	add	r3, r2
 80074e4:	440b      	add	r3, r1
 80074e6:	4a78      	ldr	r2, [pc, #480]	@ (80076c8 <send_feedback_section_T+0x200>)
 80074e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074ec:	4a77      	ldr	r2, [pc, #476]	@ (80076cc <send_feedback_section_T+0x204>)
 80074ee:	fba2 2303 	umull	r2, r3, r2, r3
 80074f2:	0b5b      	lsrs	r3, r3, #13
 80074f4:	79fa      	ldrb	r2, [r7, #7]
 80074f6:	79b9      	ldrb	r1, [r7, #6]
 80074f8:	b2dc      	uxtb	r4, r3
 80074fa:	4875      	ldr	r0, [pc, #468]	@ (80076d0 <send_feedback_section_T+0x208>)
 80074fc:	4613      	mov	r3, r2
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	4413      	add	r3, r2
 8007502:	440b      	add	r3, r1
 8007504:	4622      	mov	r2, r4
 8007506:	f800 2023 	strb.w	r2, [r0, r3, lsl #2]
			SCHE_ext[p][q].menit = (finalValue[q+9*p]/100)%100;
 800750a:	79b9      	ldrb	r1, [r7, #6]
 800750c:	79fa      	ldrb	r2, [r7, #7]
 800750e:	4613      	mov	r3, r2
 8007510:	00db      	lsls	r3, r3, #3
 8007512:	4413      	add	r3, r2
 8007514:	440b      	add	r3, r1
 8007516:	4a6c      	ldr	r2, [pc, #432]	@ (80076c8 <send_feedback_section_T+0x200>)
 8007518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800751c:	4a6d      	ldr	r2, [pc, #436]	@ (80076d4 <send_feedback_section_T+0x20c>)
 800751e:	fba2 2303 	umull	r2, r3, r2, r3
 8007522:	095a      	lsrs	r2, r3, #5
 8007524:	4b6b      	ldr	r3, [pc, #428]	@ (80076d4 <send_feedback_section_T+0x20c>)
 8007526:	fba3 1302 	umull	r1, r3, r3, r2
 800752a:	095b      	lsrs	r3, r3, #5
 800752c:	2164      	movs	r1, #100	@ 0x64
 800752e:	fb01 f303 	mul.w	r3, r1, r3
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	79fa      	ldrb	r2, [r7, #7]
 8007536:	79b9      	ldrb	r1, [r7, #6]
 8007538:	b2dc      	uxtb	r4, r3
 800753a:	4865      	ldr	r0, [pc, #404]	@ (80076d0 <send_feedback_section_T+0x208>)
 800753c:	4613      	mov	r3, r2
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	4413      	add	r3, r2
 8007542:	440b      	add	r3, r1
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4403      	add	r3, r0
 8007548:	4622      	mov	r2, r4
 800754a:	705a      	strb	r2, [r3, #1]
			SCHE_ext[p][q].detik = finalValue[q+9*p]%100;
 800754c:	79b9      	ldrb	r1, [r7, #6]
 800754e:	79fa      	ldrb	r2, [r7, #7]
 8007550:	4613      	mov	r3, r2
 8007552:	00db      	lsls	r3, r3, #3
 8007554:	4413      	add	r3, r2
 8007556:	440b      	add	r3, r1
 8007558:	4a5b      	ldr	r2, [pc, #364]	@ (80076c8 <send_feedback_section_T+0x200>)
 800755a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800755e:	4b5d      	ldr	r3, [pc, #372]	@ (80076d4 <send_feedback_section_T+0x20c>)
 8007560:	fba3 1302 	umull	r1, r3, r3, r2
 8007564:	095b      	lsrs	r3, r3, #5
 8007566:	2164      	movs	r1, #100	@ 0x64
 8007568:	fb01 f303 	mul.w	r3, r1, r3
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	79fa      	ldrb	r2, [r7, #7]
 8007570:	79b9      	ldrb	r1, [r7, #6]
 8007572:	b2dc      	uxtb	r4, r3
 8007574:	4856      	ldr	r0, [pc, #344]	@ (80076d0 <send_feedback_section_T+0x208>)
 8007576:	4613      	mov	r3, r2
 8007578:	00db      	lsls	r3, r3, #3
 800757a:	4413      	add	r3, r2
 800757c:	440b      	add	r3, r1
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4403      	add	r3, r0
 8007582:	4622      	mov	r2, r4
 8007584:	709a      	strb	r2, [r3, #2]
		for(uint8_t q=0;q<9;q++)
 8007586:	79bb      	ldrb	r3, [r7, #6]
 8007588:	3301      	adds	r3, #1
 800758a:	71bb      	strb	r3, [r7, #6]
 800758c:	79bb      	ldrb	r3, [r7, #6]
 800758e:	2b08      	cmp	r3, #8
 8007590:	d9a3      	bls.n	80074da <send_feedback_section_T+0x12>
	for(uint8_t p=0;p<7;p++)
 8007592:	79fb      	ldrb	r3, [r7, #7]
 8007594:	3301      	adds	r3, #1
 8007596:	71fb      	strb	r3, [r7, #7]
 8007598:	79fb      	ldrb	r3, [r7, #7]
 800759a:	2b06      	cmp	r3, #6
 800759c:	d99a      	bls.n	80074d4 <send_feedback_section_T+0xc>
		}
	}

	for(uint8_t p=0;p<7;p++)
 800759e:	2300      	movs	r3, #0
 80075a0:	717b      	strb	r3, [r7, #5]
 80075a2:	e022      	b.n	80075ea <send_feedback_section_T+0x122>
	{
		for(uint8_t q=0;q<9;q++)
 80075a4:	2300      	movs	r3, #0
 80075a6:	713b      	strb	r3, [r7, #4]
 80075a8:	e019      	b.n	80075de <send_feedback_section_T+0x116>
		{
			SCHE_ext[p][q].plan = finalValue[63+q+(9*p)];
 80075aa:	793b      	ldrb	r3, [r7, #4]
 80075ac:	f103 013f 	add.w	r1, r3, #63	@ 0x3f
 80075b0:	797a      	ldrb	r2, [r7, #5]
 80075b2:	4613      	mov	r3, r2
 80075b4:	00db      	lsls	r3, r3, #3
 80075b6:	4413      	add	r3, r2
 80075b8:	440b      	add	r3, r1
 80075ba:	4a43      	ldr	r2, [pc, #268]	@ (80076c8 <send_feedback_section_T+0x200>)
 80075bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075c0:	797a      	ldrb	r2, [r7, #5]
 80075c2:	7939      	ldrb	r1, [r7, #4]
 80075c4:	b2dc      	uxtb	r4, r3
 80075c6:	4842      	ldr	r0, [pc, #264]	@ (80076d0 <send_feedback_section_T+0x208>)
 80075c8:	4613      	mov	r3, r2
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	4413      	add	r3, r2
 80075ce:	440b      	add	r3, r1
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4403      	add	r3, r0
 80075d4:	4622      	mov	r2, r4
 80075d6:	70da      	strb	r2, [r3, #3]
		for(uint8_t q=0;q<9;q++)
 80075d8:	793b      	ldrb	r3, [r7, #4]
 80075da:	3301      	adds	r3, #1
 80075dc:	713b      	strb	r3, [r7, #4]
 80075de:	793b      	ldrb	r3, [r7, #4]
 80075e0:	2b08      	cmp	r3, #8
 80075e2:	d9e2      	bls.n	80075aa <send_feedback_section_T+0xe2>
	for(uint8_t p=0;p<7;p++)
 80075e4:	797b      	ldrb	r3, [r7, #5]
 80075e6:	3301      	adds	r3, #1
 80075e8:	717b      	strb	r3, [r7, #5]
 80075ea:	797b      	ldrb	r3, [r7, #5]
 80075ec:	2b06      	cmp	r3, #6
 80075ee:	d9d9      	bls.n	80075a4 <send_feedback_section_T+0xdc>
		}
	}
	for(uint8_t p=0;p<30;p++)
 80075f0:	2300      	movs	r3, #0
 80075f2:	70fb      	strb	r3, [r7, #3]
 80075f4:	e046      	b.n	8007684 <send_feedback_section_T+0x1bc>
	{
		HARILIBUR_ext[p].tanggal = finalValue[126+p]/10000;
 80075f6:	78fb      	ldrb	r3, [r7, #3]
 80075f8:	337e      	adds	r3, #126	@ 0x7e
 80075fa:	4a33      	ldr	r2, [pc, #204]	@ (80076c8 <send_feedback_section_T+0x200>)
 80075fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007600:	4a32      	ldr	r2, [pc, #200]	@ (80076cc <send_feedback_section_T+0x204>)
 8007602:	fba2 2303 	umull	r2, r3, r2, r3
 8007606:	0b5b      	lsrs	r3, r3, #13
 8007608:	78fa      	ldrb	r2, [r7, #3]
 800760a:	b2d8      	uxtb	r0, r3
 800760c:	4932      	ldr	r1, [pc, #200]	@ (80076d8 <send_feedback_section_T+0x210>)
 800760e:	4613      	mov	r3, r2
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	4413      	add	r3, r2
 8007614:	440b      	add	r3, r1
 8007616:	4602      	mov	r2, r0
 8007618:	701a      	strb	r2, [r3, #0]
		HARILIBUR_ext[p].bulan = (finalValue[126+p]/100)%100;
 800761a:	78fb      	ldrb	r3, [r7, #3]
 800761c:	337e      	adds	r3, #126	@ 0x7e
 800761e:	4a2a      	ldr	r2, [pc, #168]	@ (80076c8 <send_feedback_section_T+0x200>)
 8007620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007624:	4a2b      	ldr	r2, [pc, #172]	@ (80076d4 <send_feedback_section_T+0x20c>)
 8007626:	fba2 2303 	umull	r2, r3, r2, r3
 800762a:	095a      	lsrs	r2, r3, #5
 800762c:	4b29      	ldr	r3, [pc, #164]	@ (80076d4 <send_feedback_section_T+0x20c>)
 800762e:	fba3 1302 	umull	r1, r3, r3, r2
 8007632:	095b      	lsrs	r3, r3, #5
 8007634:	2164      	movs	r1, #100	@ 0x64
 8007636:	fb01 f303 	mul.w	r3, r1, r3
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	78fa      	ldrb	r2, [r7, #3]
 800763e:	b2d8      	uxtb	r0, r3
 8007640:	4925      	ldr	r1, [pc, #148]	@ (80076d8 <send_feedback_section_T+0x210>)
 8007642:	4613      	mov	r3, r2
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	4413      	add	r3, r2
 8007648:	440b      	add	r3, r1
 800764a:	3301      	adds	r3, #1
 800764c:	4602      	mov	r2, r0
 800764e:	701a      	strb	r2, [r3, #0]
		HARILIBUR_ext[p].tahun = finalValue[126+p]%100;
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	337e      	adds	r3, #126	@ 0x7e
 8007654:	4a1c      	ldr	r2, [pc, #112]	@ (80076c8 <send_feedback_section_T+0x200>)
 8007656:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800765a:	4b1e      	ldr	r3, [pc, #120]	@ (80076d4 <send_feedback_section_T+0x20c>)
 800765c:	fba3 1302 	umull	r1, r3, r3, r2
 8007660:	095b      	lsrs	r3, r3, #5
 8007662:	2164      	movs	r1, #100	@ 0x64
 8007664:	fb01 f303 	mul.w	r3, r1, r3
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	78fa      	ldrb	r2, [r7, #3]
 800766c:	b2d8      	uxtb	r0, r3
 800766e:	491a      	ldr	r1, [pc, #104]	@ (80076d8 <send_feedback_section_T+0x210>)
 8007670:	4613      	mov	r3, r2
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	4413      	add	r3, r2
 8007676:	440b      	add	r3, r1
 8007678:	3302      	adds	r3, #2
 800767a:	4602      	mov	r2, r0
 800767c:	701a      	strb	r2, [r3, #0]
	for(uint8_t p=0;p<30;p++)
 800767e:	78fb      	ldrb	r3, [r7, #3]
 8007680:	3301      	adds	r3, #1
 8007682:	70fb      	strb	r3, [r7, #3]
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	2b1d      	cmp	r3, #29
 8007688:	d9b5      	bls.n	80075f6 <send_feedback_section_T+0x12e>
	}

	clear_finalValue();
 800768a:	f000 f8ff 	bl	800788c <clear_finalValue>

	sprintf(send_enc, "$T:H:1#");
 800768e:	4913      	ldr	r1, [pc, #76]	@ (80076dc <send_feedback_section_T+0x214>)
 8007690:	4813      	ldr	r0, [pc, #76]	@ (80076e0 <send_feedback_section_T+0x218>)
 8007692:	f004 fbff 	bl	800be94 <siprintf>

	HAL_UART_Transmit(&huart3, (uint8_t *)send_enc, strlen(send_enc), HAL_MAX_DELAY);
 8007696:	4812      	ldr	r0, [pc, #72]	@ (80076e0 <send_feedback_section_T+0x218>)
 8007698:	f7f8 fd9a 	bl	80001d0 <strlen>
 800769c:	4603      	mov	r3, r0
 800769e:	b29a      	uxth	r2, r3
 80076a0:	f04f 33ff 	mov.w	r3, #4294967295
 80076a4:	490e      	ldr	r1, [pc, #56]	@ (80076e0 <send_feedback_section_T+0x218>)
 80076a6:	480f      	ldr	r0, [pc, #60]	@ (80076e4 <send_feedback_section_T+0x21c>)
 80076a8:	f003 fa2e 	bl	800ab08 <HAL_UART_Transmit>

	if(setting_in_update == 1)
 80076ac:	4b0e      	ldr	r3, [pc, #56]	@ (80076e8 <send_feedback_section_T+0x220>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d105      	bne.n	80076c0 <send_feedback_section_T+0x1f8>
	{
		setting_changed =1;
 80076b4:	4b0d      	ldr	r3, [pc, #52]	@ (80076ec <send_feedback_section_T+0x224>)
 80076b6:	2201      	movs	r2, #1
 80076b8:	701a      	strb	r2, [r3, #0]
		setting_in_update =0;
 80076ba:	4b0b      	ldr	r3, [pc, #44]	@ (80076e8 <send_feedback_section_T+0x220>)
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
	}
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd90      	pop	{r4, r7, pc}
 80076c8:	20006f24 	.word	0x20006f24
 80076cc:	d1b71759 	.word	0xd1b71759
 80076d0:	2000f270 	.word	0x2000f270
 80076d4:	51eb851f 	.word	0x51eb851f
 80076d8:	2000f3d8 	.word	0x2000f3d8
 80076dc:	0800e56c 	.word	0x0800e56c
 80076e0:	20009cc8 	.word	0x20009cc8
 80076e4:	20016bb8 	.word	0x20016bb8
 80076e8:	2000f48c 	.word	0x2000f48c
 80076ec:	2000f48b 	.word	0x2000f48b

080076f0 <send_feedback_section_R>:
void send_feedback_section_R(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0
	sDate.Date  =  finalValue[0]/10000;
 80076f4:	4b39      	ldr	r3, [pc, #228]	@ (80077dc <send_feedback_section_R+0xec>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a39      	ldr	r2, [pc, #228]	@ (80077e0 <send_feedback_section_R+0xf0>)
 80076fa:	fba2 2303 	umull	r2, r3, r2, r3
 80076fe:	0b5b      	lsrs	r3, r3, #13
 8007700:	b2da      	uxtb	r2, r3
 8007702:	4b38      	ldr	r3, [pc, #224]	@ (80077e4 <send_feedback_section_R+0xf4>)
 8007704:	709a      	strb	r2, [r3, #2]
	sDate.Month = (finalValue[0]/100)%100;
 8007706:	4b35      	ldr	r3, [pc, #212]	@ (80077dc <send_feedback_section_R+0xec>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a37      	ldr	r2, [pc, #220]	@ (80077e8 <send_feedback_section_R+0xf8>)
 800770c:	fba2 2303 	umull	r2, r3, r2, r3
 8007710:	095a      	lsrs	r2, r3, #5
 8007712:	4b35      	ldr	r3, [pc, #212]	@ (80077e8 <send_feedback_section_R+0xf8>)
 8007714:	fba3 1302 	umull	r1, r3, r3, r2
 8007718:	095b      	lsrs	r3, r3, #5
 800771a:	2164      	movs	r1, #100	@ 0x64
 800771c:	fb01 f303 	mul.w	r3, r1, r3
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	b2da      	uxtb	r2, r3
 8007724:	4b2f      	ldr	r3, [pc, #188]	@ (80077e4 <send_feedback_section_R+0xf4>)
 8007726:	705a      	strb	r2, [r3, #1]
	sDate.Year  =  finalValue[0]%100;
 8007728:	4b2c      	ldr	r3, [pc, #176]	@ (80077dc <send_feedback_section_R+0xec>)
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	4b2e      	ldr	r3, [pc, #184]	@ (80077e8 <send_feedback_section_R+0xf8>)
 800772e:	fba3 1302 	umull	r1, r3, r3, r2
 8007732:	095b      	lsrs	r3, r3, #5
 8007734:	2164      	movs	r1, #100	@ 0x64
 8007736:	fb01 f303 	mul.w	r3, r1, r3
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	b2da      	uxtb	r2, r3
 800773e:	4b29      	ldr	r3, [pc, #164]	@ (80077e4 <send_feedback_section_R+0xf4>)
 8007740:	70da      	strb	r2, [r3, #3]

	sTime.Hours = (int)finalValue[1]/10000;
 8007742:	4b26      	ldr	r3, [pc, #152]	@ (80077dc <send_feedback_section_R+0xec>)
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	4a29      	ldr	r2, [pc, #164]	@ (80077ec <send_feedback_section_R+0xfc>)
 8007748:	fb82 1203 	smull	r1, r2, r2, r3
 800774c:	1312      	asrs	r2, r2, #12
 800774e:	17db      	asrs	r3, r3, #31
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	b2da      	uxtb	r2, r3
 8007754:	4b26      	ldr	r3, [pc, #152]	@ (80077f0 <send_feedback_section_R+0x100>)
 8007756:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = ((int)finalValue[1]/100)%100;
 8007758:	4b20      	ldr	r3, [pc, #128]	@ (80077dc <send_feedback_section_R+0xec>)
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	4a22      	ldr	r2, [pc, #136]	@ (80077e8 <send_feedback_section_R+0xf8>)
 800775e:	fb82 1203 	smull	r1, r2, r2, r3
 8007762:	1152      	asrs	r2, r2, #5
 8007764:	17db      	asrs	r3, r3, #31
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	4a1f      	ldr	r2, [pc, #124]	@ (80077e8 <send_feedback_section_R+0xf8>)
 800776a:	fb82 1203 	smull	r1, r2, r2, r3
 800776e:	1151      	asrs	r1, r2, #5
 8007770:	17da      	asrs	r2, r3, #31
 8007772:	1a8a      	subs	r2, r1, r2
 8007774:	2164      	movs	r1, #100	@ 0x64
 8007776:	fb01 f202 	mul.w	r2, r1, r2
 800777a:	1a9a      	subs	r2, r3, r2
 800777c:	b2d2      	uxtb	r2, r2
 800777e:	4b1c      	ldr	r3, [pc, #112]	@ (80077f0 <send_feedback_section_R+0x100>)
 8007780:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = (int)finalValue[1]%100;
 8007782:	4b16      	ldr	r3, [pc, #88]	@ (80077dc <send_feedback_section_R+0xec>)
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	461a      	mov	r2, r3
 8007788:	4b17      	ldr	r3, [pc, #92]	@ (80077e8 <send_feedback_section_R+0xf8>)
 800778a:	fb83 1302 	smull	r1, r3, r3, r2
 800778e:	1159      	asrs	r1, r3, #5
 8007790:	17d3      	asrs	r3, r2, #31
 8007792:	1acb      	subs	r3, r1, r3
 8007794:	2164      	movs	r1, #100	@ 0x64
 8007796:	fb01 f303 	mul.w	r3, r1, r3
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	b2da      	uxtb	r2, r3
 800779e:	4b14      	ldr	r3, [pc, #80]	@ (80077f0 <send_feedback_section_R+0x100>)
 80077a0:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetDate(&hrtc,&sDate,RTC_FORMAT_BIN);
 80077a2:	2200      	movs	r2, #0
 80077a4:	490f      	ldr	r1, [pc, #60]	@ (80077e4 <send_feedback_section_R+0xf4>)
 80077a6:	4813      	ldr	r0, [pc, #76]	@ (80077f4 <send_feedback_section_R+0x104>)
 80077a8:	f002 fb4d 	bl	8009e46 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 80077ac:	2200      	movs	r2, #0
 80077ae:	4910      	ldr	r1, [pc, #64]	@ (80077f0 <send_feedback_section_R+0x100>)
 80077b0:	4810      	ldr	r0, [pc, #64]	@ (80077f4 <send_feedback_section_R+0x104>)
 80077b2:	f002 fa50 	bl	8009c56 <HAL_RTC_SetTime>

	clear_finalValue();
 80077b6:	f000 f869 	bl	800788c <clear_finalValue>

	sprintf(send_enc, "$R:H:1#");
 80077ba:	490f      	ldr	r1, [pc, #60]	@ (80077f8 <send_feedback_section_R+0x108>)
 80077bc:	480f      	ldr	r0, [pc, #60]	@ (80077fc <send_feedback_section_R+0x10c>)
 80077be:	f004 fb69 	bl	800be94 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)send_enc, strlen(send_enc), HAL_MAX_DELAY);
 80077c2:	480e      	ldr	r0, [pc, #56]	@ (80077fc <send_feedback_section_R+0x10c>)
 80077c4:	f7f8 fd04 	bl	80001d0 <strlen>
 80077c8:	4603      	mov	r3, r0
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	f04f 33ff 	mov.w	r3, #4294967295
 80077d0:	490a      	ldr	r1, [pc, #40]	@ (80077fc <send_feedback_section_R+0x10c>)
 80077d2:	480b      	ldr	r0, [pc, #44]	@ (8007800 <send_feedback_section_R+0x110>)
 80077d4:	f003 f998 	bl	800ab08 <HAL_UART_Transmit>
}
 80077d8:	bf00      	nop
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	20006f24 	.word	0x20006f24
 80077e0:	d1b71759 	.word	0xd1b71759
 80077e4:	2000eb44 	.word	0x2000eb44
 80077e8:	51eb851f 	.word	0x51eb851f
 80077ec:	68db8bad 	.word	0x68db8bad
 80077f0:	2000eb08 	.word	0x2000eb08
 80077f4:	20011bec 	.word	0x20011bec
 80077f8:	0800e574 	.word	0x0800e574
 80077fc:	20009cc8 	.word	0x20009cc8
 8007800:	20016bb8 	.word	0x20016bb8

08007804 <send_feedback_section_Q>:
void send_feedback_section_Q(void)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	af00      	add	r7, sp, #0
	command.hold = (finalValue[0]>>1) & 0x01;
 8007808:	4b1b      	ldr	r3, [pc, #108]	@ (8007878 <send_feedback_section_Q+0x74>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	085b      	lsrs	r3, r3, #1
 800780e:	b2db      	uxtb	r3, r3
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	b2da      	uxtb	r2, r3
 8007816:	4b19      	ldr	r3, [pc, #100]	@ (800787c <send_feedback_section_Q+0x78>)
 8007818:	70da      	strb	r2, [r3, #3]
	command.skip = (finalValue[0]>>2) & 0x01;
 800781a:	4b17      	ldr	r3, [pc, #92]	@ (8007878 <send_feedback_section_Q+0x74>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	089b      	lsrs	r3, r3, #2
 8007820:	b2db      	uxtb	r3, r3
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	b2da      	uxtb	r2, r3
 8007828:	4b14      	ldr	r3, [pc, #80]	@ (800787c <send_feedback_section_Q+0x78>)
 800782a:	711a      	strb	r2, [r3, #4]
	command.flasher = (finalValue[0]>>3) & 0x01;
 800782c:	4b12      	ldr	r3, [pc, #72]	@ (8007878 <send_feedback_section_Q+0x74>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	08db      	lsrs	r3, r3, #3
 8007832:	b2db      	uxtb	r3, r3
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	b2da      	uxtb	r2, r3
 800783a:	4b10      	ldr	r3, [pc, #64]	@ (800787c <send_feedback_section_Q+0x78>)
 800783c:	715a      	strb	r2, [r3, #5]
	command.system = (finalValue[0]>>4) & 0x01;
 800783e:	4b0e      	ldr	r3, [pc, #56]	@ (8007878 <send_feedback_section_Q+0x74>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	091b      	lsrs	r3, r3, #4
 8007844:	b2db      	uxtb	r3, r3
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	b2da      	uxtb	r2, r3
 800784c:	4b0b      	ldr	r3, [pc, #44]	@ (800787c <send_feedback_section_Q+0x78>)
 800784e:	705a      	strb	r2, [r3, #1]

	clear_finalValue();
 8007850:	f000 f81c 	bl	800788c <clear_finalValue>

	sprintf(send_enc, "$Q:H:1#");
 8007854:	490a      	ldr	r1, [pc, #40]	@ (8007880 <send_feedback_section_Q+0x7c>)
 8007856:	480b      	ldr	r0, [pc, #44]	@ (8007884 <send_feedback_section_Q+0x80>)
 8007858:	f004 fb1c 	bl	800be94 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)send_enc, strlen(send_enc), HAL_MAX_DELAY);
 800785c:	4809      	ldr	r0, [pc, #36]	@ (8007884 <send_feedback_section_Q+0x80>)
 800785e:	f7f8 fcb7 	bl	80001d0 <strlen>
 8007862:	4603      	mov	r3, r0
 8007864:	b29a      	uxth	r2, r3
 8007866:	f04f 33ff 	mov.w	r3, #4294967295
 800786a:	4906      	ldr	r1, [pc, #24]	@ (8007884 <send_feedback_section_Q+0x80>)
 800786c:	4806      	ldr	r0, [pc, #24]	@ (8007888 <send_feedback_section_Q+0x84>)
 800786e:	f003 f94b 	bl	800ab08 <HAL_UART_Transmit>
}
 8007872:	bf00      	nop
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20006f24 	.word	0x20006f24
 800787c:	2000f44c 	.word	0x2000f44c
 8007880:	0800e57c 	.word	0x0800e57c
 8007884:	20009cc8 	.word	0x20009cc8
 8007888:	20016bb8 	.word	0x20016bb8

0800788c <clear_finalValue>:

void clear_finalValue(void)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
	for(int16_t i=0; i<MAX_VARIABLE; i++)
 8007892:	2300      	movs	r3, #0
 8007894:	80fb      	strh	r3, [r7, #6]
 8007896:	e00b      	b.n	80078b0 <clear_finalValue+0x24>
	{
		finalValue[i] = 0;
 8007898:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800789c:	4a0a      	ldr	r2, [pc, #40]	@ (80078c8 <clear_finalValue+0x3c>)
 800789e:	2100      	movs	r1, #0
 80078a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int16_t i=0; i<MAX_VARIABLE; i++)
 80078a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3301      	adds	r3, #1
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	80fb      	strh	r3, [r7, #6]
 80078b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078b4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80078b8:	dbee      	blt.n	8007898 <clear_finalValue+0xc>
	}
}
 80078ba:	bf00      	nop
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	20006f24 	.word	0x20006f24

080078cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80078cc:	b480      	push	{r7}
 80078ce:	af00      	add	r7, sp, #0
  return 1;
 80078d0:	2301      	movs	r3, #1
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <_kill>:

int _kill(int pid, int sig)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80078e6:	f004 fc27 	bl	800c138 <__errno>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2216      	movs	r2, #22
 80078ee:	601a      	str	r2, [r3, #0]
  return -1;
 80078f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <_exit>:

void _exit (int status)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007904:	f04f 31ff 	mov.w	r1, #4294967295
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7ff ffe7 	bl	80078dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800790e:	bf00      	nop
 8007910:	e7fd      	b.n	800790e <_exit+0x12>

08007912 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b086      	sub	sp, #24
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800791e:	2300      	movs	r3, #0
 8007920:	617b      	str	r3, [r7, #20]
 8007922:	e00a      	b.n	800793a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007924:	f3af 8000 	nop.w
 8007928:	4601      	mov	r1, r0
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	60ba      	str	r2, [r7, #8]
 8007930:	b2ca      	uxtb	r2, r1
 8007932:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	3301      	adds	r3, #1
 8007938:	617b      	str	r3, [r7, #20]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	429a      	cmp	r2, r3
 8007940:	dbf0      	blt.n	8007924 <_read+0x12>
  }

  return len;
 8007942:	687b      	ldr	r3, [r7, #4]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007958:	2300      	movs	r3, #0
 800795a:	617b      	str	r3, [r7, #20]
 800795c:	e009      	b.n	8007972 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	1c5a      	adds	r2, r3, #1
 8007962:	60ba      	str	r2, [r7, #8]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	4618      	mov	r0, r3
 8007968:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	3301      	adds	r3, #1
 8007970:	617b      	str	r3, [r7, #20]
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	429a      	cmp	r2, r3
 8007978:	dbf1      	blt.n	800795e <_write+0x12>
  }
  return len;
 800797a:	687b      	ldr	r3, [r7, #4]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <_close>:

int _close(int file)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800798c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007990:	4618      	mov	r0, r3
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80079ac:	605a      	str	r2, [r3, #4]
  return 0;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <_isatty>:

int _isatty(int file)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80079c4:	2301      	movs	r3, #1
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b085      	sub	sp, #20
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	60f8      	str	r0, [r7, #12]
 80079da:	60b9      	str	r1, [r7, #8]
 80079dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80079f4:	4a14      	ldr	r2, [pc, #80]	@ (8007a48 <_sbrk+0x5c>)
 80079f6:	4b15      	ldr	r3, [pc, #84]	@ (8007a4c <_sbrk+0x60>)
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007a00:	4b13      	ldr	r3, [pc, #76]	@ (8007a50 <_sbrk+0x64>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d102      	bne.n	8007a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007a08:	4b11      	ldr	r3, [pc, #68]	@ (8007a50 <_sbrk+0x64>)
 8007a0a:	4a12      	ldr	r2, [pc, #72]	@ (8007a54 <_sbrk+0x68>)
 8007a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007a0e:	4b10      	ldr	r3, [pc, #64]	@ (8007a50 <_sbrk+0x64>)
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4413      	add	r3, r2
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d207      	bcs.n	8007a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007a1c:	f004 fb8c 	bl	800c138 <__errno>
 8007a20:	4603      	mov	r3, r0
 8007a22:	220c      	movs	r2, #12
 8007a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007a26:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2a:	e009      	b.n	8007a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007a2c:	4b08      	ldr	r3, [pc, #32]	@ (8007a50 <_sbrk+0x64>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007a32:	4b07      	ldr	r3, [pc, #28]	@ (8007a50 <_sbrk+0x64>)
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4413      	add	r3, r2
 8007a3a:	4a05      	ldr	r2, [pc, #20]	@ (8007a50 <_sbrk+0x64>)
 8007a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	20020000 	.word	0x20020000
 8007a4c:	00000400 	.word	0x00000400
 8007a50:	20016a4c 	.word	0x20016a4c
 8007a54:	20016d98 	.word	0x20016d98

08007a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007a5c:	4b06      	ldr	r3, [pc, #24]	@ (8007a78 <SystemInit+0x20>)
 8007a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a62:	4a05      	ldr	r2, [pc, #20]	@ (8007a78 <SystemInit+0x20>)
 8007a64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007a68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007a6c:	bf00      	nop
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	e000ed00 	.word	0xe000ed00

08007a7c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007a82:	f107 0308 	add.w	r3, r7, #8
 8007a86:	2200      	movs	r2, #0
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	605a      	str	r2, [r3, #4]
 8007a8c:	609a      	str	r2, [r3, #8]
 8007a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a90:	463b      	mov	r3, r7
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007a98:	4b1d      	ldr	r3, [pc, #116]	@ (8007b10 <MX_TIM2_Init+0x94>)
 8007a9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007a9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8007aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8007b10 <MX_TIM2_Init+0x94>)
 8007aa2:	2253      	movs	r2, #83	@ 0x53
 8007aa4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8007b10 <MX_TIM2_Init+0x94>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499999;
 8007aac:	4b18      	ldr	r3, [pc, #96]	@ (8007b10 <MX_TIM2_Init+0x94>)
 8007aae:	4a19      	ldr	r2, [pc, #100]	@ (8007b14 <MX_TIM2_Init+0x98>)
 8007ab0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ab2:	4b17      	ldr	r3, [pc, #92]	@ (8007b10 <MX_TIM2_Init+0x94>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ab8:	4b15      	ldr	r3, [pc, #84]	@ (8007b10 <MX_TIM2_Init+0x94>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007abe:	4814      	ldr	r0, [pc, #80]	@ (8007b10 <MX_TIM2_Init+0x94>)
 8007ac0:	f002 fb52 	bl	800a168 <HAL_TIM_Base_Init>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8007aca:	f7fe fa03 	bl	8005ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007ace:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ad2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007ad4:	f107 0308 	add.w	r3, r7, #8
 8007ad8:	4619      	mov	r1, r3
 8007ada:	480d      	ldr	r0, [pc, #52]	@ (8007b10 <MX_TIM2_Init+0x94>)
 8007adc:	f002 fcf4 	bl	800a4c8 <HAL_TIM_ConfigClockSource>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8007ae6:	f7fe f9f5 	bl	8005ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007aea:	2300      	movs	r3, #0
 8007aec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007aee:	2300      	movs	r3, #0
 8007af0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007af2:	463b      	mov	r3, r7
 8007af4:	4619      	mov	r1, r3
 8007af6:	4806      	ldr	r0, [pc, #24]	@ (8007b10 <MX_TIM2_Init+0x94>)
 8007af8:	f002 ff26 	bl	800a948 <HAL_TIMEx_MasterConfigSynchronization>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8007b02:	f7fe f9e7 	bl	8005ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007b06:	bf00      	nop
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	20016a50 	.word	0x20016a50
 8007b14:	0007a11f 	.word	0x0007a11f

08007b18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007b1e:	f107 0308 	add.w	r3, r7, #8
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	605a      	str	r2, [r3, #4]
 8007b28:	609a      	str	r2, [r3, #8]
 8007b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b2c:	463b      	mov	r3, r7
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]
 8007b32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007b34:	4b1d      	ldr	r3, [pc, #116]	@ (8007bac <MX_TIM3_Init+0x94>)
 8007b36:	4a1e      	ldr	r2, [pc, #120]	@ (8007bb0 <MX_TIM3_Init+0x98>)
 8007b38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 8007b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8007bac <MX_TIM3_Init+0x94>)
 8007b3c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8007b40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b42:	4b1a      	ldr	r3, [pc, #104]	@ (8007bac <MX_TIM3_Init+0x94>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8007b48:	4b18      	ldr	r3, [pc, #96]	@ (8007bac <MX_TIM3_Init+0x94>)
 8007b4a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8007b4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b50:	4b16      	ldr	r3, [pc, #88]	@ (8007bac <MX_TIM3_Init+0x94>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b56:	4b15      	ldr	r3, [pc, #84]	@ (8007bac <MX_TIM3_Init+0x94>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007b5c:	4813      	ldr	r0, [pc, #76]	@ (8007bac <MX_TIM3_Init+0x94>)
 8007b5e:	f002 fb03 	bl	800a168 <HAL_TIM_Base_Init>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007b68:	f7fe f9b4 	bl	8005ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007b6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007b72:	f107 0308 	add.w	r3, r7, #8
 8007b76:	4619      	mov	r1, r3
 8007b78:	480c      	ldr	r0, [pc, #48]	@ (8007bac <MX_TIM3_Init+0x94>)
 8007b7a:	f002 fca5 	bl	800a4c8 <HAL_TIM_ConfigClockSource>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007b84:	f7fe f9a6 	bl	8005ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007b90:	463b      	mov	r3, r7
 8007b92:	4619      	mov	r1, r3
 8007b94:	4805      	ldr	r0, [pc, #20]	@ (8007bac <MX_TIM3_Init+0x94>)
 8007b96:	f002 fed7 	bl	800a948 <HAL_TIMEx_MasterConfigSynchronization>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007ba0:	f7fe f998 	bl	8005ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007ba4:	bf00      	nop
 8007ba6:	3718      	adds	r7, #24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	20016a98 	.word	0x20016a98
 8007bb0:	40000400 	.word	0x40000400

08007bb4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007bba:	f107 0308 	add.w	r3, r7, #8
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	605a      	str	r2, [r3, #4]
 8007bc4:	609a      	str	r2, [r3, #8]
 8007bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007bc8:	463b      	mov	r3, r7
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8007c48 <MX_TIM4_Init+0x94>)
 8007bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8007c4c <MX_TIM4_Init+0x98>)
 8007bd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4199;
 8007bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8007c48 <MX_TIM4_Init+0x94>)
 8007bd8:	f241 0267 	movw	r2, #4199	@ 0x1067
 8007bdc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007bde:	4b1a      	ldr	r3, [pc, #104]	@ (8007c48 <MX_TIM4_Init+0x94>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8007be4:	4b18      	ldr	r3, [pc, #96]	@ (8007c48 <MX_TIM4_Init+0x94>)
 8007be6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8007bea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007bec:	4b16      	ldr	r3, [pc, #88]	@ (8007c48 <MX_TIM4_Init+0x94>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007bf2:	4b15      	ldr	r3, [pc, #84]	@ (8007c48 <MX_TIM4_Init+0x94>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007bf8:	4813      	ldr	r0, [pc, #76]	@ (8007c48 <MX_TIM4_Init+0x94>)
 8007bfa:	f002 fab5 	bl	800a168 <HAL_TIM_Base_Init>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d001      	beq.n	8007c08 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8007c04:	f7fe f966 	bl	8005ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007c0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007c0e:	f107 0308 	add.w	r3, r7, #8
 8007c12:	4619      	mov	r1, r3
 8007c14:	480c      	ldr	r0, [pc, #48]	@ (8007c48 <MX_TIM4_Init+0x94>)
 8007c16:	f002 fc57 	bl	800a4c8 <HAL_TIM_ConfigClockSource>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8007c20:	f7fe f958 	bl	8005ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007c24:	2300      	movs	r3, #0
 8007c26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007c2c:	463b      	mov	r3, r7
 8007c2e:	4619      	mov	r1, r3
 8007c30:	4805      	ldr	r0, [pc, #20]	@ (8007c48 <MX_TIM4_Init+0x94>)
 8007c32:	f002 fe89 	bl	800a948 <HAL_TIMEx_MasterConfigSynchronization>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8007c3c:	f7fe f94a 	bl	8005ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8007c40:	bf00      	nop
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	20016ae0 	.word	0x20016ae0
 8007c4c:	40000800 	.word	0x40000800

08007c50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c60:	d116      	bne.n	8007c90 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007c62:	2300      	movs	r3, #0
 8007c64:	617b      	str	r3, [r7, #20]
 8007c66:	4b28      	ldr	r3, [pc, #160]	@ (8007d08 <HAL_TIM_Base_MspInit+0xb8>)
 8007c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c6a:	4a27      	ldr	r2, [pc, #156]	@ (8007d08 <HAL_TIM_Base_MspInit+0xb8>)
 8007c6c:	f043 0301 	orr.w	r3, r3, #1
 8007c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c72:	4b25      	ldr	r3, [pc, #148]	@ (8007d08 <HAL_TIM_Base_MspInit+0xb8>)
 8007c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	617b      	str	r3, [r7, #20]
 8007c7c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007c7e:	2200      	movs	r2, #0
 8007c80:	2100      	movs	r1, #0
 8007c82:	201c      	movs	r0, #28
 8007c84:	f000 fdf5 	bl	8008872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007c88:	201c      	movs	r0, #28
 8007c8a:	f000 fe0e 	bl	80088aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8007c8e:	e036      	b.n	8007cfe <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM3)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a1d      	ldr	r2, [pc, #116]	@ (8007d0c <HAL_TIM_Base_MspInit+0xbc>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d116      	bne.n	8007cc8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	613b      	str	r3, [r7, #16]
 8007c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8007d08 <HAL_TIM_Base_MspInit+0xb8>)
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca2:	4a19      	ldr	r2, [pc, #100]	@ (8007d08 <HAL_TIM_Base_MspInit+0xb8>)
 8007ca4:	f043 0302 	orr.w	r3, r3, #2
 8007ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007caa:	4b17      	ldr	r3, [pc, #92]	@ (8007d08 <HAL_TIM_Base_MspInit+0xb8>)
 8007cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cae:	f003 0302 	and.w	r3, r3, #2
 8007cb2:	613b      	str	r3, [r7, #16]
 8007cb4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	2100      	movs	r1, #0
 8007cba:	201d      	movs	r0, #29
 8007cbc:	f000 fdd9 	bl	8008872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007cc0:	201d      	movs	r0, #29
 8007cc2:	f000 fdf2 	bl	80088aa <HAL_NVIC_EnableIRQ>
}
 8007cc6:	e01a      	b.n	8007cfe <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM4)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a10      	ldr	r2, [pc, #64]	@ (8007d10 <HAL_TIM_Base_MspInit+0xc0>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d115      	bne.n	8007cfe <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60fb      	str	r3, [r7, #12]
 8007cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8007d08 <HAL_TIM_Base_MspInit+0xb8>)
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cda:	4a0b      	ldr	r2, [pc, #44]	@ (8007d08 <HAL_TIM_Base_MspInit+0xb8>)
 8007cdc:	f043 0304 	orr.w	r3, r3, #4
 8007ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ce2:	4b09      	ldr	r3, [pc, #36]	@ (8007d08 <HAL_TIM_Base_MspInit+0xb8>)
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce6:	f003 0304 	and.w	r3, r3, #4
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	201e      	movs	r0, #30
 8007cf4:	f000 fdbd 	bl	8008872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007cf8:	201e      	movs	r0, #30
 8007cfa:	f000 fdd6 	bl	80088aa <HAL_NVIC_EnableIRQ>
}
 8007cfe:	bf00      	nop
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	40023800 	.word	0x40023800
 8007d0c:	40000400 	.word	0x40000400
 8007d10:	40000800 	.word	0x40000800

08007d14 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8007d18:	4b11      	ldr	r3, [pc, #68]	@ (8007d60 <MX_UART4_Init+0x4c>)
 8007d1a:	4a12      	ldr	r2, [pc, #72]	@ (8007d64 <MX_UART4_Init+0x50>)
 8007d1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8007d1e:	4b10      	ldr	r3, [pc, #64]	@ (8007d60 <MX_UART4_Init+0x4c>)
 8007d20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007d24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8007d26:	4b0e      	ldr	r3, [pc, #56]	@ (8007d60 <MX_UART4_Init+0x4c>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8007d60 <MX_UART4_Init+0x4c>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007d32:	4b0b      	ldr	r3, [pc, #44]	@ (8007d60 <MX_UART4_Init+0x4c>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8007d38:	4b09      	ldr	r3, [pc, #36]	@ (8007d60 <MX_UART4_Init+0x4c>)
 8007d3a:	220c      	movs	r2, #12
 8007d3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d3e:	4b08      	ldr	r3, [pc, #32]	@ (8007d60 <MX_UART4_Init+0x4c>)
 8007d40:	2200      	movs	r2, #0
 8007d42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d44:	4b06      	ldr	r3, [pc, #24]	@ (8007d60 <MX_UART4_Init+0x4c>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007d4a:	4805      	ldr	r0, [pc, #20]	@ (8007d60 <MX_UART4_Init+0x4c>)
 8007d4c:	f002 fe8c 	bl	800aa68 <HAL_UART_Init>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8007d56:	f7fe f8bd 	bl	8005ed4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8007d5a:	bf00      	nop
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	20016b28 	.word	0x20016b28
 8007d64:	40004c00 	.word	0x40004c00

08007d68 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007d6c:	4b11      	ldr	r3, [pc, #68]	@ (8007db4 <MX_USART1_UART_Init+0x4c>)
 8007d6e:	4a12      	ldr	r2, [pc, #72]	@ (8007db8 <MX_USART1_UART_Init+0x50>)
 8007d70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007d72:	4b10      	ldr	r3, [pc, #64]	@ (8007db4 <MX_USART1_UART_Init+0x4c>)
 8007d74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007d78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007db4 <MX_USART1_UART_Init+0x4c>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007d80:	4b0c      	ldr	r3, [pc, #48]	@ (8007db4 <MX_USART1_UART_Init+0x4c>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007d86:	4b0b      	ldr	r3, [pc, #44]	@ (8007db4 <MX_USART1_UART_Init+0x4c>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007d8c:	4b09      	ldr	r3, [pc, #36]	@ (8007db4 <MX_USART1_UART_Init+0x4c>)
 8007d8e:	220c      	movs	r2, #12
 8007d90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d92:	4b08      	ldr	r3, [pc, #32]	@ (8007db4 <MX_USART1_UART_Init+0x4c>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d98:	4b06      	ldr	r3, [pc, #24]	@ (8007db4 <MX_USART1_UART_Init+0x4c>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007d9e:	4805      	ldr	r0, [pc, #20]	@ (8007db4 <MX_USART1_UART_Init+0x4c>)
 8007da0:	f002 fe62 	bl	800aa68 <HAL_UART_Init>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007daa:	f7fe f893 	bl	8005ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007dae:	bf00      	nop
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	20016b70 	.word	0x20016b70
 8007db8:	40011000 	.word	0x40011000

08007dbc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007dc0:	4b11      	ldr	r3, [pc, #68]	@ (8007e08 <MX_USART3_UART_Init+0x4c>)
 8007dc2:	4a12      	ldr	r2, [pc, #72]	@ (8007e0c <MX_USART3_UART_Init+0x50>)
 8007dc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007dc6:	4b10      	ldr	r3, [pc, #64]	@ (8007e08 <MX_USART3_UART_Init+0x4c>)
 8007dc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007dcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007dce:	4b0e      	ldr	r3, [pc, #56]	@ (8007e08 <MX_USART3_UART_Init+0x4c>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8007e08 <MX_USART3_UART_Init+0x4c>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007dda:	4b0b      	ldr	r3, [pc, #44]	@ (8007e08 <MX_USART3_UART_Init+0x4c>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007de0:	4b09      	ldr	r3, [pc, #36]	@ (8007e08 <MX_USART3_UART_Init+0x4c>)
 8007de2:	220c      	movs	r2, #12
 8007de4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007de6:	4b08      	ldr	r3, [pc, #32]	@ (8007e08 <MX_USART3_UART_Init+0x4c>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007dec:	4b06      	ldr	r3, [pc, #24]	@ (8007e08 <MX_USART3_UART_Init+0x4c>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007df2:	4805      	ldr	r0, [pc, #20]	@ (8007e08 <MX_USART3_UART_Init+0x4c>)
 8007df4:	f002 fe38 	bl	800aa68 <HAL_UART_Init>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8007dfe:	f7fe f869 	bl	8005ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007e02:	bf00      	nop
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20016bb8 	.word	0x20016bb8
 8007e0c:	40004800 	.word	0x40004800

08007e10 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8007e14:	4b11      	ldr	r3, [pc, #68]	@ (8007e5c <MX_USART6_UART_Init+0x4c>)
 8007e16:	4a12      	ldr	r2, [pc, #72]	@ (8007e60 <MX_USART6_UART_Init+0x50>)
 8007e18:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8007e1a:	4b10      	ldr	r3, [pc, #64]	@ (8007e5c <MX_USART6_UART_Init+0x4c>)
 8007e1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007e20:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8007e22:	4b0e      	ldr	r3, [pc, #56]	@ (8007e5c <MX_USART6_UART_Init+0x4c>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8007e28:	4b0c      	ldr	r3, [pc, #48]	@ (8007e5c <MX_USART6_UART_Init+0x4c>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8007e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e5c <MX_USART6_UART_Init+0x4c>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8007e34:	4b09      	ldr	r3, [pc, #36]	@ (8007e5c <MX_USART6_UART_Init+0x4c>)
 8007e36:	220c      	movs	r2, #12
 8007e38:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007e3a:	4b08      	ldr	r3, [pc, #32]	@ (8007e5c <MX_USART6_UART_Init+0x4c>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8007e40:	4b06      	ldr	r3, [pc, #24]	@ (8007e5c <MX_USART6_UART_Init+0x4c>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8007e46:	4805      	ldr	r0, [pc, #20]	@ (8007e5c <MX_USART6_UART_Init+0x4c>)
 8007e48:	f002 fe0e 	bl	800aa68 <HAL_UART_Init>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8007e52:	f7fe f83f 	bl	8005ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8007e56:	bf00      	nop
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20016c00 	.word	0x20016c00
 8007e60:	40011400 	.word	0x40011400

08007e64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b090      	sub	sp, #64	@ 0x40
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	605a      	str	r2, [r3, #4]
 8007e76:	609a      	str	r2, [r3, #8]
 8007e78:	60da      	str	r2, [r3, #12]
 8007e7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a75      	ldr	r2, [pc, #468]	@ (8008058 <HAL_UART_MspInit+0x1f4>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d135      	bne.n	8007ef2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007e86:	2300      	movs	r3, #0
 8007e88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e8a:	4b74      	ldr	r3, [pc, #464]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e8e:	4a73      	ldr	r2, [pc, #460]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007e90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e96:	4b71      	ldr	r3, [pc, #452]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ea6:	4b6d      	ldr	r3, [pc, #436]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eaa:	4a6c      	ldr	r2, [pc, #432]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007eac:	f043 0304 	orr.w	r3, r3, #4
 8007eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8007eb2:	4b6a      	ldr	r3, [pc, #424]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb6:	f003 0304 	and.w	r3, r3, #4
 8007eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ETH_TX_Pin|ETH_RX_Pin;
 8007ebe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007ed0:	2308      	movs	r3, #8
 8007ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ed4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007ed8:	4619      	mov	r1, r3
 8007eda:	4861      	ldr	r0, [pc, #388]	@ (8008060 <HAL_UART_MspInit+0x1fc>)
 8007edc:	f000 fd92 	bl	8008a04 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	2034      	movs	r0, #52	@ 0x34
 8007ee6:	f000 fcc4 	bl	8008872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8007eea:	2034      	movs	r0, #52	@ 0x34
 8007eec:	f000 fcdd 	bl	80088aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8007ef0:	e0ae      	b.n	8008050 <HAL_UART_MspInit+0x1ec>
  else if(uartHandle->Instance==USART1)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a5b      	ldr	r2, [pc, #364]	@ (8008064 <HAL_UART_MspInit+0x200>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d135      	bne.n	8007f68 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007efc:	2300      	movs	r3, #0
 8007efe:	623b      	str	r3, [r7, #32]
 8007f00:	4b56      	ldr	r3, [pc, #344]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f04:	4a55      	ldr	r2, [pc, #340]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007f06:	f043 0310 	orr.w	r3, r3, #16
 8007f0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8007f0c:	4b53      	ldr	r3, [pc, #332]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f10:	f003 0310 	and.w	r3, r3, #16
 8007f14:	623b      	str	r3, [r7, #32]
 8007f16:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f18:	2300      	movs	r3, #0
 8007f1a:	61fb      	str	r3, [r7, #28]
 8007f1c:	4b4f      	ldr	r3, [pc, #316]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f20:	4a4e      	ldr	r2, [pc, #312]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007f22:	f043 0301 	orr.w	r3, r3, #1
 8007f26:	6313      	str	r3, [r2, #48]	@ 0x30
 8007f28:	4b4c      	ldr	r3, [pc, #304]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	61fb      	str	r3, [r7, #28]
 8007f32:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = RS485_TX_Pin|RS485_RX_Pin;
 8007f34:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8007f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f42:	2303      	movs	r3, #3
 8007f44:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007f46:	2307      	movs	r3, #7
 8007f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007f4e:	4619      	mov	r1, r3
 8007f50:	4845      	ldr	r0, [pc, #276]	@ (8008068 <HAL_UART_MspInit+0x204>)
 8007f52:	f000 fd57 	bl	8008a04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007f56:	2200      	movs	r2, #0
 8007f58:	2100      	movs	r1, #0
 8007f5a:	2025      	movs	r0, #37	@ 0x25
 8007f5c:	f000 fc89 	bl	8008872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007f60:	2025      	movs	r0, #37	@ 0x25
 8007f62:	f000 fca2 	bl	80088aa <HAL_NVIC_EnableIRQ>
}
 8007f66:	e073      	b.n	8008050 <HAL_UART_MspInit+0x1ec>
  else if(uartHandle->Instance==USART3)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a3f      	ldr	r2, [pc, #252]	@ (800806c <HAL_UART_MspInit+0x208>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d135      	bne.n	8007fde <HAL_UART_MspInit+0x17a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007f72:	2300      	movs	r3, #0
 8007f74:	61bb      	str	r3, [r7, #24]
 8007f76:	4b39      	ldr	r3, [pc, #228]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f7a:	4a38      	ldr	r2, [pc, #224]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f82:	4b36      	ldr	r3, [pc, #216]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f8a:	61bb      	str	r3, [r7, #24]
 8007f8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f8e:	2300      	movs	r3, #0
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	4b32      	ldr	r3, [pc, #200]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f96:	4a31      	ldr	r2, [pc, #196]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007f98:	f043 0308 	orr.w	r3, r3, #8
 8007f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa2:	f003 0308 	and.w	r3, r3, #8
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RS485_INT_TX_Pin|RS485_INT_RX_Pin;
 8007faa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007fbc:	2307      	movs	r3, #7
 8007fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007fc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	482a      	ldr	r0, [pc, #168]	@ (8008070 <HAL_UART_MspInit+0x20c>)
 8007fc8:	f000 fd1c 	bl	8008a04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2100      	movs	r1, #0
 8007fd0:	2027      	movs	r0, #39	@ 0x27
 8007fd2:	f000 fc4e 	bl	8008872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007fd6:	2027      	movs	r0, #39	@ 0x27
 8007fd8:	f000 fc67 	bl	80088aa <HAL_NVIC_EnableIRQ>
}
 8007fdc:	e038      	b.n	8008050 <HAL_UART_MspInit+0x1ec>
  else if(uartHandle->Instance==USART6)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a24      	ldr	r2, [pc, #144]	@ (8008074 <HAL_UART_MspInit+0x210>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d133      	bne.n	8008050 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007fe8:	2300      	movs	r3, #0
 8007fea:	613b      	str	r3, [r7, #16]
 8007fec:	4b1b      	ldr	r3, [pc, #108]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007ff2:	f043 0320 	orr.w	r3, r3, #32
 8007ff6:	6453      	str	r3, [r2, #68]	@ 0x44
 8007ff8:	4b18      	ldr	r3, [pc, #96]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8007ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ffc:	f003 0320 	and.w	r3, r3, #32
 8008000:	613b      	str	r3, [r7, #16]
 8008002:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	4b14      	ldr	r3, [pc, #80]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 800800a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800800c:	4a13      	ldr	r2, [pc, #76]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 800800e:	f043 0304 	orr.w	r3, r3, #4
 8008012:	6313      	str	r3, [r2, #48]	@ 0x30
 8008014:	4b11      	ldr	r3, [pc, #68]	@ (800805c <HAL_UART_MspInit+0x1f8>)
 8008016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	60fb      	str	r3, [r7, #12]
 800801e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USB_TX_Pin|USB_RX_Pin;
 8008020:	23c0      	movs	r3, #192	@ 0xc0
 8008022:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008024:	2302      	movs	r3, #2
 8008026:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008028:	2300      	movs	r3, #0
 800802a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800802c:	2303      	movs	r3, #3
 800802e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8008030:	2308      	movs	r3, #8
 8008032:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008034:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008038:	4619      	mov	r1, r3
 800803a:	4809      	ldr	r0, [pc, #36]	@ (8008060 <HAL_UART_MspInit+0x1fc>)
 800803c:	f000 fce2 	bl	8008a04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8008040:	2200      	movs	r2, #0
 8008042:	2100      	movs	r1, #0
 8008044:	2047      	movs	r0, #71	@ 0x47
 8008046:	f000 fc14 	bl	8008872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800804a:	2047      	movs	r0, #71	@ 0x47
 800804c:	f000 fc2d 	bl	80088aa <HAL_NVIC_EnableIRQ>
}
 8008050:	bf00      	nop
 8008052:	3740      	adds	r7, #64	@ 0x40
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	40004c00 	.word	0x40004c00
 800805c:	40023800 	.word	0x40023800
 8008060:	40020800 	.word	0x40020800
 8008064:	40011000 	.word	0x40011000
 8008068:	40020000 	.word	0x40020000
 800806c:	40004800 	.word	0x40004800
 8008070:	40020c00 	.word	0x40020c00
 8008074:	40011400 	.word	0x40011400

08008078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008078:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80080b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800807c:	f7ff fcec 	bl	8007a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008080:	480c      	ldr	r0, [pc, #48]	@ (80080b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008082:	490d      	ldr	r1, [pc, #52]	@ (80080b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008084:	4a0d      	ldr	r2, [pc, #52]	@ (80080bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008088:	e002      	b.n	8008090 <LoopCopyDataInit>

0800808a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800808a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800808c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800808e:	3304      	adds	r3, #4

08008090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008094:	d3f9      	bcc.n	800808a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008096:	4a0a      	ldr	r2, [pc, #40]	@ (80080c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008098:	4c0a      	ldr	r4, [pc, #40]	@ (80080c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800809a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800809c:	e001      	b.n	80080a2 <LoopFillZerobss>

0800809e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800809e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80080a0:	3204      	adds	r2, #4

080080a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80080a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80080a4:	d3fb      	bcc.n	800809e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80080a6:	f004 f84d 	bl	800c144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80080aa:	f7fa f863 	bl	8002174 <main>
  bx  lr    
 80080ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80080b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80080b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80080b8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80080bc:	0800ea18 	.word	0x0800ea18
  ldr r2, =_sbss
 80080c0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80080c4:	20016d98 	.word	0x20016d98

080080c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80080c8:	e7fe      	b.n	80080c8 <ADC_IRQHandler>
	...

080080cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80080d0:	4b0e      	ldr	r3, [pc, #56]	@ (800810c <HAL_Init+0x40>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a0d      	ldr	r2, [pc, #52]	@ (800810c <HAL_Init+0x40>)
 80080d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80080da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80080dc:	4b0b      	ldr	r3, [pc, #44]	@ (800810c <HAL_Init+0x40>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a0a      	ldr	r2, [pc, #40]	@ (800810c <HAL_Init+0x40>)
 80080e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80080e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80080e8:	4b08      	ldr	r3, [pc, #32]	@ (800810c <HAL_Init+0x40>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a07      	ldr	r2, [pc, #28]	@ (800810c <HAL_Init+0x40>)
 80080ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80080f4:	2003      	movs	r0, #3
 80080f6:	f000 fbb1 	bl	800885c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80080fa:	200f      	movs	r0, #15
 80080fc:	f000 f808 	bl	8008110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008100:	f7fd ff72 	bl	8005fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	40023c00 	.word	0x40023c00

08008110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008118:	4b12      	ldr	r3, [pc, #72]	@ (8008164 <HAL_InitTick+0x54>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	4b12      	ldr	r3, [pc, #72]	@ (8008168 <HAL_InitTick+0x58>)
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	4619      	mov	r1, r3
 8008122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008126:	fbb3 f3f1 	udiv	r3, r3, r1
 800812a:	fbb2 f3f3 	udiv	r3, r2, r3
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fbc9 	bl	80088c6 <HAL_SYSTICK_Config>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e00e      	b.n	800815c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b0f      	cmp	r3, #15
 8008142:	d80a      	bhi.n	800815a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008144:	2200      	movs	r2, #0
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	f04f 30ff 	mov.w	r0, #4294967295
 800814c:	f000 fb91 	bl	8008872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008150:	4a06      	ldr	r2, [pc, #24]	@ (800816c <HAL_InitTick+0x5c>)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	e000      	b.n	800815c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
}
 800815c:	4618      	mov	r0, r3
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	2000001c 	.word	0x2000001c
 8008168:	20000024 	.word	0x20000024
 800816c:	20000020 	.word	0x20000020

08008170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008174:	4b06      	ldr	r3, [pc, #24]	@ (8008190 <HAL_IncTick+0x20>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	461a      	mov	r2, r3
 800817a:	4b06      	ldr	r3, [pc, #24]	@ (8008194 <HAL_IncTick+0x24>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4413      	add	r3, r2
 8008180:	4a04      	ldr	r2, [pc, #16]	@ (8008194 <HAL_IncTick+0x24>)
 8008182:	6013      	str	r3, [r2, #0]
}
 8008184:	bf00      	nop
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	20000024 	.word	0x20000024
 8008194:	20016c48 	.word	0x20016c48

08008198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008198:	b480      	push	{r7}
 800819a:	af00      	add	r7, sp, #0
  return uwTick;
 800819c:	4b03      	ldr	r3, [pc, #12]	@ (80081ac <HAL_GetTick+0x14>)
 800819e:	681b      	ldr	r3, [r3, #0]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	20016c48 	.word	0x20016c48

080081b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80081b8:	f7ff ffee 	bl	8008198 <HAL_GetTick>
 80081bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c8:	d005      	beq.n	80081d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80081ca:	4b0a      	ldr	r3, [pc, #40]	@ (80081f4 <HAL_Delay+0x44>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	4413      	add	r3, r2
 80081d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80081d6:	bf00      	nop
 80081d8:	f7ff ffde 	bl	8008198 <HAL_GetTick>
 80081dc:	4602      	mov	r2, r0
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d8f7      	bhi.n	80081d8 <HAL_Delay+0x28>
  {
  }
}
 80081e8:	bf00      	nop
 80081ea:	bf00      	nop
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	20000024 	.word	0x20000024

080081f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e033      	b.n	8008276 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008212:	2b00      	cmp	r3, #0
 8008214:	d109      	bne.n	800822a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7f9 f818 	bl	800124c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800822e:	f003 0310 	and.w	r3, r3, #16
 8008232:	2b00      	cmp	r3, #0
 8008234:	d118      	bne.n	8008268 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800823a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800823e:	f023 0302 	bic.w	r3, r3, #2
 8008242:	f043 0202 	orr.w	r2, r3, #2
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f93a 	bl	80084c4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800825a:	f023 0303 	bic.w	r3, r3, #3
 800825e:	f043 0201 	orr.w	r2, r3, #1
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	641a      	str	r2, [r3, #64]	@ 0x40
 8008266:	e001      	b.n	800826c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008274:	7bfb      	ldrb	r3, [r7, #15]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008294:	2b01      	cmp	r3, #1
 8008296:	d101      	bne.n	800829c <HAL_ADC_ConfigChannel+0x1c>
 8008298:	2302      	movs	r3, #2
 800829a:	e105      	b.n	80084a8 <HAL_ADC_ConfigChannel+0x228>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b09      	cmp	r3, #9
 80082aa:	d925      	bls.n	80082f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68d9      	ldr	r1, [r3, #12]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	461a      	mov	r2, r3
 80082ba:	4613      	mov	r3, r2
 80082bc:	005b      	lsls	r3, r3, #1
 80082be:	4413      	add	r3, r2
 80082c0:	3b1e      	subs	r3, #30
 80082c2:	2207      	movs	r2, #7
 80082c4:	fa02 f303 	lsl.w	r3, r2, r3
 80082c8:	43da      	mvns	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	400a      	ands	r2, r1
 80082d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68d9      	ldr	r1, [r3, #12]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	689a      	ldr	r2, [r3, #8]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	4618      	mov	r0, r3
 80082e4:	4603      	mov	r3, r0
 80082e6:	005b      	lsls	r3, r3, #1
 80082e8:	4403      	add	r3, r0
 80082ea:	3b1e      	subs	r3, #30
 80082ec:	409a      	lsls	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	430a      	orrs	r2, r1
 80082f4:	60da      	str	r2, [r3, #12]
 80082f6:	e022      	b.n	800833e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6919      	ldr	r1, [r3, #16]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	b29b      	uxth	r3, r3
 8008304:	461a      	mov	r2, r3
 8008306:	4613      	mov	r3, r2
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	4413      	add	r3, r2
 800830c:	2207      	movs	r2, #7
 800830e:	fa02 f303 	lsl.w	r3, r2, r3
 8008312:	43da      	mvns	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	400a      	ands	r2, r1
 800831a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6919      	ldr	r1, [r3, #16]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	689a      	ldr	r2, [r3, #8]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	b29b      	uxth	r3, r3
 800832c:	4618      	mov	r0, r3
 800832e:	4603      	mov	r3, r0
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	4403      	add	r3, r0
 8008334:	409a      	lsls	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	2b06      	cmp	r3, #6
 8008344:	d824      	bhi.n	8008390 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	4613      	mov	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	3b05      	subs	r3, #5
 8008358:	221f      	movs	r2, #31
 800835a:	fa02 f303 	lsl.w	r3, r2, r3
 800835e:	43da      	mvns	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	400a      	ands	r2, r1
 8008366:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	b29b      	uxth	r3, r3
 8008374:	4618      	mov	r0, r3
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	4613      	mov	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	3b05      	subs	r3, #5
 8008382:	fa00 f203 	lsl.w	r2, r0, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	430a      	orrs	r2, r1
 800838c:	635a      	str	r2, [r3, #52]	@ 0x34
 800838e:	e04c      	b.n	800842a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	2b0c      	cmp	r3, #12
 8008396:	d824      	bhi.n	80083e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	4613      	mov	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	3b23      	subs	r3, #35	@ 0x23
 80083aa:	221f      	movs	r2, #31
 80083ac:	fa02 f303 	lsl.w	r3, r2, r3
 80083b0:	43da      	mvns	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	400a      	ands	r2, r1
 80083b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	4618      	mov	r0, r3
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	4613      	mov	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	3b23      	subs	r3, #35	@ 0x23
 80083d4:	fa00 f203 	lsl.w	r2, r0, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	631a      	str	r2, [r3, #48]	@ 0x30
 80083e0:	e023      	b.n	800842a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	4613      	mov	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	3b41      	subs	r3, #65	@ 0x41
 80083f4:	221f      	movs	r2, #31
 80083f6:	fa02 f303 	lsl.w	r3, r2, r3
 80083fa:	43da      	mvns	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	400a      	ands	r2, r1
 8008402:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	b29b      	uxth	r3, r3
 8008410:	4618      	mov	r0, r3
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	4613      	mov	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	3b41      	subs	r3, #65	@ 0x41
 800841e:	fa00 f203 	lsl.w	r2, r0, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800842a:	4b22      	ldr	r3, [pc, #136]	@ (80084b4 <HAL_ADC_ConfigChannel+0x234>)
 800842c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a21      	ldr	r2, [pc, #132]	@ (80084b8 <HAL_ADC_ConfigChannel+0x238>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d109      	bne.n	800844c <HAL_ADC_ConfigChannel+0x1cc>
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b12      	cmp	r3, #18
 800843e:	d105      	bne.n	800844c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a19      	ldr	r2, [pc, #100]	@ (80084b8 <HAL_ADC_ConfigChannel+0x238>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d123      	bne.n	800849e <HAL_ADC_ConfigChannel+0x21e>
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b10      	cmp	r3, #16
 800845c:	d003      	beq.n	8008466 <HAL_ADC_ConfigChannel+0x1e6>
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b11      	cmp	r3, #17
 8008464:	d11b      	bne.n	800849e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b10      	cmp	r3, #16
 8008478:	d111      	bne.n	800849e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800847a:	4b10      	ldr	r3, [pc, #64]	@ (80084bc <HAL_ADC_ConfigChannel+0x23c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a10      	ldr	r2, [pc, #64]	@ (80084c0 <HAL_ADC_ConfigChannel+0x240>)
 8008480:	fba2 2303 	umull	r2, r3, r2, r3
 8008484:	0c9a      	lsrs	r2, r3, #18
 8008486:	4613      	mov	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	005b      	lsls	r3, r3, #1
 800848e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008490:	e002      	b.n	8008498 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	3b01      	subs	r3, #1
 8008496:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1f9      	bne.n	8008492 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	40012300 	.word	0x40012300
 80084b8:	40012000 	.word	0x40012000
 80084bc:	2000001c 	.word	0x2000001c
 80084c0:	431bde83 	.word	0x431bde83

080084c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80084cc:	4b79      	ldr	r3, [pc, #484]	@ (80086b4 <ADC_Init+0x1f0>)
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	431a      	orrs	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	6859      	ldr	r1, [r3, #4]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	021a      	lsls	r2, r3, #8
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800851c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6859      	ldr	r1, [r3, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	430a      	orrs	r2, r1
 800852e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689a      	ldr	r2, [r3, #8]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800853e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6899      	ldr	r1, [r3, #8]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68da      	ldr	r2, [r3, #12]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008556:	4a58      	ldr	r2, [pc, #352]	@ (80086b8 <ADC_Init+0x1f4>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d022      	beq.n	80085a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	689a      	ldr	r2, [r3, #8]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800856a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6899      	ldr	r1, [r3, #8]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	430a      	orrs	r2, r1
 800857c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800858c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6899      	ldr	r1, [r3, #8]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	430a      	orrs	r2, r1
 800859e:	609a      	str	r2, [r3, #8]
 80085a0:	e00f      	b.n	80085c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	689a      	ldr	r2, [r3, #8]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80085b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	689a      	ldr	r2, [r3, #8]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80085c0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	689a      	ldr	r2, [r3, #8]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 0202 	bic.w	r2, r2, #2
 80085d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6899      	ldr	r1, [r3, #8]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	7e1b      	ldrb	r3, [r3, #24]
 80085dc:	005a      	lsls	r2, r3, #1
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	430a      	orrs	r2, r1
 80085e4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d01b      	beq.n	8008628 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085fe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685a      	ldr	r2, [r3, #4]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800860e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	6859      	ldr	r1, [r3, #4]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800861a:	3b01      	subs	r3, #1
 800861c:	035a      	lsls	r2, r3, #13
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	605a      	str	r2, [r3, #4]
 8008626:	e007      	b.n	8008638 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008636:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8008646:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	69db      	ldr	r3, [r3, #28]
 8008652:	3b01      	subs	r3, #1
 8008654:	051a      	lsls	r2, r3, #20
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800866c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	6899      	ldr	r1, [r3, #8]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800867a:	025a      	lsls	r2, r3, #9
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	430a      	orrs	r2, r1
 8008682:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689a      	ldr	r2, [r3, #8]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008692:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6899      	ldr	r1, [r3, #8]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	029a      	lsls	r2, r3, #10
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	430a      	orrs	r2, r1
 80086a6:	609a      	str	r2, [r3, #8]
}
 80086a8:	bf00      	nop
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	40012300 	.word	0x40012300
 80086b8:	0f000001 	.word	0x0f000001

080086bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80086cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008700 <__NVIC_SetPriorityGrouping+0x44>)
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80086d8:	4013      	ands	r3, r2
 80086da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80086e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80086e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80086ee:	4a04      	ldr	r2, [pc, #16]	@ (8008700 <__NVIC_SetPriorityGrouping+0x44>)
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	60d3      	str	r3, [r2, #12]
}
 80086f4:	bf00      	nop
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	e000ed00 	.word	0xe000ed00

08008704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008704:	b480      	push	{r7}
 8008706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008708:	4b04      	ldr	r3, [pc, #16]	@ (800871c <__NVIC_GetPriorityGrouping+0x18>)
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	0a1b      	lsrs	r3, r3, #8
 800870e:	f003 0307 	and.w	r3, r3, #7
}
 8008712:	4618      	mov	r0, r3
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	e000ed00 	.word	0xe000ed00

08008720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800872a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800872e:	2b00      	cmp	r3, #0
 8008730:	db0b      	blt.n	800874a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008732:	79fb      	ldrb	r3, [r7, #7]
 8008734:	f003 021f 	and.w	r2, r3, #31
 8008738:	4907      	ldr	r1, [pc, #28]	@ (8008758 <__NVIC_EnableIRQ+0x38>)
 800873a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800873e:	095b      	lsrs	r3, r3, #5
 8008740:	2001      	movs	r0, #1
 8008742:	fa00 f202 	lsl.w	r2, r0, r2
 8008746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800874a:	bf00      	nop
 800874c:	370c      	adds	r7, #12
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	e000e100 	.word	0xe000e100

0800875c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	6039      	str	r1, [r7, #0]
 8008766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800876c:	2b00      	cmp	r3, #0
 800876e:	db0a      	blt.n	8008786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	b2da      	uxtb	r2, r3
 8008774:	490c      	ldr	r1, [pc, #48]	@ (80087a8 <__NVIC_SetPriority+0x4c>)
 8008776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800877a:	0112      	lsls	r2, r2, #4
 800877c:	b2d2      	uxtb	r2, r2
 800877e:	440b      	add	r3, r1
 8008780:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008784:	e00a      	b.n	800879c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	b2da      	uxtb	r2, r3
 800878a:	4908      	ldr	r1, [pc, #32]	@ (80087ac <__NVIC_SetPriority+0x50>)
 800878c:	79fb      	ldrb	r3, [r7, #7]
 800878e:	f003 030f 	and.w	r3, r3, #15
 8008792:	3b04      	subs	r3, #4
 8008794:	0112      	lsls	r2, r2, #4
 8008796:	b2d2      	uxtb	r2, r2
 8008798:	440b      	add	r3, r1
 800879a:	761a      	strb	r2, [r3, #24]
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr
 80087a8:	e000e100 	.word	0xe000e100
 80087ac:	e000ed00 	.word	0xe000ed00

080087b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b089      	sub	sp, #36	@ 0x24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	f1c3 0307 	rsb	r3, r3, #7
 80087ca:	2b04      	cmp	r3, #4
 80087cc:	bf28      	it	cs
 80087ce:	2304      	movcs	r3, #4
 80087d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	3304      	adds	r3, #4
 80087d6:	2b06      	cmp	r3, #6
 80087d8:	d902      	bls.n	80087e0 <NVIC_EncodePriority+0x30>
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	3b03      	subs	r3, #3
 80087de:	e000      	b.n	80087e2 <NVIC_EncodePriority+0x32>
 80087e0:	2300      	movs	r3, #0
 80087e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087e4:	f04f 32ff 	mov.w	r2, #4294967295
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	fa02 f303 	lsl.w	r3, r2, r3
 80087ee:	43da      	mvns	r2, r3
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	401a      	ands	r2, r3
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80087f8:	f04f 31ff 	mov.w	r1, #4294967295
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008802:	43d9      	mvns	r1, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008808:	4313      	orrs	r3, r2
         );
}
 800880a:	4618      	mov	r0, r3
 800880c:	3724      	adds	r7, #36	@ 0x24
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
	...

08008818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3b01      	subs	r3, #1
 8008824:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008828:	d301      	bcc.n	800882e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800882a:	2301      	movs	r3, #1
 800882c:	e00f      	b.n	800884e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800882e:	4a0a      	ldr	r2, [pc, #40]	@ (8008858 <SysTick_Config+0x40>)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	3b01      	subs	r3, #1
 8008834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008836:	210f      	movs	r1, #15
 8008838:	f04f 30ff 	mov.w	r0, #4294967295
 800883c:	f7ff ff8e 	bl	800875c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008840:	4b05      	ldr	r3, [pc, #20]	@ (8008858 <SysTick_Config+0x40>)
 8008842:	2200      	movs	r2, #0
 8008844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008846:	4b04      	ldr	r3, [pc, #16]	@ (8008858 <SysTick_Config+0x40>)
 8008848:	2207      	movs	r2, #7
 800884a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	e000e010 	.word	0xe000e010

0800885c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7ff ff29 	bl	80086bc <__NVIC_SetPriorityGrouping>
}
 800886a:	bf00      	nop
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008872:	b580      	push	{r7, lr}
 8008874:	b086      	sub	sp, #24
 8008876:	af00      	add	r7, sp, #0
 8008878:	4603      	mov	r3, r0
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	607a      	str	r2, [r7, #4]
 800887e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008880:	2300      	movs	r3, #0
 8008882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008884:	f7ff ff3e 	bl	8008704 <__NVIC_GetPriorityGrouping>
 8008888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	68b9      	ldr	r1, [r7, #8]
 800888e:	6978      	ldr	r0, [r7, #20]
 8008890:	f7ff ff8e 	bl	80087b0 <NVIC_EncodePriority>
 8008894:	4602      	mov	r2, r0
 8008896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800889a:	4611      	mov	r1, r2
 800889c:	4618      	mov	r0, r3
 800889e:	f7ff ff5d 	bl	800875c <__NVIC_SetPriority>
}
 80088a2:	bf00      	nop
 80088a4:	3718      	adds	r7, #24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b082      	sub	sp, #8
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	4603      	mov	r3, r0
 80088b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80088b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7ff ff31 	bl	8008720 <__NVIC_EnableIRQ>
}
 80088be:	bf00      	nop
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b082      	sub	sp, #8
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff ffa2 	bl	8008818 <SysTick_Config>
 80088d4:	4603      	mov	r3, r0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b084      	sub	sp, #16
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088ea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80088ec:	f7ff fc54 	bl	8008198 <HAL_GetTick>
 80088f0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d008      	beq.n	8008910 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2280      	movs	r2, #128	@ 0x80
 8008902:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e052      	b.n	80089b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 0216 	bic.w	r2, r2, #22
 800891e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	695a      	ldr	r2, [r3, #20]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800892e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008934:	2b00      	cmp	r3, #0
 8008936:	d103      	bne.n	8008940 <HAL_DMA_Abort+0x62>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800893c:	2b00      	cmp	r3, #0
 800893e:	d007      	beq.n	8008950 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f022 0208 	bic.w	r2, r2, #8
 800894e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0201 	bic.w	r2, r2, #1
 800895e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008960:	e013      	b.n	800898a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008962:	f7ff fc19 	bl	8008198 <HAL_GetTick>
 8008966:	4602      	mov	r2, r0
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	2b05      	cmp	r3, #5
 800896e:	d90c      	bls.n	800898a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2220      	movs	r2, #32
 8008974:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2203      	movs	r2, #3
 800897a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e015      	b.n	80089b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 0301 	and.w	r3, r3, #1
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1e4      	bne.n	8008962 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800899c:	223f      	movs	r2, #63	@ 0x3f
 800899e:	409a      	lsls	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80089be:	b480      	push	{r7}
 80089c0:	b083      	sub	sp, #12
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d004      	beq.n	80089dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2280      	movs	r2, #128	@ 0x80
 80089d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e00c      	b.n	80089f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2205      	movs	r2, #5
 80089e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f022 0201 	bic.w	r2, r2, #1
 80089f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
	...

08008a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b089      	sub	sp, #36	@ 0x24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008a16:	2300      	movs	r3, #0
 8008a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	61fb      	str	r3, [r7, #28]
 8008a1e:	e16b      	b.n	8008cf8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008a20:	2201      	movs	r2, #1
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	fa02 f303 	lsl.w	r3, r2, r3
 8008a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	4013      	ands	r3, r2
 8008a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	f040 815a 	bne.w	8008cf2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	f003 0303 	and.w	r3, r3, #3
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d005      	beq.n	8008a56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d130      	bne.n	8008ab8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	005b      	lsls	r3, r3, #1
 8008a60:	2203      	movs	r2, #3
 8008a62:	fa02 f303 	lsl.w	r3, r2, r3
 8008a66:	43db      	mvns	r3, r3
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	68da      	ldr	r2, [r3, #12]
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	fa02 f303 	lsl.w	r3, r2, r3
 8008a94:	43db      	mvns	r3, r3
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	4013      	ands	r3, r2
 8008a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	091b      	lsrs	r3, r3, #4
 8008aa2:	f003 0201 	and.w	r2, r3, #1
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	69ba      	ldr	r2, [r7, #24]
 8008ab6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	f003 0303 	and.w	r3, r3, #3
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	d017      	beq.n	8008af4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	005b      	lsls	r3, r3, #1
 8008ace:	2203      	movs	r2, #3
 8008ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad4:	43db      	mvns	r3, r3
 8008ad6:	69ba      	ldr	r2, [r7, #24]
 8008ad8:	4013      	ands	r3, r2
 8008ada:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	689a      	ldr	r2, [r3, #8]
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	005b      	lsls	r3, r3, #1
 8008ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae8:	69ba      	ldr	r2, [r7, #24]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f003 0303 	and.w	r3, r3, #3
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d123      	bne.n	8008b48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	08da      	lsrs	r2, r3, #3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	3208      	adds	r2, #8
 8008b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	f003 0307 	and.w	r3, r3, #7
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	220f      	movs	r2, #15
 8008b18:	fa02 f303 	lsl.w	r3, r2, r3
 8008b1c:	43db      	mvns	r3, r3
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	4013      	ands	r3, r2
 8008b22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	691a      	ldr	r2, [r3, #16]
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	f003 0307 	and.w	r3, r3, #7
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	fa02 f303 	lsl.w	r3, r2, r3
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	08da      	lsrs	r2, r3, #3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	3208      	adds	r2, #8
 8008b42:	69b9      	ldr	r1, [r7, #24]
 8008b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	005b      	lsls	r3, r3, #1
 8008b52:	2203      	movs	r2, #3
 8008b54:	fa02 f303 	lsl.w	r3, r2, r3
 8008b58:	43db      	mvns	r3, r3
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	f003 0203 	and.w	r2, r3, #3
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b70:	69ba      	ldr	r2, [r7, #24]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	69ba      	ldr	r2, [r7, #24]
 8008b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 80b4 	beq.w	8008cf2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	4b60      	ldr	r3, [pc, #384]	@ (8008d10 <HAL_GPIO_Init+0x30c>)
 8008b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b92:	4a5f      	ldr	r2, [pc, #380]	@ (8008d10 <HAL_GPIO_Init+0x30c>)
 8008b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8008b9a:	4b5d      	ldr	r3, [pc, #372]	@ (8008d10 <HAL_GPIO_Init+0x30c>)
 8008b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008ba6:	4a5b      	ldr	r2, [pc, #364]	@ (8008d14 <HAL_GPIO_Init+0x310>)
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	089b      	lsrs	r3, r3, #2
 8008bac:	3302      	adds	r3, #2
 8008bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	f003 0303 	and.w	r3, r3, #3
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	220f      	movs	r2, #15
 8008bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc2:	43db      	mvns	r3, r3
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a52      	ldr	r2, [pc, #328]	@ (8008d18 <HAL_GPIO_Init+0x314>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d02b      	beq.n	8008c2a <HAL_GPIO_Init+0x226>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a51      	ldr	r2, [pc, #324]	@ (8008d1c <HAL_GPIO_Init+0x318>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d025      	beq.n	8008c26 <HAL_GPIO_Init+0x222>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a50      	ldr	r2, [pc, #320]	@ (8008d20 <HAL_GPIO_Init+0x31c>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d01f      	beq.n	8008c22 <HAL_GPIO_Init+0x21e>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a4f      	ldr	r2, [pc, #316]	@ (8008d24 <HAL_GPIO_Init+0x320>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d019      	beq.n	8008c1e <HAL_GPIO_Init+0x21a>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a4e      	ldr	r2, [pc, #312]	@ (8008d28 <HAL_GPIO_Init+0x324>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d013      	beq.n	8008c1a <HAL_GPIO_Init+0x216>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a4d      	ldr	r2, [pc, #308]	@ (8008d2c <HAL_GPIO_Init+0x328>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d00d      	beq.n	8008c16 <HAL_GPIO_Init+0x212>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a4c      	ldr	r2, [pc, #304]	@ (8008d30 <HAL_GPIO_Init+0x32c>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d007      	beq.n	8008c12 <HAL_GPIO_Init+0x20e>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a4b      	ldr	r2, [pc, #300]	@ (8008d34 <HAL_GPIO_Init+0x330>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d101      	bne.n	8008c0e <HAL_GPIO_Init+0x20a>
 8008c0a:	2307      	movs	r3, #7
 8008c0c:	e00e      	b.n	8008c2c <HAL_GPIO_Init+0x228>
 8008c0e:	2308      	movs	r3, #8
 8008c10:	e00c      	b.n	8008c2c <HAL_GPIO_Init+0x228>
 8008c12:	2306      	movs	r3, #6
 8008c14:	e00a      	b.n	8008c2c <HAL_GPIO_Init+0x228>
 8008c16:	2305      	movs	r3, #5
 8008c18:	e008      	b.n	8008c2c <HAL_GPIO_Init+0x228>
 8008c1a:	2304      	movs	r3, #4
 8008c1c:	e006      	b.n	8008c2c <HAL_GPIO_Init+0x228>
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e004      	b.n	8008c2c <HAL_GPIO_Init+0x228>
 8008c22:	2302      	movs	r3, #2
 8008c24:	e002      	b.n	8008c2c <HAL_GPIO_Init+0x228>
 8008c26:	2301      	movs	r3, #1
 8008c28:	e000      	b.n	8008c2c <HAL_GPIO_Init+0x228>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	69fa      	ldr	r2, [r7, #28]
 8008c2e:	f002 0203 	and.w	r2, r2, #3
 8008c32:	0092      	lsls	r2, r2, #2
 8008c34:	4093      	lsls	r3, r2
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c3c:	4935      	ldr	r1, [pc, #212]	@ (8008d14 <HAL_GPIO_Init+0x310>)
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	089b      	lsrs	r3, r3, #2
 8008c42:	3302      	adds	r3, #2
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8008d38 <HAL_GPIO_Init+0x334>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	43db      	mvns	r3, r3
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	4013      	ands	r3, r2
 8008c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d003      	beq.n	8008c6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008c66:	69ba      	ldr	r2, [r7, #24]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008c6e:	4a32      	ldr	r2, [pc, #200]	@ (8008d38 <HAL_GPIO_Init+0x334>)
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008c74:	4b30      	ldr	r3, [pc, #192]	@ (8008d38 <HAL_GPIO_Init+0x334>)
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	43db      	mvns	r3, r3
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	4013      	ands	r3, r2
 8008c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008c98:	4a27      	ldr	r2, [pc, #156]	@ (8008d38 <HAL_GPIO_Init+0x334>)
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008c9e:	4b26      	ldr	r3, [pc, #152]	@ (8008d38 <HAL_GPIO_Init+0x334>)
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	43db      	mvns	r3, r3
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	4013      	ands	r3, r2
 8008cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d003      	beq.n	8008cc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008cba:	69ba      	ldr	r2, [r7, #24]
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8008d38 <HAL_GPIO_Init+0x334>)
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8008d38 <HAL_GPIO_Init+0x334>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	43db      	mvns	r3, r3
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d003      	beq.n	8008cec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008cec:	4a12      	ldr	r2, [pc, #72]	@ (8008d38 <HAL_GPIO_Init+0x334>)
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	61fb      	str	r3, [r7, #28]
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	2b0f      	cmp	r3, #15
 8008cfc:	f67f ae90 	bls.w	8008a20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008d00:	bf00      	nop
 8008d02:	bf00      	nop
 8008d04:	3724      	adds	r7, #36	@ 0x24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	40023800 	.word	0x40023800
 8008d14:	40013800 	.word	0x40013800
 8008d18:	40020000 	.word	0x40020000
 8008d1c:	40020400 	.word	0x40020400
 8008d20:	40020800 	.word	0x40020800
 8008d24:	40020c00 	.word	0x40020c00
 8008d28:	40021000 	.word	0x40021000
 8008d2c:	40021400 	.word	0x40021400
 8008d30:	40021800 	.word	0x40021800
 8008d34:	40021c00 	.word	0x40021c00
 8008d38:	40013c00 	.word	0x40013c00

08008d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	691a      	ldr	r2, [r3, #16]
 8008d4c:	887b      	ldrh	r3, [r7, #2]
 8008d4e:	4013      	ands	r3, r2
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d002      	beq.n	8008d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008d54:	2301      	movs	r3, #1
 8008d56:	73fb      	strb	r3, [r7, #15]
 8008d58:	e001      	b.n	8008d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	807b      	strh	r3, [r7, #2]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008d7c:	787b      	ldrb	r3, [r7, #1]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d82:	887a      	ldrh	r2, [r7, #2]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008d88:	e003      	b.n	8008d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008d8a:	887b      	ldrh	r3, [r7, #2]
 8008d8c:	041a      	lsls	r2, r3, #16
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	619a      	str	r2, [r3, #24]
}
 8008d92:	bf00      	nop
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b085      	sub	sp, #20
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	460b      	mov	r3, r1
 8008da8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008db0:	887a      	ldrh	r2, [r7, #2]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	4013      	ands	r3, r2
 8008db6:	041a      	lsls	r2, r3, #16
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	43d9      	mvns	r1, r3
 8008dbc:	887b      	ldrh	r3, [r7, #2]
 8008dbe:	400b      	ands	r3, r1
 8008dc0:	431a      	orrs	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	619a      	str	r2, [r3, #24]
}
 8008dc6:	bf00      	nop
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
	...

08008dd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e12b      	b.n	800903e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d106      	bne.n	8008e00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7f9 f950 	bl	80020a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2224      	movs	r2, #36	@ 0x24
 8008e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f022 0201 	bic.w	r2, r2, #1
 8008e16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008e36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008e38:	f000 fd80 	bl	800993c <HAL_RCC_GetPCLK1Freq>
 8008e3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	4a81      	ldr	r2, [pc, #516]	@ (8009048 <HAL_I2C_Init+0x274>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d807      	bhi.n	8008e58 <HAL_I2C_Init+0x84>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4a80      	ldr	r2, [pc, #512]	@ (800904c <HAL_I2C_Init+0x278>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	bf94      	ite	ls
 8008e50:	2301      	movls	r3, #1
 8008e52:	2300      	movhi	r3, #0
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	e006      	b.n	8008e66 <HAL_I2C_Init+0x92>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4a7d      	ldr	r2, [pc, #500]	@ (8009050 <HAL_I2C_Init+0x27c>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	bf94      	ite	ls
 8008e60:	2301      	movls	r3, #1
 8008e62:	2300      	movhi	r3, #0
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e0e7      	b.n	800903e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	4a78      	ldr	r2, [pc, #480]	@ (8009054 <HAL_I2C_Init+0x280>)
 8008e72:	fba2 2303 	umull	r2, r3, r2, r3
 8008e76:	0c9b      	lsrs	r3, r3, #18
 8008e78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	4a6a      	ldr	r2, [pc, #424]	@ (8009048 <HAL_I2C_Init+0x274>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d802      	bhi.n	8008ea8 <HAL_I2C_Init+0xd4>
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	e009      	b.n	8008ebc <HAL_I2C_Init+0xe8>
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008eae:	fb02 f303 	mul.w	r3, r2, r3
 8008eb2:	4a69      	ldr	r2, [pc, #420]	@ (8009058 <HAL_I2C_Init+0x284>)
 8008eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb8:	099b      	lsrs	r3, r3, #6
 8008eba:	3301      	adds	r3, #1
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	6812      	ldr	r2, [r2, #0]
 8008ec0:	430b      	orrs	r3, r1
 8008ec2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008ece:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	495c      	ldr	r1, [pc, #368]	@ (8009048 <HAL_I2C_Init+0x274>)
 8008ed8:	428b      	cmp	r3, r1
 8008eda:	d819      	bhi.n	8008f10 <HAL_I2C_Init+0x13c>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	1e59      	subs	r1, r3, #1
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	005b      	lsls	r3, r3, #1
 8008ee6:	fbb1 f3f3 	udiv	r3, r1, r3
 8008eea:	1c59      	adds	r1, r3, #1
 8008eec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008ef0:	400b      	ands	r3, r1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00a      	beq.n	8008f0c <HAL_I2C_Init+0x138>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	1e59      	subs	r1, r3, #1
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	005b      	lsls	r3, r3, #1
 8008f00:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f04:	3301      	adds	r3, #1
 8008f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f0a:	e051      	b.n	8008fb0 <HAL_I2C_Init+0x1dc>
 8008f0c:	2304      	movs	r3, #4
 8008f0e:	e04f      	b.n	8008fb0 <HAL_I2C_Init+0x1dc>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d111      	bne.n	8008f3c <HAL_I2C_Init+0x168>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	1e58      	subs	r0, r3, #1
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6859      	ldr	r1, [r3, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	440b      	add	r3, r1
 8008f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	bf0c      	ite	eq
 8008f34:	2301      	moveq	r3, #1
 8008f36:	2300      	movne	r3, #0
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	e012      	b.n	8008f62 <HAL_I2C_Init+0x18e>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	1e58      	subs	r0, r3, #1
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6859      	ldr	r1, [r3, #4]
 8008f44:	460b      	mov	r3, r1
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	440b      	add	r3, r1
 8008f4a:	0099      	lsls	r1, r3, #2
 8008f4c:	440b      	add	r3, r1
 8008f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f52:	3301      	adds	r3, #1
 8008f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	bf0c      	ite	eq
 8008f5c:	2301      	moveq	r3, #1
 8008f5e:	2300      	movne	r3, #0
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <HAL_I2C_Init+0x196>
 8008f66:	2301      	movs	r3, #1
 8008f68:	e022      	b.n	8008fb0 <HAL_I2C_Init+0x1dc>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10e      	bne.n	8008f90 <HAL_I2C_Init+0x1bc>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	1e58      	subs	r0, r3, #1
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6859      	ldr	r1, [r3, #4]
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	005b      	lsls	r3, r3, #1
 8008f7e:	440b      	add	r3, r1
 8008f80:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f84:	3301      	adds	r3, #1
 8008f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f8e:	e00f      	b.n	8008fb0 <HAL_I2C_Init+0x1dc>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	1e58      	subs	r0, r3, #1
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6859      	ldr	r1, [r3, #4]
 8008f98:	460b      	mov	r3, r1
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	440b      	add	r3, r1
 8008f9e:	0099      	lsls	r1, r3, #2
 8008fa0:	440b      	add	r3, r1
 8008fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	6809      	ldr	r1, [r1, #0]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	69da      	ldr	r2, [r3, #28]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	431a      	orrs	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008fde:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	6911      	ldr	r1, [r2, #16]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	68d2      	ldr	r2, [r2, #12]
 8008fea:	4311      	orrs	r1, r2
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	6812      	ldr	r2, [r2, #0]
 8008ff0:	430b      	orrs	r3, r1
 8008ff2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	695a      	ldr	r2, [r3, #20]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	699b      	ldr	r3, [r3, #24]
 8009006:	431a      	orrs	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	430a      	orrs	r2, r1
 800900e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f042 0201 	orr.w	r2, r2, #1
 800901e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2220      	movs	r2, #32
 800902a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	000186a0 	.word	0x000186a0
 800904c:	001e847f 	.word	0x001e847f
 8009050:	003d08ff 	.word	0x003d08ff
 8009054:	431bde83 	.word	0x431bde83
 8009058:	10624dd3 	.word	0x10624dd3

0800905c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e267      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	d075      	beq.n	8009166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800907a:	4b88      	ldr	r3, [pc, #544]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	f003 030c 	and.w	r3, r3, #12
 8009082:	2b04      	cmp	r3, #4
 8009084:	d00c      	beq.n	80090a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009086:	4b85      	ldr	r3, [pc, #532]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800908e:	2b08      	cmp	r3, #8
 8009090:	d112      	bne.n	80090b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009092:	4b82      	ldr	r3, [pc, #520]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800909a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800909e:	d10b      	bne.n	80090b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090a0:	4b7e      	ldr	r3, [pc, #504]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d05b      	beq.n	8009164 <HAL_RCC_OscConfig+0x108>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d157      	bne.n	8009164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e242      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090c0:	d106      	bne.n	80090d0 <HAL_RCC_OscConfig+0x74>
 80090c2:	4b76      	ldr	r3, [pc, #472]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a75      	ldr	r2, [pc, #468]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80090c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	e01d      	b.n	800910c <HAL_RCC_OscConfig+0xb0>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090d8:	d10c      	bne.n	80090f4 <HAL_RCC_OscConfig+0x98>
 80090da:	4b70      	ldr	r3, [pc, #448]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a6f      	ldr	r2, [pc, #444]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80090e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090e4:	6013      	str	r3, [r2, #0]
 80090e6:	4b6d      	ldr	r3, [pc, #436]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a6c      	ldr	r2, [pc, #432]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80090ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090f0:	6013      	str	r3, [r2, #0]
 80090f2:	e00b      	b.n	800910c <HAL_RCC_OscConfig+0xb0>
 80090f4:	4b69      	ldr	r3, [pc, #420]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a68      	ldr	r2, [pc, #416]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80090fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	4b66      	ldr	r3, [pc, #408]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a65      	ldr	r2, [pc, #404]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800910a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d013      	beq.n	800913c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009114:	f7ff f840 	bl	8008198 <HAL_GetTick>
 8009118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800911a:	e008      	b.n	800912e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800911c:	f7ff f83c 	bl	8008198 <HAL_GetTick>
 8009120:	4602      	mov	r2, r0
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	2b64      	cmp	r3, #100	@ 0x64
 8009128:	d901      	bls.n	800912e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e207      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800912e:	4b5b      	ldr	r3, [pc, #364]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0f0      	beq.n	800911c <HAL_RCC_OscConfig+0xc0>
 800913a:	e014      	b.n	8009166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800913c:	f7ff f82c 	bl	8008198 <HAL_GetTick>
 8009140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009142:	e008      	b.n	8009156 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009144:	f7ff f828 	bl	8008198 <HAL_GetTick>
 8009148:	4602      	mov	r2, r0
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	2b64      	cmp	r3, #100	@ 0x64
 8009150:	d901      	bls.n	8009156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e1f3      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009156:	4b51      	ldr	r3, [pc, #324]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1f0      	bne.n	8009144 <HAL_RCC_OscConfig+0xe8>
 8009162:	e000      	b.n	8009166 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 0302 	and.w	r3, r3, #2
 800916e:	2b00      	cmp	r3, #0
 8009170:	d063      	beq.n	800923a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009172:	4b4a      	ldr	r3, [pc, #296]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f003 030c 	and.w	r3, r3, #12
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00b      	beq.n	8009196 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800917e:	4b47      	ldr	r3, [pc, #284]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009186:	2b08      	cmp	r3, #8
 8009188:	d11c      	bne.n	80091c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800918a:	4b44      	ldr	r3, [pc, #272]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d116      	bne.n	80091c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009196:	4b41      	ldr	r3, [pc, #260]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0302 	and.w	r3, r3, #2
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d005      	beq.n	80091ae <HAL_RCC_OscConfig+0x152>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d001      	beq.n	80091ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e1c7      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091ae:	4b3b      	ldr	r3, [pc, #236]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	00db      	lsls	r3, r3, #3
 80091bc:	4937      	ldr	r1, [pc, #220]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80091c2:	e03a      	b.n	800923a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d020      	beq.n	800920e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80091cc:	4b34      	ldr	r3, [pc, #208]	@ (80092a0 <HAL_RCC_OscConfig+0x244>)
 80091ce:	2201      	movs	r2, #1
 80091d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d2:	f7fe ffe1 	bl	8008198 <HAL_GetTick>
 80091d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091d8:	e008      	b.n	80091ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091da:	f7fe ffdd 	bl	8008198 <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d901      	bls.n	80091ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e1a8      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091ec:	4b2b      	ldr	r3, [pc, #172]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 0302 	and.w	r3, r3, #2
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d0f0      	beq.n	80091da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091f8:	4b28      	ldr	r3, [pc, #160]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	00db      	lsls	r3, r3, #3
 8009206:	4925      	ldr	r1, [pc, #148]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009208:	4313      	orrs	r3, r2
 800920a:	600b      	str	r3, [r1, #0]
 800920c:	e015      	b.n	800923a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800920e:	4b24      	ldr	r3, [pc, #144]	@ (80092a0 <HAL_RCC_OscConfig+0x244>)
 8009210:	2200      	movs	r2, #0
 8009212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009214:	f7fe ffc0 	bl	8008198 <HAL_GetTick>
 8009218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800921a:	e008      	b.n	800922e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800921c:	f7fe ffbc 	bl	8008198 <HAL_GetTick>
 8009220:	4602      	mov	r2, r0
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	2b02      	cmp	r3, #2
 8009228:	d901      	bls.n	800922e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e187      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800922e:	4b1b      	ldr	r3, [pc, #108]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 0302 	and.w	r3, r3, #2
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1f0      	bne.n	800921c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0308 	and.w	r3, r3, #8
 8009242:	2b00      	cmp	r3, #0
 8009244:	d036      	beq.n	80092b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d016      	beq.n	800927c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800924e:	4b15      	ldr	r3, [pc, #84]	@ (80092a4 <HAL_RCC_OscConfig+0x248>)
 8009250:	2201      	movs	r2, #1
 8009252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009254:	f7fe ffa0 	bl	8008198 <HAL_GetTick>
 8009258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800925a:	e008      	b.n	800926e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800925c:	f7fe ff9c 	bl	8008198 <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	2b02      	cmp	r3, #2
 8009268:	d901      	bls.n	800926e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e167      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800926e:	4b0b      	ldr	r3, [pc, #44]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009272:	f003 0302 	and.w	r3, r3, #2
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0f0      	beq.n	800925c <HAL_RCC_OscConfig+0x200>
 800927a:	e01b      	b.n	80092b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800927c:	4b09      	ldr	r3, [pc, #36]	@ (80092a4 <HAL_RCC_OscConfig+0x248>)
 800927e:	2200      	movs	r2, #0
 8009280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009282:	f7fe ff89 	bl	8008198 <HAL_GetTick>
 8009286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009288:	e00e      	b.n	80092a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800928a:	f7fe ff85 	bl	8008198 <HAL_GetTick>
 800928e:	4602      	mov	r2, r0
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	2b02      	cmp	r3, #2
 8009296:	d907      	bls.n	80092a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009298:	2303      	movs	r3, #3
 800929a:	e150      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
 800929c:	40023800 	.word	0x40023800
 80092a0:	42470000 	.word	0x42470000
 80092a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80092a8:	4b88      	ldr	r3, [pc, #544]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80092aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092ac:	f003 0302 	and.w	r3, r3, #2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1ea      	bne.n	800928a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 8097 	beq.w	80093f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092c2:	2300      	movs	r3, #0
 80092c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092c6:	4b81      	ldr	r3, [pc, #516]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80092c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10f      	bne.n	80092f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092d2:	2300      	movs	r3, #0
 80092d4:	60bb      	str	r3, [r7, #8]
 80092d6:	4b7d      	ldr	r3, [pc, #500]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80092d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092da:	4a7c      	ldr	r2, [pc, #496]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80092dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80092e2:	4b7a      	ldr	r3, [pc, #488]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80092e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092ea:	60bb      	str	r3, [r7, #8]
 80092ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092ee:	2301      	movs	r3, #1
 80092f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092f2:	4b77      	ldr	r3, [pc, #476]	@ (80094d0 <HAL_RCC_OscConfig+0x474>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d118      	bne.n	8009330 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80092fe:	4b74      	ldr	r3, [pc, #464]	@ (80094d0 <HAL_RCC_OscConfig+0x474>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a73      	ldr	r2, [pc, #460]	@ (80094d0 <HAL_RCC_OscConfig+0x474>)
 8009304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800930a:	f7fe ff45 	bl	8008198 <HAL_GetTick>
 800930e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009310:	e008      	b.n	8009324 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009312:	f7fe ff41 	bl	8008198 <HAL_GetTick>
 8009316:	4602      	mov	r2, r0
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	2b02      	cmp	r3, #2
 800931e:	d901      	bls.n	8009324 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009320:	2303      	movs	r3, #3
 8009322:	e10c      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009324:	4b6a      	ldr	r3, [pc, #424]	@ (80094d0 <HAL_RCC_OscConfig+0x474>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800932c:	2b00      	cmp	r3, #0
 800932e:	d0f0      	beq.n	8009312 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d106      	bne.n	8009346 <HAL_RCC_OscConfig+0x2ea>
 8009338:	4b64      	ldr	r3, [pc, #400]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 800933a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800933c:	4a63      	ldr	r2, [pc, #396]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 800933e:	f043 0301 	orr.w	r3, r3, #1
 8009342:	6713      	str	r3, [r2, #112]	@ 0x70
 8009344:	e01c      	b.n	8009380 <HAL_RCC_OscConfig+0x324>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	2b05      	cmp	r3, #5
 800934c:	d10c      	bne.n	8009368 <HAL_RCC_OscConfig+0x30c>
 800934e:	4b5f      	ldr	r3, [pc, #380]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 8009350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009352:	4a5e      	ldr	r2, [pc, #376]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 8009354:	f043 0304 	orr.w	r3, r3, #4
 8009358:	6713      	str	r3, [r2, #112]	@ 0x70
 800935a:	4b5c      	ldr	r3, [pc, #368]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 800935c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800935e:	4a5b      	ldr	r2, [pc, #364]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 8009360:	f043 0301 	orr.w	r3, r3, #1
 8009364:	6713      	str	r3, [r2, #112]	@ 0x70
 8009366:	e00b      	b.n	8009380 <HAL_RCC_OscConfig+0x324>
 8009368:	4b58      	ldr	r3, [pc, #352]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 800936a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800936c:	4a57      	ldr	r2, [pc, #348]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 800936e:	f023 0301 	bic.w	r3, r3, #1
 8009372:	6713      	str	r3, [r2, #112]	@ 0x70
 8009374:	4b55      	ldr	r3, [pc, #340]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 8009376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009378:	4a54      	ldr	r2, [pc, #336]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 800937a:	f023 0304 	bic.w	r3, r3, #4
 800937e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d015      	beq.n	80093b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009388:	f7fe ff06 	bl	8008198 <HAL_GetTick>
 800938c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800938e:	e00a      	b.n	80093a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009390:	f7fe ff02 	bl	8008198 <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800939e:	4293      	cmp	r3, r2
 80093a0:	d901      	bls.n	80093a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e0cb      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093a6:	4b49      	ldr	r3, [pc, #292]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80093a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093aa:	f003 0302 	and.w	r3, r3, #2
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d0ee      	beq.n	8009390 <HAL_RCC_OscConfig+0x334>
 80093b2:	e014      	b.n	80093de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093b4:	f7fe fef0 	bl	8008198 <HAL_GetTick>
 80093b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093ba:	e00a      	b.n	80093d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093bc:	f7fe feec 	bl	8008198 <HAL_GetTick>
 80093c0:	4602      	mov	r2, r0
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d901      	bls.n	80093d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e0b5      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093d2:	4b3e      	ldr	r3, [pc, #248]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80093d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093d6:	f003 0302 	and.w	r3, r3, #2
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1ee      	bne.n	80093bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80093de:	7dfb      	ldrb	r3, [r7, #23]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d105      	bne.n	80093f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093e4:	4b39      	ldr	r3, [pc, #228]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80093e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093e8:	4a38      	ldr	r2, [pc, #224]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80093ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 80a1 	beq.w	800953c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80093fa:	4b34      	ldr	r3, [pc, #208]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	f003 030c 	and.w	r3, r3, #12
 8009402:	2b08      	cmp	r3, #8
 8009404:	d05c      	beq.n	80094c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	2b02      	cmp	r3, #2
 800940c:	d141      	bne.n	8009492 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800940e:	4b31      	ldr	r3, [pc, #196]	@ (80094d4 <HAL_RCC_OscConfig+0x478>)
 8009410:	2200      	movs	r2, #0
 8009412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009414:	f7fe fec0 	bl	8008198 <HAL_GetTick>
 8009418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800941a:	e008      	b.n	800942e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800941c:	f7fe febc 	bl	8008198 <HAL_GetTick>
 8009420:	4602      	mov	r2, r0
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	2b02      	cmp	r3, #2
 8009428:	d901      	bls.n	800942e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800942a:	2303      	movs	r3, #3
 800942c:	e087      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800942e:	4b27      	ldr	r3, [pc, #156]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1f0      	bne.n	800941c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	69da      	ldr	r2, [r3, #28]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a1b      	ldr	r3, [r3, #32]
 8009442:	431a      	orrs	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009448:	019b      	lsls	r3, r3, #6
 800944a:	431a      	orrs	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009450:	085b      	lsrs	r3, r3, #1
 8009452:	3b01      	subs	r3, #1
 8009454:	041b      	lsls	r3, r3, #16
 8009456:	431a      	orrs	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945c:	061b      	lsls	r3, r3, #24
 800945e:	491b      	ldr	r1, [pc, #108]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 8009460:	4313      	orrs	r3, r2
 8009462:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009464:	4b1b      	ldr	r3, [pc, #108]	@ (80094d4 <HAL_RCC_OscConfig+0x478>)
 8009466:	2201      	movs	r2, #1
 8009468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800946a:	f7fe fe95 	bl	8008198 <HAL_GetTick>
 800946e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009470:	e008      	b.n	8009484 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009472:	f7fe fe91 	bl	8008198 <HAL_GetTick>
 8009476:	4602      	mov	r2, r0
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	2b02      	cmp	r3, #2
 800947e:	d901      	bls.n	8009484 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	e05c      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009484:	4b11      	ldr	r3, [pc, #68]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d0f0      	beq.n	8009472 <HAL_RCC_OscConfig+0x416>
 8009490:	e054      	b.n	800953c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009492:	4b10      	ldr	r3, [pc, #64]	@ (80094d4 <HAL_RCC_OscConfig+0x478>)
 8009494:	2200      	movs	r2, #0
 8009496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009498:	f7fe fe7e 	bl	8008198 <HAL_GetTick>
 800949c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800949e:	e008      	b.n	80094b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094a0:	f7fe fe7a 	bl	8008198 <HAL_GetTick>
 80094a4:	4602      	mov	r2, r0
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d901      	bls.n	80094b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80094ae:	2303      	movs	r3, #3
 80094b0:	e045      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094b2:	4b06      	ldr	r3, [pc, #24]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1f0      	bne.n	80094a0 <HAL_RCC_OscConfig+0x444>
 80094be:	e03d      	b.n	800953c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d107      	bne.n	80094d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e038      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
 80094cc:	40023800 	.word	0x40023800
 80094d0:	40007000 	.word	0x40007000
 80094d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80094d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009548 <HAL_RCC_OscConfig+0x4ec>)
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d028      	beq.n	8009538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d121      	bne.n	8009538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094fe:	429a      	cmp	r2, r3
 8009500:	d11a      	bne.n	8009538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009508:	4013      	ands	r3, r2
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800950e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009510:	4293      	cmp	r3, r2
 8009512:	d111      	bne.n	8009538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800951e:	085b      	lsrs	r3, r3, #1
 8009520:	3b01      	subs	r3, #1
 8009522:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009524:	429a      	cmp	r2, r3
 8009526:	d107      	bne.n	8009538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009532:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009534:	429a      	cmp	r2, r3
 8009536:	d001      	beq.n	800953c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e000      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	40023800 	.word	0x40023800

0800954c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d101      	bne.n	8009560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e0cc      	b.n	80096fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009560:	4b68      	ldr	r3, [pc, #416]	@ (8009704 <HAL_RCC_ClockConfig+0x1b8>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 0307 	and.w	r3, r3, #7
 8009568:	683a      	ldr	r2, [r7, #0]
 800956a:	429a      	cmp	r2, r3
 800956c:	d90c      	bls.n	8009588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800956e:	4b65      	ldr	r3, [pc, #404]	@ (8009704 <HAL_RCC_ClockConfig+0x1b8>)
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	b2d2      	uxtb	r2, r2
 8009574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009576:	4b63      	ldr	r3, [pc, #396]	@ (8009704 <HAL_RCC_ClockConfig+0x1b8>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0307 	and.w	r3, r3, #7
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	429a      	cmp	r2, r3
 8009582:	d001      	beq.n	8009588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e0b8      	b.n	80096fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0302 	and.w	r3, r3, #2
 8009590:	2b00      	cmp	r3, #0
 8009592:	d020      	beq.n	80095d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0304 	and.w	r3, r3, #4
 800959c:	2b00      	cmp	r3, #0
 800959e:	d005      	beq.n	80095ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80095a0:	4b59      	ldr	r3, [pc, #356]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	4a58      	ldr	r2, [pc, #352]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80095a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80095aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0308 	and.w	r3, r3, #8
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d005      	beq.n	80095c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80095b8:	4b53      	ldr	r3, [pc, #332]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	4a52      	ldr	r2, [pc, #328]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80095be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80095c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095c4:	4b50      	ldr	r3, [pc, #320]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	494d      	ldr	r1, [pc, #308]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d044      	beq.n	800966c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d107      	bne.n	80095fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095ea:	4b47      	ldr	r3, [pc, #284]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d119      	bne.n	800962a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e07f      	b.n	80096fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d003      	beq.n	800960a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009606:	2b03      	cmp	r3, #3
 8009608:	d107      	bne.n	800961a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800960a:	4b3f      	ldr	r3, [pc, #252]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d109      	bne.n	800962a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e06f      	b.n	80096fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800961a:	4b3b      	ldr	r3, [pc, #236]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0302 	and.w	r3, r3, #2
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e067      	b.n	80096fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800962a:	4b37      	ldr	r3, [pc, #220]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f023 0203 	bic.w	r2, r3, #3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	4934      	ldr	r1, [pc, #208]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 8009638:	4313      	orrs	r3, r2
 800963a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800963c:	f7fe fdac 	bl	8008198 <HAL_GetTick>
 8009640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009642:	e00a      	b.n	800965a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009644:	f7fe fda8 	bl	8008198 <HAL_GetTick>
 8009648:	4602      	mov	r2, r0
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009652:	4293      	cmp	r3, r2
 8009654:	d901      	bls.n	800965a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	e04f      	b.n	80096fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800965a:	4b2b      	ldr	r3, [pc, #172]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f003 020c 	and.w	r2, r3, #12
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	429a      	cmp	r2, r3
 800966a:	d1eb      	bne.n	8009644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800966c:	4b25      	ldr	r3, [pc, #148]	@ (8009704 <HAL_RCC_ClockConfig+0x1b8>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 0307 	and.w	r3, r3, #7
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	429a      	cmp	r2, r3
 8009678:	d20c      	bcs.n	8009694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800967a:	4b22      	ldr	r3, [pc, #136]	@ (8009704 <HAL_RCC_ClockConfig+0x1b8>)
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	b2d2      	uxtb	r2, r2
 8009680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009682:	4b20      	ldr	r3, [pc, #128]	@ (8009704 <HAL_RCC_ClockConfig+0x1b8>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 0307 	and.w	r3, r3, #7
 800968a:	683a      	ldr	r2, [r7, #0]
 800968c:	429a      	cmp	r2, r3
 800968e:	d001      	beq.n	8009694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e032      	b.n	80096fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 0304 	and.w	r3, r3, #4
 800969c:	2b00      	cmp	r3, #0
 800969e:	d008      	beq.n	80096b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80096a0:	4b19      	ldr	r3, [pc, #100]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	4916      	ldr	r1, [pc, #88]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80096ae:	4313      	orrs	r3, r2
 80096b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 0308 	and.w	r3, r3, #8
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d009      	beq.n	80096d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80096be:	4b12      	ldr	r3, [pc, #72]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	490e      	ldr	r1, [pc, #56]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80096ce:	4313      	orrs	r3, r2
 80096d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80096d2:	f000 f821 	bl	8009718 <HAL_RCC_GetSysClockFreq>
 80096d6:	4602      	mov	r2, r0
 80096d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	091b      	lsrs	r3, r3, #4
 80096de:	f003 030f 	and.w	r3, r3, #15
 80096e2:	490a      	ldr	r1, [pc, #40]	@ (800970c <HAL_RCC_ClockConfig+0x1c0>)
 80096e4:	5ccb      	ldrb	r3, [r1, r3]
 80096e6:	fa22 f303 	lsr.w	r3, r2, r3
 80096ea:	4a09      	ldr	r2, [pc, #36]	@ (8009710 <HAL_RCC_ClockConfig+0x1c4>)
 80096ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80096ee:	4b09      	ldr	r3, [pc, #36]	@ (8009714 <HAL_RCC_ClockConfig+0x1c8>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fe fd0c 	bl	8008110 <HAL_InitTick>

  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	40023c00 	.word	0x40023c00
 8009708:	40023800 	.word	0x40023800
 800970c:	0800e784 	.word	0x0800e784
 8009710:	2000001c 	.word	0x2000001c
 8009714:	20000020 	.word	0x20000020

08009718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800971c:	b094      	sub	sp, #80	@ 0x50
 800971e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009720:	2300      	movs	r3, #0
 8009722:	647b      	str	r3, [r7, #68]	@ 0x44
 8009724:	2300      	movs	r3, #0
 8009726:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009728:	2300      	movs	r3, #0
 800972a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800972c:	2300      	movs	r3, #0
 800972e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009730:	4b79      	ldr	r3, [pc, #484]	@ (8009918 <HAL_RCC_GetSysClockFreq+0x200>)
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f003 030c 	and.w	r3, r3, #12
 8009738:	2b08      	cmp	r3, #8
 800973a:	d00d      	beq.n	8009758 <HAL_RCC_GetSysClockFreq+0x40>
 800973c:	2b08      	cmp	r3, #8
 800973e:	f200 80e1 	bhi.w	8009904 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009742:	2b00      	cmp	r3, #0
 8009744:	d002      	beq.n	800974c <HAL_RCC_GetSysClockFreq+0x34>
 8009746:	2b04      	cmp	r3, #4
 8009748:	d003      	beq.n	8009752 <HAL_RCC_GetSysClockFreq+0x3a>
 800974a:	e0db      	b.n	8009904 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800974c:	4b73      	ldr	r3, [pc, #460]	@ (800991c <HAL_RCC_GetSysClockFreq+0x204>)
 800974e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8009750:	e0db      	b.n	800990a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009752:	4b73      	ldr	r3, [pc, #460]	@ (8009920 <HAL_RCC_GetSysClockFreq+0x208>)
 8009754:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009756:	e0d8      	b.n	800990a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009758:	4b6f      	ldr	r3, [pc, #444]	@ (8009918 <HAL_RCC_GetSysClockFreq+0x200>)
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009760:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009762:	4b6d      	ldr	r3, [pc, #436]	@ (8009918 <HAL_RCC_GetSysClockFreq+0x200>)
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800976a:	2b00      	cmp	r3, #0
 800976c:	d063      	beq.n	8009836 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800976e:	4b6a      	ldr	r3, [pc, #424]	@ (8009918 <HAL_RCC_GetSysClockFreq+0x200>)
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	099b      	lsrs	r3, r3, #6
 8009774:	2200      	movs	r2, #0
 8009776:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009778:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800977a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009780:	633b      	str	r3, [r7, #48]	@ 0x30
 8009782:	2300      	movs	r3, #0
 8009784:	637b      	str	r3, [r7, #52]	@ 0x34
 8009786:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800978a:	4622      	mov	r2, r4
 800978c:	462b      	mov	r3, r5
 800978e:	f04f 0000 	mov.w	r0, #0
 8009792:	f04f 0100 	mov.w	r1, #0
 8009796:	0159      	lsls	r1, r3, #5
 8009798:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800979c:	0150      	lsls	r0, r2, #5
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	4621      	mov	r1, r4
 80097a4:	1a51      	subs	r1, r2, r1
 80097a6:	6139      	str	r1, [r7, #16]
 80097a8:	4629      	mov	r1, r5
 80097aa:	eb63 0301 	sbc.w	r3, r3, r1
 80097ae:	617b      	str	r3, [r7, #20]
 80097b0:	f04f 0200 	mov.w	r2, #0
 80097b4:	f04f 0300 	mov.w	r3, #0
 80097b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80097bc:	4659      	mov	r1, fp
 80097be:	018b      	lsls	r3, r1, #6
 80097c0:	4651      	mov	r1, sl
 80097c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80097c6:	4651      	mov	r1, sl
 80097c8:	018a      	lsls	r2, r1, #6
 80097ca:	4651      	mov	r1, sl
 80097cc:	ebb2 0801 	subs.w	r8, r2, r1
 80097d0:	4659      	mov	r1, fp
 80097d2:	eb63 0901 	sbc.w	r9, r3, r1
 80097d6:	f04f 0200 	mov.w	r2, #0
 80097da:	f04f 0300 	mov.w	r3, #0
 80097de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80097e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80097e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80097ea:	4690      	mov	r8, r2
 80097ec:	4699      	mov	r9, r3
 80097ee:	4623      	mov	r3, r4
 80097f0:	eb18 0303 	adds.w	r3, r8, r3
 80097f4:	60bb      	str	r3, [r7, #8]
 80097f6:	462b      	mov	r3, r5
 80097f8:	eb49 0303 	adc.w	r3, r9, r3
 80097fc:	60fb      	str	r3, [r7, #12]
 80097fe:	f04f 0200 	mov.w	r2, #0
 8009802:	f04f 0300 	mov.w	r3, #0
 8009806:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800980a:	4629      	mov	r1, r5
 800980c:	024b      	lsls	r3, r1, #9
 800980e:	4621      	mov	r1, r4
 8009810:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009814:	4621      	mov	r1, r4
 8009816:	024a      	lsls	r2, r1, #9
 8009818:	4610      	mov	r0, r2
 800981a:	4619      	mov	r1, r3
 800981c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800981e:	2200      	movs	r2, #0
 8009820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009822:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009824:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009828:	f7f7 f9b6 	bl	8000b98 <__aeabi_uldivmod>
 800982c:	4602      	mov	r2, r0
 800982e:	460b      	mov	r3, r1
 8009830:	4613      	mov	r3, r2
 8009832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009834:	e058      	b.n	80098e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009836:	4b38      	ldr	r3, [pc, #224]	@ (8009918 <HAL_RCC_GetSysClockFreq+0x200>)
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	099b      	lsrs	r3, r3, #6
 800983c:	2200      	movs	r2, #0
 800983e:	4618      	mov	r0, r3
 8009840:	4611      	mov	r1, r2
 8009842:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009846:	623b      	str	r3, [r7, #32]
 8009848:	2300      	movs	r3, #0
 800984a:	627b      	str	r3, [r7, #36]	@ 0x24
 800984c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009850:	4642      	mov	r2, r8
 8009852:	464b      	mov	r3, r9
 8009854:	f04f 0000 	mov.w	r0, #0
 8009858:	f04f 0100 	mov.w	r1, #0
 800985c:	0159      	lsls	r1, r3, #5
 800985e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009862:	0150      	lsls	r0, r2, #5
 8009864:	4602      	mov	r2, r0
 8009866:	460b      	mov	r3, r1
 8009868:	4641      	mov	r1, r8
 800986a:	ebb2 0a01 	subs.w	sl, r2, r1
 800986e:	4649      	mov	r1, r9
 8009870:	eb63 0b01 	sbc.w	fp, r3, r1
 8009874:	f04f 0200 	mov.w	r2, #0
 8009878:	f04f 0300 	mov.w	r3, #0
 800987c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009880:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009884:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009888:	ebb2 040a 	subs.w	r4, r2, sl
 800988c:	eb63 050b 	sbc.w	r5, r3, fp
 8009890:	f04f 0200 	mov.w	r2, #0
 8009894:	f04f 0300 	mov.w	r3, #0
 8009898:	00eb      	lsls	r3, r5, #3
 800989a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800989e:	00e2      	lsls	r2, r4, #3
 80098a0:	4614      	mov	r4, r2
 80098a2:	461d      	mov	r5, r3
 80098a4:	4643      	mov	r3, r8
 80098a6:	18e3      	adds	r3, r4, r3
 80098a8:	603b      	str	r3, [r7, #0]
 80098aa:	464b      	mov	r3, r9
 80098ac:	eb45 0303 	adc.w	r3, r5, r3
 80098b0:	607b      	str	r3, [r7, #4]
 80098b2:	f04f 0200 	mov.w	r2, #0
 80098b6:	f04f 0300 	mov.w	r3, #0
 80098ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80098be:	4629      	mov	r1, r5
 80098c0:	028b      	lsls	r3, r1, #10
 80098c2:	4621      	mov	r1, r4
 80098c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80098c8:	4621      	mov	r1, r4
 80098ca:	028a      	lsls	r2, r1, #10
 80098cc:	4610      	mov	r0, r2
 80098ce:	4619      	mov	r1, r3
 80098d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098d2:	2200      	movs	r2, #0
 80098d4:	61bb      	str	r3, [r7, #24]
 80098d6:	61fa      	str	r2, [r7, #28]
 80098d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098dc:	f7f7 f95c 	bl	8000b98 <__aeabi_uldivmod>
 80098e0:	4602      	mov	r2, r0
 80098e2:	460b      	mov	r3, r1
 80098e4:	4613      	mov	r3, r2
 80098e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80098e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009918 <HAL_RCC_GetSysClockFreq+0x200>)
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	0c1b      	lsrs	r3, r3, #16
 80098ee:	f003 0303 	and.w	r3, r3, #3
 80098f2:	3301      	adds	r3, #1
 80098f4:	005b      	lsls	r3, r3, #1
 80098f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80098f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009900:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009902:	e002      	b.n	800990a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009904:	4b05      	ldr	r3, [pc, #20]	@ (800991c <HAL_RCC_GetSysClockFreq+0x204>)
 8009906:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800990a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800990c:	4618      	mov	r0, r3
 800990e:	3750      	adds	r7, #80	@ 0x50
 8009910:	46bd      	mov	sp, r7
 8009912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009916:	bf00      	nop
 8009918:	40023800 	.word	0x40023800
 800991c:	00f42400 	.word	0x00f42400
 8009920:	007a1200 	.word	0x007a1200

08009924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009924:	b480      	push	{r7}
 8009926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009928:	4b03      	ldr	r3, [pc, #12]	@ (8009938 <HAL_RCC_GetHCLKFreq+0x14>)
 800992a:	681b      	ldr	r3, [r3, #0]
}
 800992c:	4618      	mov	r0, r3
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	2000001c 	.word	0x2000001c

0800993c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009940:	f7ff fff0 	bl	8009924 <HAL_RCC_GetHCLKFreq>
 8009944:	4602      	mov	r2, r0
 8009946:	4b05      	ldr	r3, [pc, #20]	@ (800995c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	0a9b      	lsrs	r3, r3, #10
 800994c:	f003 0307 	and.w	r3, r3, #7
 8009950:	4903      	ldr	r1, [pc, #12]	@ (8009960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009952:	5ccb      	ldrb	r3, [r1, r3]
 8009954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009958:	4618      	mov	r0, r3
 800995a:	bd80      	pop	{r7, pc}
 800995c:	40023800 	.word	0x40023800
 8009960:	0800e794 	.word	0x0800e794

08009964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009968:	f7ff ffdc 	bl	8009924 <HAL_RCC_GetHCLKFreq>
 800996c:	4602      	mov	r2, r0
 800996e:	4b05      	ldr	r3, [pc, #20]	@ (8009984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	0b5b      	lsrs	r3, r3, #13
 8009974:	f003 0307 	and.w	r3, r3, #7
 8009978:	4903      	ldr	r1, [pc, #12]	@ (8009988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800997a:	5ccb      	ldrb	r3, [r1, r3]
 800997c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009980:	4618      	mov	r0, r3
 8009982:	bd80      	pop	{r7, pc}
 8009984:	40023800 	.word	0x40023800
 8009988:	0800e794 	.word	0x0800e794

0800998c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009994:	2300      	movs	r3, #0
 8009996:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009998:	2300      	movs	r3, #0
 800999a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 0301 	and.w	r3, r3, #1
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d105      	bne.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d035      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80099b4:	4b62      	ldr	r3, [pc, #392]	@ (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80099b6:	2200      	movs	r2, #0
 80099b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80099ba:	f7fe fbed 	bl	8008198 <HAL_GetTick>
 80099be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80099c0:	e008      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80099c2:	f7fe fbe9 	bl	8008198 <HAL_GetTick>
 80099c6:	4602      	mov	r2, r0
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d901      	bls.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e0b0      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80099d4:	4b5b      	ldr	r3, [pc, #364]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1f0      	bne.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	019a      	lsls	r2, r3, #6
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	071b      	lsls	r3, r3, #28
 80099ec:	4955      	ldr	r1, [pc, #340]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80099f4:	4b52      	ldr	r3, [pc, #328]	@ (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80099f6:	2201      	movs	r2, #1
 80099f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80099fa:	f7fe fbcd 	bl	8008198 <HAL_GetTick>
 80099fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a00:	e008      	b.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009a02:	f7fe fbc9 	bl	8008198 <HAL_GetTick>
 8009a06:	4602      	mov	r2, r0
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	1ad3      	subs	r3, r2, r3
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d901      	bls.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a10:	2303      	movs	r3, #3
 8009a12:	e090      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a14:	4b4b      	ldr	r3, [pc, #300]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d0f0      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 0302 	and.w	r3, r3, #2
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 8083 	beq.w	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009a2e:	2300      	movs	r3, #0
 8009a30:	60fb      	str	r3, [r7, #12]
 8009a32:	4b44      	ldr	r3, [pc, #272]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a36:	4a43      	ldr	r2, [pc, #268]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8009a3e:	4b41      	ldr	r3, [pc, #260]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a46:	60fb      	str	r3, [r7, #12]
 8009a48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a3e      	ldr	r2, [pc, #248]	@ (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009a50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009a56:	f7fe fb9f 	bl	8008198 <HAL_GetTick>
 8009a5a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009a5c:	e008      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009a5e:	f7fe fb9b 	bl	8008198 <HAL_GetTick>
 8009a62:	4602      	mov	r2, r0
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d901      	bls.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e062      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009a70:	4b35      	ldr	r3, [pc, #212]	@ (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d0f0      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009a7c:	4b31      	ldr	r3, [pc, #196]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a84:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d02f      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a94:	693a      	ldr	r2, [r7, #16]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d028      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009aa2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009aa4:	4b29      	ldr	r3, [pc, #164]	@ (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009aaa:	4b28      	ldr	r3, [pc, #160]	@ (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009aac:	2200      	movs	r2, #0
 8009aae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009ab0:	4a24      	ldr	r2, [pc, #144]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009ab6:	4b23      	ldr	r3, [pc, #140]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d114      	bne.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009ac2:	f7fe fb69 	bl	8008198 <HAL_GetTick>
 8009ac6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ac8:	e00a      	b.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009aca:	f7fe fb65 	bl	8008198 <HAL_GetTick>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	1ad3      	subs	r3, r2, r3
 8009ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d901      	bls.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009adc:	2303      	movs	r3, #3
 8009ade:	e02a      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ae0:	4b18      	ldr	r3, [pc, #96]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ae4:	f003 0302 	and.w	r3, r3, #2
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d0ee      	beq.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009af4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009af8:	d10d      	bne.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009afa:	4b12      	ldr	r3, [pc, #72]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009b0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b0e:	490d      	ldr	r1, [pc, #52]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b10:	4313      	orrs	r3, r2
 8009b12:	608b      	str	r3, [r1, #8]
 8009b14:	e005      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009b16:	4b0b      	ldr	r3, [pc, #44]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b1c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009b20:	6093      	str	r3, [r2, #8]
 8009b22:	4b08      	ldr	r3, [pc, #32]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b2e:	4905      	ldr	r1, [pc, #20]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b30:	4313      	orrs	r3, r2
 8009b32:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	42470068 	.word	0x42470068
 8009b44:	40023800 	.word	0x40023800
 8009b48:	40007000 	.word	0x40007000
 8009b4c:	42470e40 	.word	0x42470e40

08009b50 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d101      	bne.n	8009b66 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e073      	b.n	8009c4e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	7f5b      	ldrb	r3, [r3, #29]
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d105      	bne.n	8009b7c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7fc fa0c 	bl	8005f94 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2202      	movs	r2, #2
 8009b80:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	f003 0310 	and.w	r3, r3, #16
 8009b8c:	2b10      	cmp	r3, #16
 8009b8e:	d055      	beq.n	8009c3c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	22ca      	movs	r2, #202	@ 0xca
 8009b96:	625a      	str	r2, [r3, #36]	@ 0x24
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2253      	movs	r2, #83	@ 0x53
 8009b9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fa49 	bl	800a038 <RTC_EnterInitMode>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009baa:	7bfb      	ldrb	r3, [r7, #15]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d12c      	bne.n	8009c0a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	6812      	ldr	r2, [r2, #0]
 8009bba:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bc2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	6899      	ldr	r1, [r3, #8]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	695b      	ldr	r3, [r3, #20]
 8009bd8:	431a      	orrs	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	430a      	orrs	r2, r1
 8009be0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	68d2      	ldr	r2, [r2, #12]
 8009bea:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6919      	ldr	r1, [r3, #16]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	041a      	lsls	r2, r3, #16
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	430a      	orrs	r2, r1
 8009bfe:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fa50 	bl	800a0a6 <RTC_ExitInitMode>
 8009c06:	4603      	mov	r3, r0
 8009c08:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009c0a:	7bfb      	ldrb	r3, [r7, #15]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d110      	bne.n	8009c32 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009c1e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	699a      	ldr	r2, [r3, #24]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	22ff      	movs	r2, #255	@ 0xff
 8009c38:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c3a:	e001      	b.n	8009c40 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d102      	bne.n	8009c4c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009c56:	b590      	push	{r4, r7, lr}
 8009c58:	b087      	sub	sp, #28
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	60f8      	str	r0, [r7, #12]
 8009c5e:	60b9      	str	r1, [r7, #8]
 8009c60:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009c62:	2300      	movs	r3, #0
 8009c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	7f1b      	ldrb	r3, [r3, #28]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d101      	bne.n	8009c72 <HAL_RTC_SetTime+0x1c>
 8009c6e:	2302      	movs	r3, #2
 8009c70:	e087      	b.n	8009d82 <HAL_RTC_SetTime+0x12c>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2201      	movs	r2, #1
 8009c76:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d126      	bne.n	8009cd2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d102      	bne.n	8009c98 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	2200      	movs	r2, #0
 8009c96:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f000 fa27 	bl	800a0f0 <RTC_ByteToBcd2>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	785b      	ldrb	r3, [r3, #1]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 fa20 	bl	800a0f0 <RTC_ByteToBcd2>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009cb4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	789b      	ldrb	r3, [r3, #2]
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f000 fa18 	bl	800a0f0 <RTC_ByteToBcd2>
 8009cc0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009cc2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	78db      	ldrb	r3, [r3, #3]
 8009cca:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	617b      	str	r3, [r7, #20]
 8009cd0:	e018      	b.n	8009d04 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d102      	bne.n	8009ce6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	785b      	ldrb	r3, [r3, #1]
 8009cf0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009cf2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009cf8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	78db      	ldrb	r3, [r3, #3]
 8009cfe:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009d00:	4313      	orrs	r3, r2
 8009d02:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	22ca      	movs	r2, #202	@ 0xca
 8009d0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2253      	movs	r2, #83	@ 0x53
 8009d12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f000 f98f 	bl	800a038 <RTC_EnterInitMode>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009d1e:	7cfb      	ldrb	r3, [r7, #19]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d120      	bne.n	8009d66 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009d2e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009d32:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689a      	ldr	r2, [r3, #8]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009d42:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6899      	ldr	r1, [r3, #8]
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	68da      	ldr	r2, [r3, #12]
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	431a      	orrs	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	430a      	orrs	r2, r1
 8009d5a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f000 f9a2 	bl	800a0a6 <RTC_ExitInitMode>
 8009d62:	4603      	mov	r3, r0
 8009d64:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009d66:	7cfb      	ldrb	r3, [r7, #19]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d102      	bne.n	8009d72 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	22ff      	movs	r2, #255	@ 0xff
 8009d78:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	771a      	strb	r2, [r3, #28]

  return status;
 8009d80:	7cfb      	ldrb	r3, [r7, #19]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	371c      	adds	r7, #28
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd90      	pop	{r4, r7, pc}

08009d8a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b086      	sub	sp, #24
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	60f8      	str	r0, [r7, #12]
 8009d92:	60b9      	str	r1, [r7, #8]
 8009d94:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009d96:	2300      	movs	r3, #0
 8009d98:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009dbc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009dc0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	0c1b      	lsrs	r3, r3, #16
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009dcc:	b2da      	uxtb	r2, r3
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	0a1b      	lsrs	r3, r3, #8
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dea:	b2da      	uxtb	r2, r3
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	0d9b      	lsrs	r3, r3, #22
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	f003 0301 	and.w	r3, r3, #1
 8009dfa:	b2da      	uxtb	r2, r3
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d11a      	bne.n	8009e3c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 f98e 	bl	800a12c <RTC_Bcd2ToByte>
 8009e10:	4603      	mov	r3, r0
 8009e12:	461a      	mov	r2, r3
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	785b      	ldrb	r3, [r3, #1]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 f985 	bl	800a12c <RTC_Bcd2ToByte>
 8009e22:	4603      	mov	r3, r0
 8009e24:	461a      	mov	r2, r3
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	789b      	ldrb	r3, [r3, #2]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f000 f97c 	bl	800a12c <RTC_Bcd2ToByte>
 8009e34:	4603      	mov	r3, r0
 8009e36:	461a      	mov	r2, r3
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3718      	adds	r7, #24
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009e46:	b590      	push	{r4, r7, lr}
 8009e48:	b087      	sub	sp, #28
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	60f8      	str	r0, [r7, #12]
 8009e4e:	60b9      	str	r1, [r7, #8]
 8009e50:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009e52:	2300      	movs	r3, #0
 8009e54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	7f1b      	ldrb	r3, [r3, #28]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d101      	bne.n	8009e62 <HAL_RTC_SetDate+0x1c>
 8009e5e:	2302      	movs	r3, #2
 8009e60:	e071      	b.n	8009f46 <HAL_RTC_SetDate+0x100>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2201      	movs	r2, #1
 8009e66:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10e      	bne.n	8009e92 <HAL_RTC_SetDate+0x4c>
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	785b      	ldrb	r3, [r3, #1]
 8009e78:	f003 0310 	and.w	r3, r3, #16
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d008      	beq.n	8009e92 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	785b      	ldrb	r3, [r3, #1]
 8009e84:	f023 0310 	bic.w	r3, r3, #16
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	330a      	adds	r3, #10
 8009e8c:	b2da      	uxtb	r2, r3
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d11c      	bne.n	8009ed2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	78db      	ldrb	r3, [r3, #3]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 f927 	bl	800a0f0 <RTC_ByteToBcd2>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	785b      	ldrb	r3, [r3, #1]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 f920 	bl	800a0f0 <RTC_ByteToBcd2>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009eb4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	789b      	ldrb	r3, [r3, #2]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 f918 	bl	800a0f0 <RTC_ByteToBcd2>
 8009ec0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009ec2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	617b      	str	r3, [r7, #20]
 8009ed0:	e00e      	b.n	8009ef0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	78db      	ldrb	r3, [r3, #3]
 8009ed6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	785b      	ldrb	r3, [r3, #1]
 8009edc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009ede:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009ee4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009eec:	4313      	orrs	r3, r2
 8009eee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	22ca      	movs	r2, #202	@ 0xca
 8009ef6:	625a      	str	r2, [r3, #36]	@ 0x24
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2253      	movs	r2, #83	@ 0x53
 8009efe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f000 f899 	bl	800a038 <RTC_EnterInitMode>
 8009f06:	4603      	mov	r3, r0
 8009f08:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009f0a:	7cfb      	ldrb	r3, [r7, #19]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10c      	bne.n	8009f2a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009f1a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009f1e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f000 f8c0 	bl	800a0a6 <RTC_ExitInitMode>
 8009f26:	4603      	mov	r3, r0
 8009f28:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009f2a:	7cfb      	ldrb	r3, [r7, #19]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d102      	bne.n	8009f36 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2201      	movs	r2, #1
 8009f34:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	22ff      	movs	r2, #255	@ 0xff
 8009f3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2200      	movs	r2, #0
 8009f42:	771a      	strb	r2, [r3, #28]

  return status;
 8009f44:	7cfb      	ldrb	r3, [r7, #19]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	371c      	adds	r7, #28
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd90      	pop	{r4, r7, pc}

08009f4e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b086      	sub	sp, #24
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	60f8      	str	r0, [r7, #12]
 8009f56:	60b9      	str	r1, [r7, #8]
 8009f58:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009f68:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009f6c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	0c1b      	lsrs	r3, r3, #16
 8009f72:	b2da      	uxtb	r2, r3
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	0a1b      	lsrs	r3, r3, #8
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	f003 031f 	and.w	r3, r3, #31
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	0b5b      	lsrs	r3, r3, #13
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	f003 0307 	and.w	r3, r3, #7
 8009fa0:	b2da      	uxtb	r2, r3
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d11a      	bne.n	8009fe2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	78db      	ldrb	r3, [r3, #3]
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f000 f8bb 	bl	800a12c <RTC_Bcd2ToByte>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	461a      	mov	r2, r3
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	785b      	ldrb	r3, [r3, #1]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f000 f8b2 	bl	800a12c <RTC_Bcd2ToByte>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	461a      	mov	r2, r3
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	789b      	ldrb	r3, [r3, #2]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f000 f8a9 	bl	800a12c <RTC_Bcd2ToByte>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	461a      	mov	r2, r3
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009fe2:	2300      	movs	r3, #0
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3718      	adds	r7, #24
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a0d      	ldr	r2, [pc, #52]	@ (800a034 <HAL_RTC_WaitForSynchro+0x48>)
 8009ffe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a000:	f7fe f8ca 	bl	8008198 <HAL_GetTick>
 800a004:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a006:	e009      	b.n	800a01c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a008:	f7fe f8c6 	bl	8008198 <HAL_GetTick>
 800a00c:	4602      	mov	r2, r0
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a016:	d901      	bls.n	800a01c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800a018:	2303      	movs	r3, #3
 800a01a:	e007      	b.n	800a02c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	f003 0320 	and.w	r3, r3, #32
 800a026:	2b00      	cmp	r3, #0
 800a028:	d0ee      	beq.n	800a008 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3710      	adds	r7, #16
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	00017f5f 	.word	0x00017f5f

0800a038 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a040:	2300      	movs	r3, #0
 800a042:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a044:	2300      	movs	r3, #0
 800a046:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a052:	2b00      	cmp	r3, #0
 800a054:	d122      	bne.n	800a09c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68da      	ldr	r2, [r3, #12]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a064:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a066:	f7fe f897 	bl	8008198 <HAL_GetTick>
 800a06a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a06c:	e00c      	b.n	800a088 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a06e:	f7fe f893 	bl	8008198 <HAL_GetTick>
 800a072:	4602      	mov	r2, r0
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a07c:	d904      	bls.n	800a088 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2204      	movs	r2, #4
 800a082:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a092:	2b00      	cmp	r3, #0
 800a094:	d102      	bne.n	800a09c <RTC_EnterInitMode+0x64>
 800a096:	7bfb      	ldrb	r3, [r7, #15]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d1e8      	bne.n	800a06e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b084      	sub	sp, #16
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68da      	ldr	r2, [r3, #12]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a0c0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	f003 0320 	and.w	r3, r3, #32
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d10a      	bne.n	800a0e6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f7ff ff8b 	bl	8009fec <HAL_RTC_WaitForSynchro>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d004      	beq.n	800a0e6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2204      	movs	r2, #4
 800a0e0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3710      	adds	r7, #16
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800a0fe:	e005      	b.n	800a10c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	3301      	adds	r3, #1
 800a104:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a106:	79fb      	ldrb	r3, [r7, #7]
 800a108:	3b0a      	subs	r3, #10
 800a10a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a10c:	79fb      	ldrb	r3, [r7, #7]
 800a10e:	2b09      	cmp	r3, #9
 800a110:	d8f6      	bhi.n	800a100 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	b2db      	uxtb	r3, r3
 800a116:	011b      	lsls	r3, r3, #4
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	79fb      	ldrb	r3, [r7, #7]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	b2db      	uxtb	r3, r3
}
 800a120:	4618      	mov	r0, r3
 800a122:	3714      	adds	r7, #20
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	4603      	mov	r3, r0
 800a134:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800a136:	2300      	movs	r3, #0
 800a138:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800a13a:	79fb      	ldrb	r3, [r7, #7]
 800a13c:	091b      	lsrs	r3, r3, #4
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	461a      	mov	r2, r3
 800a142:	4613      	mov	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4413      	add	r3, r2
 800a148:	005b      	lsls	r3, r3, #1
 800a14a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	79fb      	ldrb	r3, [r7, #7]
 800a152:	f003 030f 	and.w	r3, r3, #15
 800a156:	b2db      	uxtb	r3, r3
 800a158:	4413      	add	r3, r2
 800a15a:	b2db      	uxtb	r3, r3
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d101      	bne.n	800a17a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	e041      	b.n	800a1fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a180:	b2db      	uxtb	r3, r3
 800a182:	2b00      	cmp	r3, #0
 800a184:	d106      	bne.n	800a194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f7fd fd5e 	bl	8007c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2202      	movs	r2, #2
 800a198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	3304      	adds	r3, #4
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	4610      	mov	r0, r2
 800a1a8:	f000 fa88 	bl	800a6bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
	...

0800a208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a216:	b2db      	uxtb	r3, r3
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d001      	beq.n	800a220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e04e      	b.n	800a2be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2202      	movs	r2, #2
 800a224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68da      	ldr	r2, [r3, #12]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f042 0201 	orr.w	r2, r2, #1
 800a236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a23      	ldr	r2, [pc, #140]	@ (800a2cc <HAL_TIM_Base_Start_IT+0xc4>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d022      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0x80>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a24a:	d01d      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0x80>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a1f      	ldr	r2, [pc, #124]	@ (800a2d0 <HAL_TIM_Base_Start_IT+0xc8>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d018      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0x80>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a1e      	ldr	r2, [pc, #120]	@ (800a2d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d013      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0x80>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a1c      	ldr	r2, [pc, #112]	@ (800a2d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d00e      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0x80>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a1b      	ldr	r2, [pc, #108]	@ (800a2dc <HAL_TIM_Base_Start_IT+0xd4>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d009      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0x80>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a19      	ldr	r2, [pc, #100]	@ (800a2e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d004      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0x80>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a18      	ldr	r2, [pc, #96]	@ (800a2e4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d111      	bne.n	800a2ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	f003 0307 	and.w	r3, r3, #7
 800a292:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2b06      	cmp	r3, #6
 800a298:	d010      	beq.n	800a2bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f042 0201 	orr.w	r2, r2, #1
 800a2a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2aa:	e007      	b.n	800a2bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f042 0201 	orr.w	r2, r2, #1
 800a2ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3714      	adds	r7, #20
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	40010000 	.word	0x40010000
 800a2d0:	40000400 	.word	0x40000400
 800a2d4:	40000800 	.word	0x40000800
 800a2d8:	40000c00 	.word	0x40000c00
 800a2dc:	40010400 	.word	0x40010400
 800a2e0:	40014000 	.word	0x40014000
 800a2e4:	40001800 	.word	0x40001800

0800a2e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	f003 0302 	and.w	r3, r3, #2
 800a306:	2b00      	cmp	r3, #0
 800a308:	d020      	beq.n	800a34c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f003 0302 	and.w	r3, r3, #2
 800a310:	2b00      	cmp	r3, #0
 800a312:	d01b      	beq.n	800a34c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f06f 0202 	mvn.w	r2, #2
 800a31c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2201      	movs	r2, #1
 800a322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	f003 0303 	and.w	r3, r3, #3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d003      	beq.n	800a33a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f9a3 	bl	800a67e <HAL_TIM_IC_CaptureCallback>
 800a338:	e005      	b.n	800a346 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f995 	bl	800a66a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f9a6 	bl	800a692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	f003 0304 	and.w	r3, r3, #4
 800a352:	2b00      	cmp	r3, #0
 800a354:	d020      	beq.n	800a398 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f003 0304 	and.w	r3, r3, #4
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d01b      	beq.n	800a398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f06f 0204 	mvn.w	r2, #4
 800a368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2202      	movs	r2, #2
 800a36e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	699b      	ldr	r3, [r3, #24]
 800a376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 f97d 	bl	800a67e <HAL_TIM_IC_CaptureCallback>
 800a384:	e005      	b.n	800a392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 f96f 	bl	800a66a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 f980 	bl	800a692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	f003 0308 	and.w	r3, r3, #8
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d020      	beq.n	800a3e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f003 0308 	and.w	r3, r3, #8
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d01b      	beq.n	800a3e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f06f 0208 	mvn.w	r2, #8
 800a3b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2204      	movs	r2, #4
 800a3ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	69db      	ldr	r3, [r3, #28]
 800a3c2:	f003 0303 	and.w	r3, r3, #3
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d003      	beq.n	800a3d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 f957 	bl	800a67e <HAL_TIM_IC_CaptureCallback>
 800a3d0:	e005      	b.n	800a3de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f949 	bl	800a66a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f95a 	bl	800a692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	f003 0310 	and.w	r3, r3, #16
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d020      	beq.n	800a430 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f003 0310 	and.w	r3, r3, #16
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d01b      	beq.n	800a430 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f06f 0210 	mvn.w	r2, #16
 800a400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2208      	movs	r2, #8
 800a406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	69db      	ldr	r3, [r3, #28]
 800a40e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a412:	2b00      	cmp	r3, #0
 800a414:	d003      	beq.n	800a41e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f931 	bl	800a67e <HAL_TIM_IC_CaptureCallback>
 800a41c:	e005      	b.n	800a42a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f923 	bl	800a66a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 f934 	bl	800a692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	f003 0301 	and.w	r3, r3, #1
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00c      	beq.n	800a454 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f003 0301 	and.w	r3, r3, #1
 800a440:	2b00      	cmp	r3, #0
 800a442:	d007      	beq.n	800a454 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f06f 0201 	mvn.w	r2, #1
 800a44c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f901 	bl	800a656 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00c      	beq.n	800a478 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a464:	2b00      	cmp	r3, #0
 800a466:	d007      	beq.n	800a478 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 faee 	bl	800aa54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00c      	beq.n	800a49c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d007      	beq.n	800a49c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f905 	bl	800a6a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	f003 0320 	and.w	r3, r3, #32
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00c      	beq.n	800a4c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f003 0320 	and.w	r3, r3, #32
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d007      	beq.n	800a4c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f06f 0220 	mvn.w	r2, #32
 800a4b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 fac0 	bl	800aa40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4c0:	bf00      	nop
 800a4c2:	3710      	adds	r7, #16
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d101      	bne.n	800a4e4 <HAL_TIM_ConfigClockSource+0x1c>
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	e0b4      	b.n	800a64e <HAL_TIM_ConfigClockSource+0x186>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2202      	movs	r2, #2
 800a4f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a50a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a51c:	d03e      	beq.n	800a59c <HAL_TIM_ConfigClockSource+0xd4>
 800a51e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a522:	f200 8087 	bhi.w	800a634 <HAL_TIM_ConfigClockSource+0x16c>
 800a526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a52a:	f000 8086 	beq.w	800a63a <HAL_TIM_ConfigClockSource+0x172>
 800a52e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a532:	d87f      	bhi.n	800a634 <HAL_TIM_ConfigClockSource+0x16c>
 800a534:	2b70      	cmp	r3, #112	@ 0x70
 800a536:	d01a      	beq.n	800a56e <HAL_TIM_ConfigClockSource+0xa6>
 800a538:	2b70      	cmp	r3, #112	@ 0x70
 800a53a:	d87b      	bhi.n	800a634 <HAL_TIM_ConfigClockSource+0x16c>
 800a53c:	2b60      	cmp	r3, #96	@ 0x60
 800a53e:	d050      	beq.n	800a5e2 <HAL_TIM_ConfigClockSource+0x11a>
 800a540:	2b60      	cmp	r3, #96	@ 0x60
 800a542:	d877      	bhi.n	800a634 <HAL_TIM_ConfigClockSource+0x16c>
 800a544:	2b50      	cmp	r3, #80	@ 0x50
 800a546:	d03c      	beq.n	800a5c2 <HAL_TIM_ConfigClockSource+0xfa>
 800a548:	2b50      	cmp	r3, #80	@ 0x50
 800a54a:	d873      	bhi.n	800a634 <HAL_TIM_ConfigClockSource+0x16c>
 800a54c:	2b40      	cmp	r3, #64	@ 0x40
 800a54e:	d058      	beq.n	800a602 <HAL_TIM_ConfigClockSource+0x13a>
 800a550:	2b40      	cmp	r3, #64	@ 0x40
 800a552:	d86f      	bhi.n	800a634 <HAL_TIM_ConfigClockSource+0x16c>
 800a554:	2b30      	cmp	r3, #48	@ 0x30
 800a556:	d064      	beq.n	800a622 <HAL_TIM_ConfigClockSource+0x15a>
 800a558:	2b30      	cmp	r3, #48	@ 0x30
 800a55a:	d86b      	bhi.n	800a634 <HAL_TIM_ConfigClockSource+0x16c>
 800a55c:	2b20      	cmp	r3, #32
 800a55e:	d060      	beq.n	800a622 <HAL_TIM_ConfigClockSource+0x15a>
 800a560:	2b20      	cmp	r3, #32
 800a562:	d867      	bhi.n	800a634 <HAL_TIM_ConfigClockSource+0x16c>
 800a564:	2b00      	cmp	r3, #0
 800a566:	d05c      	beq.n	800a622 <HAL_TIM_ConfigClockSource+0x15a>
 800a568:	2b10      	cmp	r3, #16
 800a56a:	d05a      	beq.n	800a622 <HAL_TIM_ConfigClockSource+0x15a>
 800a56c:	e062      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a57e:	f000 f9c3 	bl	800a908 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a590:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	609a      	str	r2, [r3, #8]
      break;
 800a59a:	e04f      	b.n	800a63c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a5ac:	f000 f9ac 	bl	800a908 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	689a      	ldr	r2, [r3, #8]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a5be:	609a      	str	r2, [r3, #8]
      break;
 800a5c0:	e03c      	b.n	800a63c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	f000 f920 	bl	800a814 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2150      	movs	r1, #80	@ 0x50
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f000 f979 	bl	800a8d2 <TIM_ITRx_SetConfig>
      break;
 800a5e0:	e02c      	b.n	800a63c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	f000 f93f 	bl	800a872 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2160      	movs	r1, #96	@ 0x60
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f000 f969 	bl	800a8d2 <TIM_ITRx_SetConfig>
      break;
 800a600:	e01c      	b.n	800a63c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a60e:	461a      	mov	r2, r3
 800a610:	f000 f900 	bl	800a814 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2140      	movs	r1, #64	@ 0x40
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 f959 	bl	800a8d2 <TIM_ITRx_SetConfig>
      break;
 800a620:	e00c      	b.n	800a63c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4619      	mov	r1, r3
 800a62c:	4610      	mov	r0, r2
 800a62e:	f000 f950 	bl	800a8d2 <TIM_ITRx_SetConfig>
      break;
 800a632:	e003      	b.n	800a63c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	73fb      	strb	r3, [r7, #15]
      break;
 800a638:	e000      	b.n	800a63c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a63a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a656:	b480      	push	{r7}
 800a658:	b083      	sub	sp, #12
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a65e:	bf00      	nop
 800a660:	370c      	adds	r7, #12
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr

0800a66a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a66a:	b480      	push	{r7}
 800a66c:	b083      	sub	sp, #12
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a672:	bf00      	nop
 800a674:	370c      	adds	r7, #12
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a67e:	b480      	push	{r7}
 800a680:	b083      	sub	sp, #12
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a686:	bf00      	nop
 800a688:	370c      	adds	r7, #12
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a692:	b480      	push	{r7}
 800a694:	b083      	sub	sp, #12
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a69a:	bf00      	nop
 800a69c:	370c      	adds	r7, #12
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	b083      	sub	sp, #12
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a6ae:	bf00      	nop
 800a6b0:	370c      	adds	r7, #12
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr
	...

0800a6bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4a46      	ldr	r2, [pc, #280]	@ (800a7e8 <TIM_Base_SetConfig+0x12c>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d013      	beq.n	800a6fc <TIM_Base_SetConfig+0x40>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6da:	d00f      	beq.n	800a6fc <TIM_Base_SetConfig+0x40>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a43      	ldr	r2, [pc, #268]	@ (800a7ec <TIM_Base_SetConfig+0x130>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d00b      	beq.n	800a6fc <TIM_Base_SetConfig+0x40>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4a42      	ldr	r2, [pc, #264]	@ (800a7f0 <TIM_Base_SetConfig+0x134>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d007      	beq.n	800a6fc <TIM_Base_SetConfig+0x40>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4a41      	ldr	r2, [pc, #260]	@ (800a7f4 <TIM_Base_SetConfig+0x138>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d003      	beq.n	800a6fc <TIM_Base_SetConfig+0x40>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4a40      	ldr	r2, [pc, #256]	@ (800a7f8 <TIM_Base_SetConfig+0x13c>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d108      	bne.n	800a70e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a35      	ldr	r2, [pc, #212]	@ (800a7e8 <TIM_Base_SetConfig+0x12c>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d02b      	beq.n	800a76e <TIM_Base_SetConfig+0xb2>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a71c:	d027      	beq.n	800a76e <TIM_Base_SetConfig+0xb2>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a32      	ldr	r2, [pc, #200]	@ (800a7ec <TIM_Base_SetConfig+0x130>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d023      	beq.n	800a76e <TIM_Base_SetConfig+0xb2>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a31      	ldr	r2, [pc, #196]	@ (800a7f0 <TIM_Base_SetConfig+0x134>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d01f      	beq.n	800a76e <TIM_Base_SetConfig+0xb2>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4a30      	ldr	r2, [pc, #192]	@ (800a7f4 <TIM_Base_SetConfig+0x138>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d01b      	beq.n	800a76e <TIM_Base_SetConfig+0xb2>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4a2f      	ldr	r2, [pc, #188]	@ (800a7f8 <TIM_Base_SetConfig+0x13c>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d017      	beq.n	800a76e <TIM_Base_SetConfig+0xb2>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a2e      	ldr	r2, [pc, #184]	@ (800a7fc <TIM_Base_SetConfig+0x140>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d013      	beq.n	800a76e <TIM_Base_SetConfig+0xb2>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a2d      	ldr	r2, [pc, #180]	@ (800a800 <TIM_Base_SetConfig+0x144>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d00f      	beq.n	800a76e <TIM_Base_SetConfig+0xb2>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4a2c      	ldr	r2, [pc, #176]	@ (800a804 <TIM_Base_SetConfig+0x148>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d00b      	beq.n	800a76e <TIM_Base_SetConfig+0xb2>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4a2b      	ldr	r2, [pc, #172]	@ (800a808 <TIM_Base_SetConfig+0x14c>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d007      	beq.n	800a76e <TIM_Base_SetConfig+0xb2>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a2a      	ldr	r2, [pc, #168]	@ (800a80c <TIM_Base_SetConfig+0x150>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d003      	beq.n	800a76e <TIM_Base_SetConfig+0xb2>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a29      	ldr	r2, [pc, #164]	@ (800a810 <TIM_Base_SetConfig+0x154>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d108      	bne.n	800a780 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	689a      	ldr	r2, [r3, #8]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a10      	ldr	r2, [pc, #64]	@ (800a7e8 <TIM_Base_SetConfig+0x12c>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d003      	beq.n	800a7b4 <TIM_Base_SetConfig+0xf8>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a12      	ldr	r2, [pc, #72]	@ (800a7f8 <TIM_Base_SetConfig+0x13c>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d103      	bne.n	800a7bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	691a      	ldr	r2, [r3, #16]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	f003 0301 	and.w	r3, r3, #1
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d105      	bne.n	800a7da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	691b      	ldr	r3, [r3, #16]
 800a7d2:	f023 0201 	bic.w	r2, r3, #1
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	611a      	str	r2, [r3, #16]
  }
}
 800a7da:	bf00      	nop
 800a7dc:	3714      	adds	r7, #20
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	40010000 	.word	0x40010000
 800a7ec:	40000400 	.word	0x40000400
 800a7f0:	40000800 	.word	0x40000800
 800a7f4:	40000c00 	.word	0x40000c00
 800a7f8:	40010400 	.word	0x40010400
 800a7fc:	40014000 	.word	0x40014000
 800a800:	40014400 	.word	0x40014400
 800a804:	40014800 	.word	0x40014800
 800a808:	40001800 	.word	0x40001800
 800a80c:	40001c00 	.word	0x40001c00
 800a810:	40002000 	.word	0x40002000

0800a814 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a814:	b480      	push	{r7}
 800a816:	b087      	sub	sp, #28
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6a1b      	ldr	r3, [r3, #32]
 800a824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	f023 0201 	bic.w	r2, r3, #1
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a83e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	011b      	lsls	r3, r3, #4
 800a844:	693a      	ldr	r2, [r7, #16]
 800a846:	4313      	orrs	r3, r2
 800a848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	f023 030a 	bic.w	r3, r3, #10
 800a850:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	4313      	orrs	r3, r2
 800a858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	697a      	ldr	r2, [r7, #20]
 800a864:	621a      	str	r2, [r3, #32]
}
 800a866:	bf00      	nop
 800a868:	371c      	adds	r7, #28
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr

0800a872 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a872:	b480      	push	{r7}
 800a874:	b087      	sub	sp, #28
 800a876:	af00      	add	r7, sp, #0
 800a878:	60f8      	str	r0, [r7, #12]
 800a87a:	60b9      	str	r1, [r7, #8]
 800a87c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6a1b      	ldr	r3, [r3, #32]
 800a888:	f023 0210 	bic.w	r2, r3, #16
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a89c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	031b      	lsls	r3, r3, #12
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a8ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	011b      	lsls	r3, r3, #4
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	693a      	ldr	r2, [r7, #16]
 800a8be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	697a      	ldr	r2, [r7, #20]
 800a8c4:	621a      	str	r2, [r3, #32]
}
 800a8c6:	bf00      	nop
 800a8c8:	371c      	adds	r7, #28
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b085      	sub	sp, #20
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a8ea:	683a      	ldr	r2, [r7, #0]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	f043 0307 	orr.w	r3, r3, #7
 800a8f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	609a      	str	r2, [r3, #8]
}
 800a8fc:	bf00      	nop
 800a8fe:	3714      	adds	r7, #20
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a908:	b480      	push	{r7}
 800a90a:	b087      	sub	sp, #28
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
 800a914:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a922:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	021a      	lsls	r2, r3, #8
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	431a      	orrs	r2, r3
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	4313      	orrs	r3, r2
 800a930:	697a      	ldr	r2, [r7, #20]
 800a932:	4313      	orrs	r3, r2
 800a934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	697a      	ldr	r2, [r7, #20]
 800a93a:	609a      	str	r2, [r3, #8]
}
 800a93c:	bf00      	nop
 800a93e:	371c      	adds	r7, #28
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d101      	bne.n	800a960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a95c:	2302      	movs	r3, #2
 800a95e:	e05a      	b.n	800aa16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2202      	movs	r2, #2
 800a96c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a986:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	4313      	orrs	r3, r2
 800a990:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a21      	ldr	r2, [pc, #132]	@ (800aa24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d022      	beq.n	800a9ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9ac:	d01d      	beq.n	800a9ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a1d      	ldr	r2, [pc, #116]	@ (800aa28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d018      	beq.n	800a9ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a1b      	ldr	r2, [pc, #108]	@ (800aa2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d013      	beq.n	800a9ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a1a      	ldr	r2, [pc, #104]	@ (800aa30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d00e      	beq.n	800a9ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a18      	ldr	r2, [pc, #96]	@ (800aa34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d009      	beq.n	800a9ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a17      	ldr	r2, [pc, #92]	@ (800aa38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d004      	beq.n	800a9ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a15      	ldr	r2, [pc, #84]	@ (800aa3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d10c      	bne.n	800aa04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	68ba      	ldr	r2, [r7, #8]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	40010000 	.word	0x40010000
 800aa28:	40000400 	.word	0x40000400
 800aa2c:	40000800 	.word	0x40000800
 800aa30:	40000c00 	.word	0x40000c00
 800aa34:	40010400 	.word	0x40010400
 800aa38:	40014000 	.word	0x40014000
 800aa3c:	40001800 	.word	0x40001800

0800aa40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa48:	bf00      	nop
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa5c:	bf00      	nop
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	e042      	b.n	800ab00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d106      	bne.n	800aa94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f7fd f9e8 	bl	8007e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2224      	movs	r2, #36	@ 0x24
 800aa98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	68da      	ldr	r2, [r3, #12]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800aaaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fdc7 	bl	800b640 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	691a      	ldr	r2, [r3, #16]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aac0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	695a      	ldr	r2, [r3, #20]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aad0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68da      	ldr	r2, [r3, #12]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aae0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2220      	movs	r2, #32
 800aaec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2220      	movs	r2, #32
 800aaf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b08a      	sub	sp, #40	@ 0x28
 800ab0c:	af02      	add	r7, sp, #8
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	603b      	str	r3, [r7, #0]
 800ab14:	4613      	mov	r3, r2
 800ab16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	2b20      	cmp	r3, #32
 800ab26:	d175      	bne.n	800ac14 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d002      	beq.n	800ab34 <HAL_UART_Transmit+0x2c>
 800ab2e:	88fb      	ldrh	r3, [r7, #6]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d101      	bne.n	800ab38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ab34:	2301      	movs	r3, #1
 800ab36:	e06e      	b.n	800ac16 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2221      	movs	r2, #33	@ 0x21
 800ab42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab46:	f7fd fb27 	bl	8008198 <HAL_GetTick>
 800ab4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	88fa      	ldrh	r2, [r7, #6]
 800ab50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	88fa      	ldrh	r2, [r7, #6]
 800ab56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab60:	d108      	bne.n	800ab74 <HAL_UART_Transmit+0x6c>
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d104      	bne.n	800ab74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	61bb      	str	r3, [r7, #24]
 800ab72:	e003      	b.n	800ab7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ab7c:	e02e      	b.n	800abdc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	2200      	movs	r2, #0
 800ab86:	2180      	movs	r1, #128	@ 0x80
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f000 fb29 	bl	800b1e0 <UART_WaitOnFlagUntilTimeout>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d005      	beq.n	800aba0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2220      	movs	r2, #32
 800ab98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800ab9c:	2303      	movs	r3, #3
 800ab9e:	e03a      	b.n	800ac16 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10b      	bne.n	800abbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	461a      	mov	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	3302      	adds	r3, #2
 800abba:	61bb      	str	r3, [r7, #24]
 800abbc:	e007      	b.n	800abce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	781a      	ldrb	r2, [r3, #0]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	3301      	adds	r3, #1
 800abcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	3b01      	subs	r3, #1
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d1cb      	bne.n	800ab7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	2200      	movs	r2, #0
 800abee:	2140      	movs	r1, #64	@ 0x40
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f000 faf5 	bl	800b1e0 <UART_WaitOnFlagUntilTimeout>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d005      	beq.n	800ac08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2220      	movs	r2, #32
 800ac00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800ac04:	2303      	movs	r3, #3
 800ac06:	e006      	b.n	800ac16 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2220      	movs	r2, #32
 800ac0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800ac10:	2300      	movs	r3, #0
 800ac12:	e000      	b.n	800ac16 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800ac14:	2302      	movs	r3, #2
  }
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3720      	adds	r7, #32
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b084      	sub	sp, #16
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	60f8      	str	r0, [r7, #12]
 800ac26:	60b9      	str	r1, [r7, #8]
 800ac28:	4613      	mov	r3, r2
 800ac2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	2b20      	cmp	r3, #32
 800ac36:	d112      	bne.n	800ac5e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d002      	beq.n	800ac44 <HAL_UART_Receive_IT+0x26>
 800ac3e:	88fb      	ldrh	r3, [r7, #6]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d101      	bne.n	800ac48 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e00b      	b.n	800ac60 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ac4e:	88fb      	ldrh	r3, [r7, #6]
 800ac50:	461a      	mov	r2, r3
 800ac52:	68b9      	ldr	r1, [r7, #8]
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f000 fb1c 	bl	800b292 <UART_Start_Receive_IT>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	e000      	b.n	800ac60 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800ac5e:	2302      	movs	r3, #2
  }
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b0ba      	sub	sp, #232	@ 0xe8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	695b      	ldr	r3, [r3, #20]
 800ac8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ac94:	2300      	movs	r3, #0
 800ac96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ac9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac9e:	f003 030f 	and.w	r3, r3, #15
 800aca2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800aca6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d10f      	bne.n	800acce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800acae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acb2:	f003 0320 	and.w	r3, r3, #32
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d009      	beq.n	800acce <HAL_UART_IRQHandler+0x66>
 800acba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acbe:	f003 0320 	and.w	r3, r3, #32
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d003      	beq.n	800acce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fbfc 	bl	800b4c4 <UART_Receive_IT>
      return;
 800accc:	e25b      	b.n	800b186 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800acce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f000 80de 	beq.w	800ae94 <HAL_UART_IRQHandler+0x22c>
 800acd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800acdc:	f003 0301 	and.w	r3, r3, #1
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d106      	bne.n	800acf2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ace4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ace8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800acec:	2b00      	cmp	r3, #0
 800acee:	f000 80d1 	beq.w	800ae94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800acf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acf6:	f003 0301 	and.w	r3, r3, #1
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00b      	beq.n	800ad16 <HAL_UART_IRQHandler+0xae>
 800acfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d005      	beq.n	800ad16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad0e:	f043 0201 	orr.w	r2, r3, #1
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad1a:	f003 0304 	and.w	r3, r3, #4
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00b      	beq.n	800ad3a <HAL_UART_IRQHandler+0xd2>
 800ad22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad26:	f003 0301 	and.w	r3, r3, #1
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d005      	beq.n	800ad3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad32:	f043 0202 	orr.w	r2, r3, #2
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad3e:	f003 0302 	and.w	r3, r3, #2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00b      	beq.n	800ad5e <HAL_UART_IRQHandler+0xf6>
 800ad46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad4a:	f003 0301 	and.w	r3, r3, #1
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d005      	beq.n	800ad5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad56:	f043 0204 	orr.w	r2, r3, #4
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ad5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad62:	f003 0308 	and.w	r3, r3, #8
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d011      	beq.n	800ad8e <HAL_UART_IRQHandler+0x126>
 800ad6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad6e:	f003 0320 	and.w	r3, r3, #32
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d105      	bne.n	800ad82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ad76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad7a:	f003 0301 	and.w	r3, r3, #1
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d005      	beq.n	800ad8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad86:	f043 0208 	orr.w	r2, r3, #8
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f000 81f2 	beq.w	800b17c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad9c:	f003 0320 	and.w	r3, r3, #32
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d008      	beq.n	800adb6 <HAL_UART_IRQHandler+0x14e>
 800ada4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ada8:	f003 0320 	and.w	r3, r3, #32
 800adac:	2b00      	cmp	r3, #0
 800adae:	d002      	beq.n	800adb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 fb87 	bl	800b4c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	695b      	ldr	r3, [r3, #20]
 800adbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adc0:	2b40      	cmp	r3, #64	@ 0x40
 800adc2:	bf0c      	ite	eq
 800adc4:	2301      	moveq	r3, #1
 800adc6:	2300      	movne	r3, #0
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800add2:	f003 0308 	and.w	r3, r3, #8
 800add6:	2b00      	cmp	r3, #0
 800add8:	d103      	bne.n	800ade2 <HAL_UART_IRQHandler+0x17a>
 800adda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d04f      	beq.n	800ae82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 fa8f 	bl	800b306 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	695b      	ldr	r3, [r3, #20]
 800adee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adf2:	2b40      	cmp	r3, #64	@ 0x40
 800adf4:	d141      	bne.n	800ae7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	3314      	adds	r3, #20
 800adfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ae04:	e853 3f00 	ldrex	r3, [r3]
 800ae08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ae0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ae10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	3314      	adds	r3, #20
 800ae1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ae22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ae26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ae2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ae32:	e841 2300 	strex	r3, r2, [r1]
 800ae36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ae3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1d9      	bne.n	800adf6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d013      	beq.n	800ae72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae4e:	4a7e      	ldr	r2, [pc, #504]	@ (800b048 <HAL_UART_IRQHandler+0x3e0>)
 800ae50:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7fd fdb1 	bl	80089be <HAL_DMA_Abort_IT>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d016      	beq.n	800ae90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae70:	e00e      	b.n	800ae90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 f99e 	bl	800b1b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae78:	e00a      	b.n	800ae90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 f99a 	bl	800b1b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae80:	e006      	b.n	800ae90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 f996 	bl	800b1b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800ae8e:	e175      	b.n	800b17c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae90:	bf00      	nop
    return;
 800ae92:	e173      	b.n	800b17c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	f040 814f 	bne.w	800b13c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ae9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aea2:	f003 0310 	and.w	r3, r3, #16
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 8148 	beq.w	800b13c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aeac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aeb0:	f003 0310 	and.w	r3, r3, #16
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f000 8141 	beq.w	800b13c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aeba:	2300      	movs	r3, #0
 800aebc:	60bb      	str	r3, [r7, #8]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	60bb      	str	r3, [r7, #8]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	60bb      	str	r3, [r7, #8]
 800aece:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	695b      	ldr	r3, [r3, #20]
 800aed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeda:	2b40      	cmp	r3, #64	@ 0x40
 800aedc:	f040 80b6 	bne.w	800b04c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aeec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f000 8145 	beq.w	800b180 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aefa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aefe:	429a      	cmp	r2, r3
 800af00:	f080 813e 	bcs.w	800b180 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800af0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af10:	69db      	ldr	r3, [r3, #28]
 800af12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af16:	f000 8088 	beq.w	800b02a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	330c      	adds	r3, #12
 800af20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800af28:	e853 3f00 	ldrex	r3, [r3]
 800af2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800af30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800af34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	330c      	adds	r3, #12
 800af42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800af46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800af4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800af52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800af56:	e841 2300 	strex	r3, r2, [r1]
 800af5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800af5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800af62:	2b00      	cmp	r3, #0
 800af64:	d1d9      	bne.n	800af1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	3314      	adds	r3, #20
 800af6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af70:	e853 3f00 	ldrex	r3, [r3]
 800af74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800af76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af78:	f023 0301 	bic.w	r3, r3, #1
 800af7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	3314      	adds	r3, #20
 800af86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800af8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800af8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800af92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800af96:	e841 2300 	strex	r3, r2, [r1]
 800af9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800af9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1e1      	bne.n	800af66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	3314      	adds	r3, #20
 800afa8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800afac:	e853 3f00 	ldrex	r3, [r3]
 800afb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800afb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	3314      	adds	r3, #20
 800afc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800afc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800afc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800afcc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800afce:	e841 2300 	strex	r3, r2, [r1]
 800afd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800afd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d1e3      	bne.n	800afa2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2220      	movs	r2, #32
 800afde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	330c      	adds	r3, #12
 800afee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aff2:	e853 3f00 	ldrex	r3, [r3]
 800aff6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aff8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800affa:	f023 0310 	bic.w	r3, r3, #16
 800affe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	330c      	adds	r3, #12
 800b008:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b00c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b00e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b010:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b012:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b014:	e841 2300 	strex	r3, r2, [r1]
 800b018:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b01a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d1e3      	bne.n	800afe8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b024:	4618      	mov	r0, r3
 800b026:	f7fd fc5a 	bl	80088de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2202      	movs	r2, #2
 800b02e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b038:	b29b      	uxth	r3, r3
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	4619      	mov	r1, r3
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 f8c1 	bl	800b1c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b046:	e09b      	b.n	800b180 <HAL_UART_IRQHandler+0x518>
 800b048:	0800b3cd 	.word	0x0800b3cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b054:	b29b      	uxth	r3, r3
 800b056:	1ad3      	subs	r3, r2, r3
 800b058:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b060:	b29b      	uxth	r3, r3
 800b062:	2b00      	cmp	r3, #0
 800b064:	f000 808e 	beq.w	800b184 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f000 8089 	beq.w	800b184 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	330c      	adds	r3, #12
 800b078:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b07c:	e853 3f00 	ldrex	r3, [r3]
 800b080:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b088:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	330c      	adds	r3, #12
 800b092:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b096:	647a      	str	r2, [r7, #68]	@ 0x44
 800b098:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b09c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b09e:	e841 2300 	strex	r3, r2, [r1]
 800b0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b0a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1e3      	bne.n	800b072 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	3314      	adds	r3, #20
 800b0b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b4:	e853 3f00 	ldrex	r3, [r3]
 800b0b8:	623b      	str	r3, [r7, #32]
   return(result);
 800b0ba:	6a3b      	ldr	r3, [r7, #32]
 800b0bc:	f023 0301 	bic.w	r3, r3, #1
 800b0c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	3314      	adds	r3, #20
 800b0ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b0ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800b0d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0d6:	e841 2300 	strex	r3, r2, [r1]
 800b0da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1e3      	bne.n	800b0aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2220      	movs	r2, #32
 800b0e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	330c      	adds	r3, #12
 800b0f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	e853 3f00 	ldrex	r3, [r3]
 800b0fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f023 0310 	bic.w	r3, r3, #16
 800b106:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	330c      	adds	r3, #12
 800b110:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b114:	61fa      	str	r2, [r7, #28]
 800b116:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b118:	69b9      	ldr	r1, [r7, #24]
 800b11a:	69fa      	ldr	r2, [r7, #28]
 800b11c:	e841 2300 	strex	r3, r2, [r1]
 800b120:	617b      	str	r3, [r7, #20]
   return(result);
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1e3      	bne.n	800b0f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2202      	movs	r2, #2
 800b12c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b12e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b132:	4619      	mov	r1, r3
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 f847 	bl	800b1c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b13a:	e023      	b.n	800b184 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b144:	2b00      	cmp	r3, #0
 800b146:	d009      	beq.n	800b15c <HAL_UART_IRQHandler+0x4f4>
 800b148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b14c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b150:	2b00      	cmp	r3, #0
 800b152:	d003      	beq.n	800b15c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f94d 	bl	800b3f4 <UART_Transmit_IT>
    return;
 800b15a:	e014      	b.n	800b186 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b15c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b164:	2b00      	cmp	r3, #0
 800b166:	d00e      	beq.n	800b186 <HAL_UART_IRQHandler+0x51e>
 800b168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b16c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b170:	2b00      	cmp	r3, #0
 800b172:	d008      	beq.n	800b186 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 f98d 	bl	800b494 <UART_EndTransmit_IT>
    return;
 800b17a:	e004      	b.n	800b186 <HAL_UART_IRQHandler+0x51e>
    return;
 800b17c:	bf00      	nop
 800b17e:	e002      	b.n	800b186 <HAL_UART_IRQHandler+0x51e>
      return;
 800b180:	bf00      	nop
 800b182:	e000      	b.n	800b186 <HAL_UART_IRQHandler+0x51e>
      return;
 800b184:	bf00      	nop
  }
}
 800b186:	37e8      	adds	r7, #232	@ 0xe8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b194:	bf00      	nop
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b1a8:	bf00      	nop
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b1bc:	bf00      	nop
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	603b      	str	r3, [r7, #0]
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1f0:	e03b      	b.n	800b26a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1f2:	6a3b      	ldr	r3, [r7, #32]
 800b1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f8:	d037      	beq.n	800b26a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1fa:	f7fc ffcd 	bl	8008198 <HAL_GetTick>
 800b1fe:	4602      	mov	r2, r0
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	6a3a      	ldr	r2, [r7, #32]
 800b206:	429a      	cmp	r2, r3
 800b208:	d302      	bcc.n	800b210 <UART_WaitOnFlagUntilTimeout+0x30>
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d101      	bne.n	800b214 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b210:	2303      	movs	r3, #3
 800b212:	e03a      	b.n	800b28a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	f003 0304 	and.w	r3, r3, #4
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d023      	beq.n	800b26a <UART_WaitOnFlagUntilTimeout+0x8a>
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	2b80      	cmp	r3, #128	@ 0x80
 800b226:	d020      	beq.n	800b26a <UART_WaitOnFlagUntilTimeout+0x8a>
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	2b40      	cmp	r3, #64	@ 0x40
 800b22c:	d01d      	beq.n	800b26a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 0308 	and.w	r3, r3, #8
 800b238:	2b08      	cmp	r3, #8
 800b23a:	d116      	bne.n	800b26a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b23c:	2300      	movs	r3, #0
 800b23e:	617b      	str	r3, [r7, #20]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	617b      	str	r3, [r7, #20]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	617b      	str	r3, [r7, #20]
 800b250:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f000 f857 	bl	800b306 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2208      	movs	r2, #8
 800b25c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2200      	movs	r2, #0
 800b262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	e00f      	b.n	800b28a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	4013      	ands	r3, r2
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	429a      	cmp	r2, r3
 800b278:	bf0c      	ite	eq
 800b27a:	2301      	moveq	r3, #1
 800b27c:	2300      	movne	r3, #0
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	461a      	mov	r2, r3
 800b282:	79fb      	ldrb	r3, [r7, #7]
 800b284:	429a      	cmp	r2, r3
 800b286:	d0b4      	beq.n	800b1f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3718      	adds	r7, #24
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b292:	b480      	push	{r7}
 800b294:	b085      	sub	sp, #20
 800b296:	af00      	add	r7, sp, #0
 800b298:	60f8      	str	r0, [r7, #12]
 800b29a:	60b9      	str	r1, [r7, #8]
 800b29c:	4613      	mov	r3, r2
 800b29e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	88fa      	ldrh	r2, [r7, #6]
 800b2aa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	88fa      	ldrh	r2, [r7, #6]
 800b2b0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2222      	movs	r2, #34	@ 0x22
 800b2bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d007      	beq.n	800b2d8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68da      	ldr	r2, [r3, #12]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b2d6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	695a      	ldr	r2, [r3, #20]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f042 0201 	orr.w	r2, r2, #1
 800b2e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68da      	ldr	r2, [r3, #12]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f042 0220 	orr.w	r2, r2, #32
 800b2f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3714      	adds	r7, #20
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr

0800b306 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b306:	b480      	push	{r7}
 800b308:	b095      	sub	sp, #84	@ 0x54
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	330c      	adds	r3, #12
 800b314:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b318:	e853 3f00 	ldrex	r3, [r3]
 800b31c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b320:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b324:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	330c      	adds	r3, #12
 800b32c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b32e:	643a      	str	r2, [r7, #64]	@ 0x40
 800b330:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b332:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b334:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b336:	e841 2300 	strex	r3, r2, [r1]
 800b33a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1e5      	bne.n	800b30e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	3314      	adds	r3, #20
 800b348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b34a:	6a3b      	ldr	r3, [r7, #32]
 800b34c:	e853 3f00 	ldrex	r3, [r3]
 800b350:	61fb      	str	r3, [r7, #28]
   return(result);
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	f023 0301 	bic.w	r3, r3, #1
 800b358:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	3314      	adds	r3, #20
 800b360:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b362:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b364:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b366:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b368:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b36a:	e841 2300 	strex	r3, r2, [r1]
 800b36e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1e5      	bne.n	800b342 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d119      	bne.n	800b3b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	330c      	adds	r3, #12
 800b384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	e853 3f00 	ldrex	r3, [r3]
 800b38c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	f023 0310 	bic.w	r3, r3, #16
 800b394:	647b      	str	r3, [r7, #68]	@ 0x44
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	330c      	adds	r3, #12
 800b39c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b39e:	61ba      	str	r2, [r7, #24]
 800b3a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a2:	6979      	ldr	r1, [r7, #20]
 800b3a4:	69ba      	ldr	r2, [r7, #24]
 800b3a6:	e841 2300 	strex	r3, r2, [r1]
 800b3aa:	613b      	str	r3, [r7, #16]
   return(result);
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1e5      	bne.n	800b37e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2220      	movs	r2, #32
 800b3b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b3c0:	bf00      	nop
 800b3c2:	3754      	adds	r7, #84	@ 0x54
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	f7ff fee4 	bl	800b1b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3ec:	bf00      	nop
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b402:	b2db      	uxtb	r3, r3
 800b404:	2b21      	cmp	r3, #33	@ 0x21
 800b406:	d13e      	bne.n	800b486 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b410:	d114      	bne.n	800b43c <UART_Transmit_IT+0x48>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	691b      	ldr	r3, [r3, #16]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d110      	bne.n	800b43c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	461a      	mov	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b42e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6a1b      	ldr	r3, [r3, #32]
 800b434:	1c9a      	adds	r2, r3, #2
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	621a      	str	r2, [r3, #32]
 800b43a:	e008      	b.n	800b44e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6a1b      	ldr	r3, [r3, #32]
 800b440:	1c59      	adds	r1, r3, #1
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	6211      	str	r1, [r2, #32]
 800b446:	781a      	ldrb	r2, [r3, #0]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b452:	b29b      	uxth	r3, r3
 800b454:	3b01      	subs	r3, #1
 800b456:	b29b      	uxth	r3, r3
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	4619      	mov	r1, r3
 800b45c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d10f      	bne.n	800b482 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	68da      	ldr	r2, [r3, #12]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b470:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68da      	ldr	r2, [r3, #12]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b480:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b482:	2300      	movs	r3, #0
 800b484:	e000      	b.n	800b488 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b486:	2302      	movs	r3, #2
  }
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	68da      	ldr	r2, [r3, #12]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b4aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2220      	movs	r2, #32
 800b4b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f7ff fe69 	bl	800b18c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3708      	adds	r7, #8
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b08c      	sub	sp, #48	@ 0x30
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	2b22      	cmp	r3, #34	@ 0x22
 800b4d6:	f040 80ae 	bne.w	800b636 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4e2:	d117      	bne.n	800b514 <UART_Receive_IT+0x50>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	691b      	ldr	r3, [r3, #16]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d113      	bne.n	800b514 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b502:	b29a      	uxth	r2, r3
 800b504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b506:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b50c:	1c9a      	adds	r2, r3, #2
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	629a      	str	r2, [r3, #40]	@ 0x28
 800b512:	e026      	b.n	800b562 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b518:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800b51a:	2300      	movs	r3, #0
 800b51c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b526:	d007      	beq.n	800b538 <UART_Receive_IT+0x74>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d10a      	bne.n	800b546 <UART_Receive_IT+0x82>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d106      	bne.n	800b546 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b542:	701a      	strb	r2, [r3, #0]
 800b544:	e008      	b.n	800b558 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b552:	b2da      	uxtb	r2, r3
 800b554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b556:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b55c:	1c5a      	adds	r2, r3, #1
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b566:	b29b      	uxth	r3, r3
 800b568:	3b01      	subs	r3, #1
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	4619      	mov	r1, r3
 800b570:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b572:	2b00      	cmp	r3, #0
 800b574:	d15d      	bne.n	800b632 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	68da      	ldr	r2, [r3, #12]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f022 0220 	bic.w	r2, r2, #32
 800b584:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68da      	ldr	r2, [r3, #12]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b594:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	695a      	ldr	r2, [r3, #20]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f022 0201 	bic.w	r2, r2, #1
 800b5a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2220      	movs	r2, #32
 800b5aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d135      	bne.n	800b628 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	330c      	adds	r3, #12
 800b5c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	e853 3f00 	ldrex	r3, [r3]
 800b5d0:	613b      	str	r3, [r7, #16]
   return(result);
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	f023 0310 	bic.w	r3, r3, #16
 800b5d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	330c      	adds	r3, #12
 800b5e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5e2:	623a      	str	r2, [r7, #32]
 800b5e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e6:	69f9      	ldr	r1, [r7, #28]
 800b5e8:	6a3a      	ldr	r2, [r7, #32]
 800b5ea:	e841 2300 	strex	r3, r2, [r1]
 800b5ee:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d1e5      	bne.n	800b5c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f003 0310 	and.w	r3, r3, #16
 800b600:	2b10      	cmp	r3, #16
 800b602:	d10a      	bne.n	800b61a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b604:	2300      	movs	r3, #0
 800b606:	60fb      	str	r3, [r7, #12]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	60fb      	str	r3, [r7, #12]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	60fb      	str	r3, [r7, #12]
 800b618:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b61e:	4619      	mov	r1, r3
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f7ff fdd1 	bl	800b1c8 <HAL_UARTEx_RxEventCallback>
 800b626:	e002      	b.n	800b62e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f7ff fdb9 	bl	800b1a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b62e:	2300      	movs	r3, #0
 800b630:	e002      	b.n	800b638 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b632:	2300      	movs	r3, #0
 800b634:	e000      	b.n	800b638 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b636:	2302      	movs	r3, #2
  }
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3730      	adds	r7, #48	@ 0x30
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b644:	b0c0      	sub	sp, #256	@ 0x100
 800b646:	af00      	add	r7, sp, #0
 800b648:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b64c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b65c:	68d9      	ldr	r1, [r3, #12]
 800b65e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	ea40 0301 	orr.w	r3, r0, r1
 800b668:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b66a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b66e:	689a      	ldr	r2, [r3, #8]
 800b670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	431a      	orrs	r2, r3
 800b678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b67c:	695b      	ldr	r3, [r3, #20]
 800b67e:	431a      	orrs	r2, r3
 800b680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b684:	69db      	ldr	r3, [r3, #28]
 800b686:	4313      	orrs	r3, r2
 800b688:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b68c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b698:	f021 010c 	bic.w	r1, r1, #12
 800b69c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b6a6:	430b      	orrs	r3, r1
 800b6a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b6aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	695b      	ldr	r3, [r3, #20]
 800b6b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b6b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6ba:	6999      	ldr	r1, [r3, #24]
 800b6bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	ea40 0301 	orr.w	r3, r0, r1
 800b6c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b6c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	4b8f      	ldr	r3, [pc, #572]	@ (800b90c <UART_SetConfig+0x2cc>)
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d005      	beq.n	800b6e0 <UART_SetConfig+0xa0>
 800b6d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	4b8d      	ldr	r3, [pc, #564]	@ (800b910 <UART_SetConfig+0x2d0>)
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d104      	bne.n	800b6ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b6e0:	f7fe f940 	bl	8009964 <HAL_RCC_GetPCLK2Freq>
 800b6e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b6e8:	e003      	b.n	800b6f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b6ea:	f7fe f927 	bl	800993c <HAL_RCC_GetPCLK1Freq>
 800b6ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6f6:	69db      	ldr	r3, [r3, #28]
 800b6f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b6fc:	f040 810c 	bne.w	800b918 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b704:	2200      	movs	r2, #0
 800b706:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b70a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b70e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b712:	4622      	mov	r2, r4
 800b714:	462b      	mov	r3, r5
 800b716:	1891      	adds	r1, r2, r2
 800b718:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b71a:	415b      	adcs	r3, r3
 800b71c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b71e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b722:	4621      	mov	r1, r4
 800b724:	eb12 0801 	adds.w	r8, r2, r1
 800b728:	4629      	mov	r1, r5
 800b72a:	eb43 0901 	adc.w	r9, r3, r1
 800b72e:	f04f 0200 	mov.w	r2, #0
 800b732:	f04f 0300 	mov.w	r3, #0
 800b736:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b73a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b73e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b742:	4690      	mov	r8, r2
 800b744:	4699      	mov	r9, r3
 800b746:	4623      	mov	r3, r4
 800b748:	eb18 0303 	adds.w	r3, r8, r3
 800b74c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b750:	462b      	mov	r3, r5
 800b752:	eb49 0303 	adc.w	r3, r9, r3
 800b756:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b75a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b766:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b76a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b76e:	460b      	mov	r3, r1
 800b770:	18db      	adds	r3, r3, r3
 800b772:	653b      	str	r3, [r7, #80]	@ 0x50
 800b774:	4613      	mov	r3, r2
 800b776:	eb42 0303 	adc.w	r3, r2, r3
 800b77a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b77c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b780:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b784:	f7f5 fa08 	bl	8000b98 <__aeabi_uldivmod>
 800b788:	4602      	mov	r2, r0
 800b78a:	460b      	mov	r3, r1
 800b78c:	4b61      	ldr	r3, [pc, #388]	@ (800b914 <UART_SetConfig+0x2d4>)
 800b78e:	fba3 2302 	umull	r2, r3, r3, r2
 800b792:	095b      	lsrs	r3, r3, #5
 800b794:	011c      	lsls	r4, r3, #4
 800b796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b79a:	2200      	movs	r2, #0
 800b79c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b7a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b7a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b7a8:	4642      	mov	r2, r8
 800b7aa:	464b      	mov	r3, r9
 800b7ac:	1891      	adds	r1, r2, r2
 800b7ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b7b0:	415b      	adcs	r3, r3
 800b7b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b7b8:	4641      	mov	r1, r8
 800b7ba:	eb12 0a01 	adds.w	sl, r2, r1
 800b7be:	4649      	mov	r1, r9
 800b7c0:	eb43 0b01 	adc.w	fp, r3, r1
 800b7c4:	f04f 0200 	mov.w	r2, #0
 800b7c8:	f04f 0300 	mov.w	r3, #0
 800b7cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b7d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b7d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b7d8:	4692      	mov	sl, r2
 800b7da:	469b      	mov	fp, r3
 800b7dc:	4643      	mov	r3, r8
 800b7de:	eb1a 0303 	adds.w	r3, sl, r3
 800b7e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b7e6:	464b      	mov	r3, r9
 800b7e8:	eb4b 0303 	adc.w	r3, fp, r3
 800b7ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b7f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b7fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b800:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b804:	460b      	mov	r3, r1
 800b806:	18db      	adds	r3, r3, r3
 800b808:	643b      	str	r3, [r7, #64]	@ 0x40
 800b80a:	4613      	mov	r3, r2
 800b80c:	eb42 0303 	adc.w	r3, r2, r3
 800b810:	647b      	str	r3, [r7, #68]	@ 0x44
 800b812:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b816:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b81a:	f7f5 f9bd 	bl	8000b98 <__aeabi_uldivmod>
 800b81e:	4602      	mov	r2, r0
 800b820:	460b      	mov	r3, r1
 800b822:	4611      	mov	r1, r2
 800b824:	4b3b      	ldr	r3, [pc, #236]	@ (800b914 <UART_SetConfig+0x2d4>)
 800b826:	fba3 2301 	umull	r2, r3, r3, r1
 800b82a:	095b      	lsrs	r3, r3, #5
 800b82c:	2264      	movs	r2, #100	@ 0x64
 800b82e:	fb02 f303 	mul.w	r3, r2, r3
 800b832:	1acb      	subs	r3, r1, r3
 800b834:	00db      	lsls	r3, r3, #3
 800b836:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b83a:	4b36      	ldr	r3, [pc, #216]	@ (800b914 <UART_SetConfig+0x2d4>)
 800b83c:	fba3 2302 	umull	r2, r3, r3, r2
 800b840:	095b      	lsrs	r3, r3, #5
 800b842:	005b      	lsls	r3, r3, #1
 800b844:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b848:	441c      	add	r4, r3
 800b84a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b84e:	2200      	movs	r2, #0
 800b850:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b854:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b858:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b85c:	4642      	mov	r2, r8
 800b85e:	464b      	mov	r3, r9
 800b860:	1891      	adds	r1, r2, r2
 800b862:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b864:	415b      	adcs	r3, r3
 800b866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b868:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b86c:	4641      	mov	r1, r8
 800b86e:	1851      	adds	r1, r2, r1
 800b870:	6339      	str	r1, [r7, #48]	@ 0x30
 800b872:	4649      	mov	r1, r9
 800b874:	414b      	adcs	r3, r1
 800b876:	637b      	str	r3, [r7, #52]	@ 0x34
 800b878:	f04f 0200 	mov.w	r2, #0
 800b87c:	f04f 0300 	mov.w	r3, #0
 800b880:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b884:	4659      	mov	r1, fp
 800b886:	00cb      	lsls	r3, r1, #3
 800b888:	4651      	mov	r1, sl
 800b88a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b88e:	4651      	mov	r1, sl
 800b890:	00ca      	lsls	r2, r1, #3
 800b892:	4610      	mov	r0, r2
 800b894:	4619      	mov	r1, r3
 800b896:	4603      	mov	r3, r0
 800b898:	4642      	mov	r2, r8
 800b89a:	189b      	adds	r3, r3, r2
 800b89c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b8a0:	464b      	mov	r3, r9
 800b8a2:	460a      	mov	r2, r1
 800b8a4:	eb42 0303 	adc.w	r3, r2, r3
 800b8a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b8ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b8b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b8bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	18db      	adds	r3, r3, r3
 800b8c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	eb42 0303 	adc.w	r3, r2, r3
 800b8cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b8ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b8d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b8d6:	f7f5 f95f 	bl	8000b98 <__aeabi_uldivmod>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	460b      	mov	r3, r1
 800b8de:	4b0d      	ldr	r3, [pc, #52]	@ (800b914 <UART_SetConfig+0x2d4>)
 800b8e0:	fba3 1302 	umull	r1, r3, r3, r2
 800b8e4:	095b      	lsrs	r3, r3, #5
 800b8e6:	2164      	movs	r1, #100	@ 0x64
 800b8e8:	fb01 f303 	mul.w	r3, r1, r3
 800b8ec:	1ad3      	subs	r3, r2, r3
 800b8ee:	00db      	lsls	r3, r3, #3
 800b8f0:	3332      	adds	r3, #50	@ 0x32
 800b8f2:	4a08      	ldr	r2, [pc, #32]	@ (800b914 <UART_SetConfig+0x2d4>)
 800b8f4:	fba2 2303 	umull	r2, r3, r2, r3
 800b8f8:	095b      	lsrs	r3, r3, #5
 800b8fa:	f003 0207 	and.w	r2, r3, #7
 800b8fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4422      	add	r2, r4
 800b906:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b908:	e106      	b.n	800bb18 <UART_SetConfig+0x4d8>
 800b90a:	bf00      	nop
 800b90c:	40011000 	.word	0x40011000
 800b910:	40011400 	.word	0x40011400
 800b914:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b91c:	2200      	movs	r2, #0
 800b91e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b922:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b926:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b92a:	4642      	mov	r2, r8
 800b92c:	464b      	mov	r3, r9
 800b92e:	1891      	adds	r1, r2, r2
 800b930:	6239      	str	r1, [r7, #32]
 800b932:	415b      	adcs	r3, r3
 800b934:	627b      	str	r3, [r7, #36]	@ 0x24
 800b936:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b93a:	4641      	mov	r1, r8
 800b93c:	1854      	adds	r4, r2, r1
 800b93e:	4649      	mov	r1, r9
 800b940:	eb43 0501 	adc.w	r5, r3, r1
 800b944:	f04f 0200 	mov.w	r2, #0
 800b948:	f04f 0300 	mov.w	r3, #0
 800b94c:	00eb      	lsls	r3, r5, #3
 800b94e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b952:	00e2      	lsls	r2, r4, #3
 800b954:	4614      	mov	r4, r2
 800b956:	461d      	mov	r5, r3
 800b958:	4643      	mov	r3, r8
 800b95a:	18e3      	adds	r3, r4, r3
 800b95c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b960:	464b      	mov	r3, r9
 800b962:	eb45 0303 	adc.w	r3, r5, r3
 800b966:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b96a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b976:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b97a:	f04f 0200 	mov.w	r2, #0
 800b97e:	f04f 0300 	mov.w	r3, #0
 800b982:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b986:	4629      	mov	r1, r5
 800b988:	008b      	lsls	r3, r1, #2
 800b98a:	4621      	mov	r1, r4
 800b98c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b990:	4621      	mov	r1, r4
 800b992:	008a      	lsls	r2, r1, #2
 800b994:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b998:	f7f5 f8fe 	bl	8000b98 <__aeabi_uldivmod>
 800b99c:	4602      	mov	r2, r0
 800b99e:	460b      	mov	r3, r1
 800b9a0:	4b60      	ldr	r3, [pc, #384]	@ (800bb24 <UART_SetConfig+0x4e4>)
 800b9a2:	fba3 2302 	umull	r2, r3, r3, r2
 800b9a6:	095b      	lsrs	r3, r3, #5
 800b9a8:	011c      	lsls	r4, r3, #4
 800b9aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b9b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b9b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b9bc:	4642      	mov	r2, r8
 800b9be:	464b      	mov	r3, r9
 800b9c0:	1891      	adds	r1, r2, r2
 800b9c2:	61b9      	str	r1, [r7, #24]
 800b9c4:	415b      	adcs	r3, r3
 800b9c6:	61fb      	str	r3, [r7, #28]
 800b9c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b9cc:	4641      	mov	r1, r8
 800b9ce:	1851      	adds	r1, r2, r1
 800b9d0:	6139      	str	r1, [r7, #16]
 800b9d2:	4649      	mov	r1, r9
 800b9d4:	414b      	adcs	r3, r1
 800b9d6:	617b      	str	r3, [r7, #20]
 800b9d8:	f04f 0200 	mov.w	r2, #0
 800b9dc:	f04f 0300 	mov.w	r3, #0
 800b9e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b9e4:	4659      	mov	r1, fp
 800b9e6:	00cb      	lsls	r3, r1, #3
 800b9e8:	4651      	mov	r1, sl
 800b9ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b9ee:	4651      	mov	r1, sl
 800b9f0:	00ca      	lsls	r2, r1, #3
 800b9f2:	4610      	mov	r0, r2
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	4642      	mov	r2, r8
 800b9fa:	189b      	adds	r3, r3, r2
 800b9fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ba00:	464b      	mov	r3, r9
 800ba02:	460a      	mov	r2, r1
 800ba04:	eb42 0303 	adc.w	r3, r2, r3
 800ba08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ba0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ba16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ba18:	f04f 0200 	mov.w	r2, #0
 800ba1c:	f04f 0300 	mov.w	r3, #0
 800ba20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ba24:	4649      	mov	r1, r9
 800ba26:	008b      	lsls	r3, r1, #2
 800ba28:	4641      	mov	r1, r8
 800ba2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba2e:	4641      	mov	r1, r8
 800ba30:	008a      	lsls	r2, r1, #2
 800ba32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ba36:	f7f5 f8af 	bl	8000b98 <__aeabi_uldivmod>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	4611      	mov	r1, r2
 800ba40:	4b38      	ldr	r3, [pc, #224]	@ (800bb24 <UART_SetConfig+0x4e4>)
 800ba42:	fba3 2301 	umull	r2, r3, r3, r1
 800ba46:	095b      	lsrs	r3, r3, #5
 800ba48:	2264      	movs	r2, #100	@ 0x64
 800ba4a:	fb02 f303 	mul.w	r3, r2, r3
 800ba4e:	1acb      	subs	r3, r1, r3
 800ba50:	011b      	lsls	r3, r3, #4
 800ba52:	3332      	adds	r3, #50	@ 0x32
 800ba54:	4a33      	ldr	r2, [pc, #204]	@ (800bb24 <UART_SetConfig+0x4e4>)
 800ba56:	fba2 2303 	umull	r2, r3, r2, r3
 800ba5a:	095b      	lsrs	r3, r3, #5
 800ba5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ba60:	441c      	add	r4, r3
 800ba62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ba66:	2200      	movs	r2, #0
 800ba68:	673b      	str	r3, [r7, #112]	@ 0x70
 800ba6a:	677a      	str	r2, [r7, #116]	@ 0x74
 800ba6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ba70:	4642      	mov	r2, r8
 800ba72:	464b      	mov	r3, r9
 800ba74:	1891      	adds	r1, r2, r2
 800ba76:	60b9      	str	r1, [r7, #8]
 800ba78:	415b      	adcs	r3, r3
 800ba7a:	60fb      	str	r3, [r7, #12]
 800ba7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba80:	4641      	mov	r1, r8
 800ba82:	1851      	adds	r1, r2, r1
 800ba84:	6039      	str	r1, [r7, #0]
 800ba86:	4649      	mov	r1, r9
 800ba88:	414b      	adcs	r3, r1
 800ba8a:	607b      	str	r3, [r7, #4]
 800ba8c:	f04f 0200 	mov.w	r2, #0
 800ba90:	f04f 0300 	mov.w	r3, #0
 800ba94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ba98:	4659      	mov	r1, fp
 800ba9a:	00cb      	lsls	r3, r1, #3
 800ba9c:	4651      	mov	r1, sl
 800ba9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800baa2:	4651      	mov	r1, sl
 800baa4:	00ca      	lsls	r2, r1, #3
 800baa6:	4610      	mov	r0, r2
 800baa8:	4619      	mov	r1, r3
 800baaa:	4603      	mov	r3, r0
 800baac:	4642      	mov	r2, r8
 800baae:	189b      	adds	r3, r3, r2
 800bab0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bab2:	464b      	mov	r3, r9
 800bab4:	460a      	mov	r2, r1
 800bab6:	eb42 0303 	adc.w	r3, r2, r3
 800baba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800babc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	663b      	str	r3, [r7, #96]	@ 0x60
 800bac6:	667a      	str	r2, [r7, #100]	@ 0x64
 800bac8:	f04f 0200 	mov.w	r2, #0
 800bacc:	f04f 0300 	mov.w	r3, #0
 800bad0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bad4:	4649      	mov	r1, r9
 800bad6:	008b      	lsls	r3, r1, #2
 800bad8:	4641      	mov	r1, r8
 800bada:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bade:	4641      	mov	r1, r8
 800bae0:	008a      	lsls	r2, r1, #2
 800bae2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bae6:	f7f5 f857 	bl	8000b98 <__aeabi_uldivmod>
 800baea:	4602      	mov	r2, r0
 800baec:	460b      	mov	r3, r1
 800baee:	4b0d      	ldr	r3, [pc, #52]	@ (800bb24 <UART_SetConfig+0x4e4>)
 800baf0:	fba3 1302 	umull	r1, r3, r3, r2
 800baf4:	095b      	lsrs	r3, r3, #5
 800baf6:	2164      	movs	r1, #100	@ 0x64
 800baf8:	fb01 f303 	mul.w	r3, r1, r3
 800bafc:	1ad3      	subs	r3, r2, r3
 800bafe:	011b      	lsls	r3, r3, #4
 800bb00:	3332      	adds	r3, #50	@ 0x32
 800bb02:	4a08      	ldr	r2, [pc, #32]	@ (800bb24 <UART_SetConfig+0x4e4>)
 800bb04:	fba2 2303 	umull	r2, r3, r2, r3
 800bb08:	095b      	lsrs	r3, r3, #5
 800bb0a:	f003 020f 	and.w	r2, r3, #15
 800bb0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4422      	add	r2, r4
 800bb16:	609a      	str	r2, [r3, #8]
}
 800bb18:	bf00      	nop
 800bb1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb24:	51eb851f 	.word	0x51eb851f

0800bb28 <atoi>:
 800bb28:	220a      	movs	r2, #10
 800bb2a:	2100      	movs	r1, #0
 800bb2c:	f000 b8e6 	b.w	800bcfc <strtol>

0800bb30 <srand>:
 800bb30:	b538      	push	{r3, r4, r5, lr}
 800bb32:	4b10      	ldr	r3, [pc, #64]	@ (800bb74 <srand+0x44>)
 800bb34:	681d      	ldr	r5, [r3, #0]
 800bb36:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800bb38:	4604      	mov	r4, r0
 800bb3a:	b9b3      	cbnz	r3, 800bb6a <srand+0x3a>
 800bb3c:	2018      	movs	r0, #24
 800bb3e:	f000 fb99 	bl	800c274 <malloc>
 800bb42:	4602      	mov	r2, r0
 800bb44:	6328      	str	r0, [r5, #48]	@ 0x30
 800bb46:	b920      	cbnz	r0, 800bb52 <srand+0x22>
 800bb48:	4b0b      	ldr	r3, [pc, #44]	@ (800bb78 <srand+0x48>)
 800bb4a:	480c      	ldr	r0, [pc, #48]	@ (800bb7c <srand+0x4c>)
 800bb4c:	2146      	movs	r1, #70	@ 0x46
 800bb4e:	f000 fb29 	bl	800c1a4 <__assert_func>
 800bb52:	490b      	ldr	r1, [pc, #44]	@ (800bb80 <srand+0x50>)
 800bb54:	4b0b      	ldr	r3, [pc, #44]	@ (800bb84 <srand+0x54>)
 800bb56:	e9c0 1300 	strd	r1, r3, [r0]
 800bb5a:	4b0b      	ldr	r3, [pc, #44]	@ (800bb88 <srand+0x58>)
 800bb5c:	6083      	str	r3, [r0, #8]
 800bb5e:	230b      	movs	r3, #11
 800bb60:	8183      	strh	r3, [r0, #12]
 800bb62:	2100      	movs	r1, #0
 800bb64:	2001      	movs	r0, #1
 800bb66:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800bb6a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	611c      	str	r4, [r3, #16]
 800bb70:	615a      	str	r2, [r3, #20]
 800bb72:	bd38      	pop	{r3, r4, r5, pc}
 800bb74:	20000034 	.word	0x20000034
 800bb78:	0800e79c 	.word	0x0800e79c
 800bb7c:	0800e7b3 	.word	0x0800e7b3
 800bb80:	abcd330e 	.word	0xabcd330e
 800bb84:	e66d1234 	.word	0xe66d1234
 800bb88:	0005deec 	.word	0x0005deec

0800bb8c <rand>:
 800bb8c:	4b16      	ldr	r3, [pc, #88]	@ (800bbe8 <rand+0x5c>)
 800bb8e:	b510      	push	{r4, lr}
 800bb90:	681c      	ldr	r4, [r3, #0]
 800bb92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800bb94:	b9b3      	cbnz	r3, 800bbc4 <rand+0x38>
 800bb96:	2018      	movs	r0, #24
 800bb98:	f000 fb6c 	bl	800c274 <malloc>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	6320      	str	r0, [r4, #48]	@ 0x30
 800bba0:	b920      	cbnz	r0, 800bbac <rand+0x20>
 800bba2:	4b12      	ldr	r3, [pc, #72]	@ (800bbec <rand+0x60>)
 800bba4:	4812      	ldr	r0, [pc, #72]	@ (800bbf0 <rand+0x64>)
 800bba6:	2152      	movs	r1, #82	@ 0x52
 800bba8:	f000 fafc 	bl	800c1a4 <__assert_func>
 800bbac:	4911      	ldr	r1, [pc, #68]	@ (800bbf4 <rand+0x68>)
 800bbae:	4b12      	ldr	r3, [pc, #72]	@ (800bbf8 <rand+0x6c>)
 800bbb0:	e9c0 1300 	strd	r1, r3, [r0]
 800bbb4:	4b11      	ldr	r3, [pc, #68]	@ (800bbfc <rand+0x70>)
 800bbb6:	6083      	str	r3, [r0, #8]
 800bbb8:	230b      	movs	r3, #11
 800bbba:	8183      	strh	r3, [r0, #12]
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	2001      	movs	r0, #1
 800bbc0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800bbc4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bbc6:	480e      	ldr	r0, [pc, #56]	@ (800bc00 <rand+0x74>)
 800bbc8:	690b      	ldr	r3, [r1, #16]
 800bbca:	694c      	ldr	r4, [r1, #20]
 800bbcc:	4a0d      	ldr	r2, [pc, #52]	@ (800bc04 <rand+0x78>)
 800bbce:	4358      	muls	r0, r3
 800bbd0:	fb02 0004 	mla	r0, r2, r4, r0
 800bbd4:	fba3 3202 	umull	r3, r2, r3, r2
 800bbd8:	3301      	adds	r3, #1
 800bbda:	eb40 0002 	adc.w	r0, r0, r2
 800bbde:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800bbe2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800bbe6:	bd10      	pop	{r4, pc}
 800bbe8:	20000034 	.word	0x20000034
 800bbec:	0800e79c 	.word	0x0800e79c
 800bbf0:	0800e7b3 	.word	0x0800e7b3
 800bbf4:	abcd330e 	.word	0xabcd330e
 800bbf8:	e66d1234 	.word	0xe66d1234
 800bbfc:	0005deec 	.word	0x0005deec
 800bc00:	5851f42d 	.word	0x5851f42d
 800bc04:	4c957f2d 	.word	0x4c957f2d

0800bc08 <_strtol_l.constprop.0>:
 800bc08:	2b24      	cmp	r3, #36	@ 0x24
 800bc0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc0e:	4686      	mov	lr, r0
 800bc10:	4690      	mov	r8, r2
 800bc12:	d801      	bhi.n	800bc18 <_strtol_l.constprop.0+0x10>
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d106      	bne.n	800bc26 <_strtol_l.constprop.0+0x1e>
 800bc18:	f000 fa8e 	bl	800c138 <__errno>
 800bc1c:	2316      	movs	r3, #22
 800bc1e:	6003      	str	r3, [r0, #0]
 800bc20:	2000      	movs	r0, #0
 800bc22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc26:	4834      	ldr	r0, [pc, #208]	@ (800bcf8 <_strtol_l.constprop.0+0xf0>)
 800bc28:	460d      	mov	r5, r1
 800bc2a:	462a      	mov	r2, r5
 800bc2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc30:	5d06      	ldrb	r6, [r0, r4]
 800bc32:	f016 0608 	ands.w	r6, r6, #8
 800bc36:	d1f8      	bne.n	800bc2a <_strtol_l.constprop.0+0x22>
 800bc38:	2c2d      	cmp	r4, #45	@ 0x2d
 800bc3a:	d12d      	bne.n	800bc98 <_strtol_l.constprop.0+0x90>
 800bc3c:	782c      	ldrb	r4, [r5, #0]
 800bc3e:	2601      	movs	r6, #1
 800bc40:	1c95      	adds	r5, r2, #2
 800bc42:	f033 0210 	bics.w	r2, r3, #16
 800bc46:	d109      	bne.n	800bc5c <_strtol_l.constprop.0+0x54>
 800bc48:	2c30      	cmp	r4, #48	@ 0x30
 800bc4a:	d12a      	bne.n	800bca2 <_strtol_l.constprop.0+0x9a>
 800bc4c:	782a      	ldrb	r2, [r5, #0]
 800bc4e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bc52:	2a58      	cmp	r2, #88	@ 0x58
 800bc54:	d125      	bne.n	800bca2 <_strtol_l.constprop.0+0x9a>
 800bc56:	786c      	ldrb	r4, [r5, #1]
 800bc58:	2310      	movs	r3, #16
 800bc5a:	3502      	adds	r5, #2
 800bc5c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bc60:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bc64:	2200      	movs	r2, #0
 800bc66:	fbbc f9f3 	udiv	r9, ip, r3
 800bc6a:	4610      	mov	r0, r2
 800bc6c:	fb03 ca19 	mls	sl, r3, r9, ip
 800bc70:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bc74:	2f09      	cmp	r7, #9
 800bc76:	d81b      	bhi.n	800bcb0 <_strtol_l.constprop.0+0xa8>
 800bc78:	463c      	mov	r4, r7
 800bc7a:	42a3      	cmp	r3, r4
 800bc7c:	dd27      	ble.n	800bcce <_strtol_l.constprop.0+0xc6>
 800bc7e:	1c57      	adds	r7, r2, #1
 800bc80:	d007      	beq.n	800bc92 <_strtol_l.constprop.0+0x8a>
 800bc82:	4581      	cmp	r9, r0
 800bc84:	d320      	bcc.n	800bcc8 <_strtol_l.constprop.0+0xc0>
 800bc86:	d101      	bne.n	800bc8c <_strtol_l.constprop.0+0x84>
 800bc88:	45a2      	cmp	sl, r4
 800bc8a:	db1d      	blt.n	800bcc8 <_strtol_l.constprop.0+0xc0>
 800bc8c:	fb00 4003 	mla	r0, r0, r3, r4
 800bc90:	2201      	movs	r2, #1
 800bc92:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc96:	e7eb      	b.n	800bc70 <_strtol_l.constprop.0+0x68>
 800bc98:	2c2b      	cmp	r4, #43	@ 0x2b
 800bc9a:	bf04      	itt	eq
 800bc9c:	782c      	ldrbeq	r4, [r5, #0]
 800bc9e:	1c95      	addeq	r5, r2, #2
 800bca0:	e7cf      	b.n	800bc42 <_strtol_l.constprop.0+0x3a>
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d1da      	bne.n	800bc5c <_strtol_l.constprop.0+0x54>
 800bca6:	2c30      	cmp	r4, #48	@ 0x30
 800bca8:	bf0c      	ite	eq
 800bcaa:	2308      	moveq	r3, #8
 800bcac:	230a      	movne	r3, #10
 800bcae:	e7d5      	b.n	800bc5c <_strtol_l.constprop.0+0x54>
 800bcb0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bcb4:	2f19      	cmp	r7, #25
 800bcb6:	d801      	bhi.n	800bcbc <_strtol_l.constprop.0+0xb4>
 800bcb8:	3c37      	subs	r4, #55	@ 0x37
 800bcba:	e7de      	b.n	800bc7a <_strtol_l.constprop.0+0x72>
 800bcbc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bcc0:	2f19      	cmp	r7, #25
 800bcc2:	d804      	bhi.n	800bcce <_strtol_l.constprop.0+0xc6>
 800bcc4:	3c57      	subs	r4, #87	@ 0x57
 800bcc6:	e7d8      	b.n	800bc7a <_strtol_l.constprop.0+0x72>
 800bcc8:	f04f 32ff 	mov.w	r2, #4294967295
 800bccc:	e7e1      	b.n	800bc92 <_strtol_l.constprop.0+0x8a>
 800bcce:	1c53      	adds	r3, r2, #1
 800bcd0:	d108      	bne.n	800bce4 <_strtol_l.constprop.0+0xdc>
 800bcd2:	2322      	movs	r3, #34	@ 0x22
 800bcd4:	f8ce 3000 	str.w	r3, [lr]
 800bcd8:	4660      	mov	r0, ip
 800bcda:	f1b8 0f00 	cmp.w	r8, #0
 800bcde:	d0a0      	beq.n	800bc22 <_strtol_l.constprop.0+0x1a>
 800bce0:	1e69      	subs	r1, r5, #1
 800bce2:	e006      	b.n	800bcf2 <_strtol_l.constprop.0+0xea>
 800bce4:	b106      	cbz	r6, 800bce8 <_strtol_l.constprop.0+0xe0>
 800bce6:	4240      	negs	r0, r0
 800bce8:	f1b8 0f00 	cmp.w	r8, #0
 800bcec:	d099      	beq.n	800bc22 <_strtol_l.constprop.0+0x1a>
 800bcee:	2a00      	cmp	r2, #0
 800bcf0:	d1f6      	bne.n	800bce0 <_strtol_l.constprop.0+0xd8>
 800bcf2:	f8c8 1000 	str.w	r1, [r8]
 800bcf6:	e794      	b.n	800bc22 <_strtol_l.constprop.0+0x1a>
 800bcf8:	0800e80c 	.word	0x0800e80c

0800bcfc <strtol>:
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	460a      	mov	r2, r1
 800bd00:	4601      	mov	r1, r0
 800bd02:	4802      	ldr	r0, [pc, #8]	@ (800bd0c <strtol+0x10>)
 800bd04:	6800      	ldr	r0, [r0, #0]
 800bd06:	f7ff bf7f 	b.w	800bc08 <_strtol_l.constprop.0>
 800bd0a:	bf00      	nop
 800bd0c:	20000034 	.word	0x20000034

0800bd10 <std>:
 800bd10:	2300      	movs	r3, #0
 800bd12:	b510      	push	{r4, lr}
 800bd14:	4604      	mov	r4, r0
 800bd16:	e9c0 3300 	strd	r3, r3, [r0]
 800bd1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd1e:	6083      	str	r3, [r0, #8]
 800bd20:	8181      	strh	r1, [r0, #12]
 800bd22:	6643      	str	r3, [r0, #100]	@ 0x64
 800bd24:	81c2      	strh	r2, [r0, #14]
 800bd26:	6183      	str	r3, [r0, #24]
 800bd28:	4619      	mov	r1, r3
 800bd2a:	2208      	movs	r2, #8
 800bd2c:	305c      	adds	r0, #92	@ 0x5c
 800bd2e:	f000 f914 	bl	800bf5a <memset>
 800bd32:	4b0d      	ldr	r3, [pc, #52]	@ (800bd68 <std+0x58>)
 800bd34:	6263      	str	r3, [r4, #36]	@ 0x24
 800bd36:	4b0d      	ldr	r3, [pc, #52]	@ (800bd6c <std+0x5c>)
 800bd38:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bd3a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd70 <std+0x60>)
 800bd3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd74 <std+0x64>)
 800bd40:	6323      	str	r3, [r4, #48]	@ 0x30
 800bd42:	4b0d      	ldr	r3, [pc, #52]	@ (800bd78 <std+0x68>)
 800bd44:	6224      	str	r4, [r4, #32]
 800bd46:	429c      	cmp	r4, r3
 800bd48:	d006      	beq.n	800bd58 <std+0x48>
 800bd4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd4e:	4294      	cmp	r4, r2
 800bd50:	d002      	beq.n	800bd58 <std+0x48>
 800bd52:	33d0      	adds	r3, #208	@ 0xd0
 800bd54:	429c      	cmp	r4, r3
 800bd56:	d105      	bne.n	800bd64 <std+0x54>
 800bd58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd60:	f000 ba14 	b.w	800c18c <__retarget_lock_init_recursive>
 800bd64:	bd10      	pop	{r4, pc}
 800bd66:	bf00      	nop
 800bd68:	0800bed5 	.word	0x0800bed5
 800bd6c:	0800bef7 	.word	0x0800bef7
 800bd70:	0800bf2f 	.word	0x0800bf2f
 800bd74:	0800bf53 	.word	0x0800bf53
 800bd78:	20016c4c 	.word	0x20016c4c

0800bd7c <stdio_exit_handler>:
 800bd7c:	4a02      	ldr	r2, [pc, #8]	@ (800bd88 <stdio_exit_handler+0xc>)
 800bd7e:	4903      	ldr	r1, [pc, #12]	@ (800bd8c <stdio_exit_handler+0x10>)
 800bd80:	4803      	ldr	r0, [pc, #12]	@ (800bd90 <stdio_exit_handler+0x14>)
 800bd82:	f000 b869 	b.w	800be58 <_fwalk_sglue>
 800bd86:	bf00      	nop
 800bd88:	20000028 	.word	0x20000028
 800bd8c:	0800cab5 	.word	0x0800cab5
 800bd90:	20000038 	.word	0x20000038

0800bd94 <cleanup_stdio>:
 800bd94:	6841      	ldr	r1, [r0, #4]
 800bd96:	4b0c      	ldr	r3, [pc, #48]	@ (800bdc8 <cleanup_stdio+0x34>)
 800bd98:	4299      	cmp	r1, r3
 800bd9a:	b510      	push	{r4, lr}
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	d001      	beq.n	800bda4 <cleanup_stdio+0x10>
 800bda0:	f000 fe88 	bl	800cab4 <_fflush_r>
 800bda4:	68a1      	ldr	r1, [r4, #8]
 800bda6:	4b09      	ldr	r3, [pc, #36]	@ (800bdcc <cleanup_stdio+0x38>)
 800bda8:	4299      	cmp	r1, r3
 800bdaa:	d002      	beq.n	800bdb2 <cleanup_stdio+0x1e>
 800bdac:	4620      	mov	r0, r4
 800bdae:	f000 fe81 	bl	800cab4 <_fflush_r>
 800bdb2:	68e1      	ldr	r1, [r4, #12]
 800bdb4:	4b06      	ldr	r3, [pc, #24]	@ (800bdd0 <cleanup_stdio+0x3c>)
 800bdb6:	4299      	cmp	r1, r3
 800bdb8:	d004      	beq.n	800bdc4 <cleanup_stdio+0x30>
 800bdba:	4620      	mov	r0, r4
 800bdbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdc0:	f000 be78 	b.w	800cab4 <_fflush_r>
 800bdc4:	bd10      	pop	{r4, pc}
 800bdc6:	bf00      	nop
 800bdc8:	20016c4c 	.word	0x20016c4c
 800bdcc:	20016cb4 	.word	0x20016cb4
 800bdd0:	20016d1c 	.word	0x20016d1c

0800bdd4 <global_stdio_init.part.0>:
 800bdd4:	b510      	push	{r4, lr}
 800bdd6:	4b0b      	ldr	r3, [pc, #44]	@ (800be04 <global_stdio_init.part.0+0x30>)
 800bdd8:	4c0b      	ldr	r4, [pc, #44]	@ (800be08 <global_stdio_init.part.0+0x34>)
 800bdda:	4a0c      	ldr	r2, [pc, #48]	@ (800be0c <global_stdio_init.part.0+0x38>)
 800bddc:	601a      	str	r2, [r3, #0]
 800bdde:	4620      	mov	r0, r4
 800bde0:	2200      	movs	r2, #0
 800bde2:	2104      	movs	r1, #4
 800bde4:	f7ff ff94 	bl	800bd10 <std>
 800bde8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bdec:	2201      	movs	r2, #1
 800bdee:	2109      	movs	r1, #9
 800bdf0:	f7ff ff8e 	bl	800bd10 <std>
 800bdf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bdf8:	2202      	movs	r2, #2
 800bdfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdfe:	2112      	movs	r1, #18
 800be00:	f7ff bf86 	b.w	800bd10 <std>
 800be04:	20016d84 	.word	0x20016d84
 800be08:	20016c4c 	.word	0x20016c4c
 800be0c:	0800bd7d 	.word	0x0800bd7d

0800be10 <__sfp_lock_acquire>:
 800be10:	4801      	ldr	r0, [pc, #4]	@ (800be18 <__sfp_lock_acquire+0x8>)
 800be12:	f000 b9bc 	b.w	800c18e <__retarget_lock_acquire_recursive>
 800be16:	bf00      	nop
 800be18:	20016d8d 	.word	0x20016d8d

0800be1c <__sfp_lock_release>:
 800be1c:	4801      	ldr	r0, [pc, #4]	@ (800be24 <__sfp_lock_release+0x8>)
 800be1e:	f000 b9b7 	b.w	800c190 <__retarget_lock_release_recursive>
 800be22:	bf00      	nop
 800be24:	20016d8d 	.word	0x20016d8d

0800be28 <__sinit>:
 800be28:	b510      	push	{r4, lr}
 800be2a:	4604      	mov	r4, r0
 800be2c:	f7ff fff0 	bl	800be10 <__sfp_lock_acquire>
 800be30:	6a23      	ldr	r3, [r4, #32]
 800be32:	b11b      	cbz	r3, 800be3c <__sinit+0x14>
 800be34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be38:	f7ff bff0 	b.w	800be1c <__sfp_lock_release>
 800be3c:	4b04      	ldr	r3, [pc, #16]	@ (800be50 <__sinit+0x28>)
 800be3e:	6223      	str	r3, [r4, #32]
 800be40:	4b04      	ldr	r3, [pc, #16]	@ (800be54 <__sinit+0x2c>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1f5      	bne.n	800be34 <__sinit+0xc>
 800be48:	f7ff ffc4 	bl	800bdd4 <global_stdio_init.part.0>
 800be4c:	e7f2      	b.n	800be34 <__sinit+0xc>
 800be4e:	bf00      	nop
 800be50:	0800bd95 	.word	0x0800bd95
 800be54:	20016d84 	.word	0x20016d84

0800be58 <_fwalk_sglue>:
 800be58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be5c:	4607      	mov	r7, r0
 800be5e:	4688      	mov	r8, r1
 800be60:	4614      	mov	r4, r2
 800be62:	2600      	movs	r6, #0
 800be64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be68:	f1b9 0901 	subs.w	r9, r9, #1
 800be6c:	d505      	bpl.n	800be7a <_fwalk_sglue+0x22>
 800be6e:	6824      	ldr	r4, [r4, #0]
 800be70:	2c00      	cmp	r4, #0
 800be72:	d1f7      	bne.n	800be64 <_fwalk_sglue+0xc>
 800be74:	4630      	mov	r0, r6
 800be76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be7a:	89ab      	ldrh	r3, [r5, #12]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d907      	bls.n	800be90 <_fwalk_sglue+0x38>
 800be80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be84:	3301      	adds	r3, #1
 800be86:	d003      	beq.n	800be90 <_fwalk_sglue+0x38>
 800be88:	4629      	mov	r1, r5
 800be8a:	4638      	mov	r0, r7
 800be8c:	47c0      	blx	r8
 800be8e:	4306      	orrs	r6, r0
 800be90:	3568      	adds	r5, #104	@ 0x68
 800be92:	e7e9      	b.n	800be68 <_fwalk_sglue+0x10>

0800be94 <siprintf>:
 800be94:	b40e      	push	{r1, r2, r3}
 800be96:	b500      	push	{lr}
 800be98:	b09c      	sub	sp, #112	@ 0x70
 800be9a:	ab1d      	add	r3, sp, #116	@ 0x74
 800be9c:	9002      	str	r0, [sp, #8]
 800be9e:	9006      	str	r0, [sp, #24]
 800bea0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bea4:	4809      	ldr	r0, [pc, #36]	@ (800becc <siprintf+0x38>)
 800bea6:	9107      	str	r1, [sp, #28]
 800bea8:	9104      	str	r1, [sp, #16]
 800beaa:	4909      	ldr	r1, [pc, #36]	@ (800bed0 <siprintf+0x3c>)
 800beac:	f853 2b04 	ldr.w	r2, [r3], #4
 800beb0:	9105      	str	r1, [sp, #20]
 800beb2:	6800      	ldr	r0, [r0, #0]
 800beb4:	9301      	str	r3, [sp, #4]
 800beb6:	a902      	add	r1, sp, #8
 800beb8:	f000 faee 	bl	800c498 <_svfiprintf_r>
 800bebc:	9b02      	ldr	r3, [sp, #8]
 800bebe:	2200      	movs	r2, #0
 800bec0:	701a      	strb	r2, [r3, #0]
 800bec2:	b01c      	add	sp, #112	@ 0x70
 800bec4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bec8:	b003      	add	sp, #12
 800beca:	4770      	bx	lr
 800becc:	20000034 	.word	0x20000034
 800bed0:	ffff0208 	.word	0xffff0208

0800bed4 <__sread>:
 800bed4:	b510      	push	{r4, lr}
 800bed6:	460c      	mov	r4, r1
 800bed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bedc:	f000 f908 	bl	800c0f0 <_read_r>
 800bee0:	2800      	cmp	r0, #0
 800bee2:	bfab      	itete	ge
 800bee4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bee6:	89a3      	ldrhlt	r3, [r4, #12]
 800bee8:	181b      	addge	r3, r3, r0
 800beea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800beee:	bfac      	ite	ge
 800bef0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bef2:	81a3      	strhlt	r3, [r4, #12]
 800bef4:	bd10      	pop	{r4, pc}

0800bef6 <__swrite>:
 800bef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800befa:	461f      	mov	r7, r3
 800befc:	898b      	ldrh	r3, [r1, #12]
 800befe:	05db      	lsls	r3, r3, #23
 800bf00:	4605      	mov	r5, r0
 800bf02:	460c      	mov	r4, r1
 800bf04:	4616      	mov	r6, r2
 800bf06:	d505      	bpl.n	800bf14 <__swrite+0x1e>
 800bf08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf0c:	2302      	movs	r3, #2
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f000 f8dc 	bl	800c0cc <_lseek_r>
 800bf14:	89a3      	ldrh	r3, [r4, #12]
 800bf16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf1e:	81a3      	strh	r3, [r4, #12]
 800bf20:	4632      	mov	r2, r6
 800bf22:	463b      	mov	r3, r7
 800bf24:	4628      	mov	r0, r5
 800bf26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf2a:	f000 b8f3 	b.w	800c114 <_write_r>

0800bf2e <__sseek>:
 800bf2e:	b510      	push	{r4, lr}
 800bf30:	460c      	mov	r4, r1
 800bf32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf36:	f000 f8c9 	bl	800c0cc <_lseek_r>
 800bf3a:	1c43      	adds	r3, r0, #1
 800bf3c:	89a3      	ldrh	r3, [r4, #12]
 800bf3e:	bf15      	itete	ne
 800bf40:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf4a:	81a3      	strheq	r3, [r4, #12]
 800bf4c:	bf18      	it	ne
 800bf4e:	81a3      	strhne	r3, [r4, #12]
 800bf50:	bd10      	pop	{r4, pc}

0800bf52 <__sclose>:
 800bf52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf56:	f000 b8a9 	b.w	800c0ac <_close_r>

0800bf5a <memset>:
 800bf5a:	4402      	add	r2, r0
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d100      	bne.n	800bf64 <memset+0xa>
 800bf62:	4770      	bx	lr
 800bf64:	f803 1b01 	strb.w	r1, [r3], #1
 800bf68:	e7f9      	b.n	800bf5e <memset+0x4>

0800bf6a <strcat>:
 800bf6a:	b510      	push	{r4, lr}
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	7814      	ldrb	r4, [r2, #0]
 800bf70:	4613      	mov	r3, r2
 800bf72:	3201      	adds	r2, #1
 800bf74:	2c00      	cmp	r4, #0
 800bf76:	d1fa      	bne.n	800bf6e <strcat+0x4>
 800bf78:	3b01      	subs	r3, #1
 800bf7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf82:	2a00      	cmp	r2, #0
 800bf84:	d1f9      	bne.n	800bf7a <strcat+0x10>
 800bf86:	bd10      	pop	{r4, pc}

0800bf88 <strchr>:
 800bf88:	b2c9      	uxtb	r1, r1
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf92:	b112      	cbz	r2, 800bf9a <strchr+0x12>
 800bf94:	428a      	cmp	r2, r1
 800bf96:	d1f9      	bne.n	800bf8c <strchr+0x4>
 800bf98:	4770      	bx	lr
 800bf9a:	2900      	cmp	r1, #0
 800bf9c:	bf18      	it	ne
 800bf9e:	2000      	movne	r0, #0
 800bfa0:	4770      	bx	lr

0800bfa2 <strncpy>:
 800bfa2:	b510      	push	{r4, lr}
 800bfa4:	3901      	subs	r1, #1
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	b132      	cbz	r2, 800bfb8 <strncpy+0x16>
 800bfaa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bfae:	f803 4b01 	strb.w	r4, [r3], #1
 800bfb2:	3a01      	subs	r2, #1
 800bfb4:	2c00      	cmp	r4, #0
 800bfb6:	d1f7      	bne.n	800bfa8 <strncpy+0x6>
 800bfb8:	441a      	add	r2, r3
 800bfba:	2100      	movs	r1, #0
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d100      	bne.n	800bfc2 <strncpy+0x20>
 800bfc0:	bd10      	pop	{r4, pc}
 800bfc2:	f803 1b01 	strb.w	r1, [r3], #1
 800bfc6:	e7f9      	b.n	800bfbc <strncpy+0x1a>

0800bfc8 <strtok>:
 800bfc8:	4b16      	ldr	r3, [pc, #88]	@ (800c024 <strtok+0x5c>)
 800bfca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfce:	681f      	ldr	r7, [r3, #0]
 800bfd0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800bfd2:	4605      	mov	r5, r0
 800bfd4:	460e      	mov	r6, r1
 800bfd6:	b9ec      	cbnz	r4, 800c014 <strtok+0x4c>
 800bfd8:	2050      	movs	r0, #80	@ 0x50
 800bfda:	f000 f94b 	bl	800c274 <malloc>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	6478      	str	r0, [r7, #68]	@ 0x44
 800bfe2:	b920      	cbnz	r0, 800bfee <strtok+0x26>
 800bfe4:	4b10      	ldr	r3, [pc, #64]	@ (800c028 <strtok+0x60>)
 800bfe6:	4811      	ldr	r0, [pc, #68]	@ (800c02c <strtok+0x64>)
 800bfe8:	215b      	movs	r1, #91	@ 0x5b
 800bfea:	f000 f8db 	bl	800c1a4 <__assert_func>
 800bfee:	e9c0 4400 	strd	r4, r4, [r0]
 800bff2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bff6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bffa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800bffe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800c002:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800c006:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800c00a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800c00e:	6184      	str	r4, [r0, #24]
 800c010:	7704      	strb	r4, [r0, #28]
 800c012:	6244      	str	r4, [r0, #36]	@ 0x24
 800c014:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c016:	4631      	mov	r1, r6
 800c018:	4628      	mov	r0, r5
 800c01a:	2301      	movs	r3, #1
 800c01c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c020:	f000 b806 	b.w	800c030 <__strtok_r>
 800c024:	20000034 	.word	0x20000034
 800c028:	0800e79c 	.word	0x0800e79c
 800c02c:	0800e90c 	.word	0x0800e90c

0800c030 <__strtok_r>:
 800c030:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c032:	4604      	mov	r4, r0
 800c034:	b908      	cbnz	r0, 800c03a <__strtok_r+0xa>
 800c036:	6814      	ldr	r4, [r2, #0]
 800c038:	b144      	cbz	r4, 800c04c <__strtok_r+0x1c>
 800c03a:	4620      	mov	r0, r4
 800c03c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c040:	460f      	mov	r7, r1
 800c042:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c046:	b91e      	cbnz	r6, 800c050 <__strtok_r+0x20>
 800c048:	b965      	cbnz	r5, 800c064 <__strtok_r+0x34>
 800c04a:	6015      	str	r5, [r2, #0]
 800c04c:	2000      	movs	r0, #0
 800c04e:	e005      	b.n	800c05c <__strtok_r+0x2c>
 800c050:	42b5      	cmp	r5, r6
 800c052:	d1f6      	bne.n	800c042 <__strtok_r+0x12>
 800c054:	2b00      	cmp	r3, #0
 800c056:	d1f0      	bne.n	800c03a <__strtok_r+0xa>
 800c058:	6014      	str	r4, [r2, #0]
 800c05a:	7003      	strb	r3, [r0, #0]
 800c05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c05e:	461c      	mov	r4, r3
 800c060:	e00c      	b.n	800c07c <__strtok_r+0x4c>
 800c062:	b915      	cbnz	r5, 800c06a <__strtok_r+0x3a>
 800c064:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c068:	460e      	mov	r6, r1
 800c06a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c06e:	42ab      	cmp	r3, r5
 800c070:	d1f7      	bne.n	800c062 <__strtok_r+0x32>
 800c072:	2b00      	cmp	r3, #0
 800c074:	d0f3      	beq.n	800c05e <__strtok_r+0x2e>
 800c076:	2300      	movs	r3, #0
 800c078:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c07c:	6014      	str	r4, [r2, #0]
 800c07e:	e7ed      	b.n	800c05c <__strtok_r+0x2c>

0800c080 <strstr>:
 800c080:	780a      	ldrb	r2, [r1, #0]
 800c082:	b570      	push	{r4, r5, r6, lr}
 800c084:	b96a      	cbnz	r2, 800c0a2 <strstr+0x22>
 800c086:	bd70      	pop	{r4, r5, r6, pc}
 800c088:	429a      	cmp	r2, r3
 800c08a:	d109      	bne.n	800c0a0 <strstr+0x20>
 800c08c:	460c      	mov	r4, r1
 800c08e:	4605      	mov	r5, r0
 800c090:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c094:	2b00      	cmp	r3, #0
 800c096:	d0f6      	beq.n	800c086 <strstr+0x6>
 800c098:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c09c:	429e      	cmp	r6, r3
 800c09e:	d0f7      	beq.n	800c090 <strstr+0x10>
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	7803      	ldrb	r3, [r0, #0]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d1ef      	bne.n	800c088 <strstr+0x8>
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	e7ec      	b.n	800c086 <strstr+0x6>

0800c0ac <_close_r>:
 800c0ac:	b538      	push	{r3, r4, r5, lr}
 800c0ae:	4d06      	ldr	r5, [pc, #24]	@ (800c0c8 <_close_r+0x1c>)
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	4604      	mov	r4, r0
 800c0b4:	4608      	mov	r0, r1
 800c0b6:	602b      	str	r3, [r5, #0]
 800c0b8:	f7fb fc64 	bl	8007984 <_close>
 800c0bc:	1c43      	adds	r3, r0, #1
 800c0be:	d102      	bne.n	800c0c6 <_close_r+0x1a>
 800c0c0:	682b      	ldr	r3, [r5, #0]
 800c0c2:	b103      	cbz	r3, 800c0c6 <_close_r+0x1a>
 800c0c4:	6023      	str	r3, [r4, #0]
 800c0c6:	bd38      	pop	{r3, r4, r5, pc}
 800c0c8:	20016d88 	.word	0x20016d88

0800c0cc <_lseek_r>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	4d07      	ldr	r5, [pc, #28]	@ (800c0ec <_lseek_r+0x20>)
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	4608      	mov	r0, r1
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	602a      	str	r2, [r5, #0]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	f7fb fc79 	bl	80079d2 <_lseek>
 800c0e0:	1c43      	adds	r3, r0, #1
 800c0e2:	d102      	bne.n	800c0ea <_lseek_r+0x1e>
 800c0e4:	682b      	ldr	r3, [r5, #0]
 800c0e6:	b103      	cbz	r3, 800c0ea <_lseek_r+0x1e>
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	bd38      	pop	{r3, r4, r5, pc}
 800c0ec:	20016d88 	.word	0x20016d88

0800c0f0 <_read_r>:
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	4d07      	ldr	r5, [pc, #28]	@ (800c110 <_read_r+0x20>)
 800c0f4:	4604      	mov	r4, r0
 800c0f6:	4608      	mov	r0, r1
 800c0f8:	4611      	mov	r1, r2
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	602a      	str	r2, [r5, #0]
 800c0fe:	461a      	mov	r2, r3
 800c100:	f7fb fc07 	bl	8007912 <_read>
 800c104:	1c43      	adds	r3, r0, #1
 800c106:	d102      	bne.n	800c10e <_read_r+0x1e>
 800c108:	682b      	ldr	r3, [r5, #0]
 800c10a:	b103      	cbz	r3, 800c10e <_read_r+0x1e>
 800c10c:	6023      	str	r3, [r4, #0]
 800c10e:	bd38      	pop	{r3, r4, r5, pc}
 800c110:	20016d88 	.word	0x20016d88

0800c114 <_write_r>:
 800c114:	b538      	push	{r3, r4, r5, lr}
 800c116:	4d07      	ldr	r5, [pc, #28]	@ (800c134 <_write_r+0x20>)
 800c118:	4604      	mov	r4, r0
 800c11a:	4608      	mov	r0, r1
 800c11c:	4611      	mov	r1, r2
 800c11e:	2200      	movs	r2, #0
 800c120:	602a      	str	r2, [r5, #0]
 800c122:	461a      	mov	r2, r3
 800c124:	f7fb fc12 	bl	800794c <_write>
 800c128:	1c43      	adds	r3, r0, #1
 800c12a:	d102      	bne.n	800c132 <_write_r+0x1e>
 800c12c:	682b      	ldr	r3, [r5, #0]
 800c12e:	b103      	cbz	r3, 800c132 <_write_r+0x1e>
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	bd38      	pop	{r3, r4, r5, pc}
 800c134:	20016d88 	.word	0x20016d88

0800c138 <__errno>:
 800c138:	4b01      	ldr	r3, [pc, #4]	@ (800c140 <__errno+0x8>)
 800c13a:	6818      	ldr	r0, [r3, #0]
 800c13c:	4770      	bx	lr
 800c13e:	bf00      	nop
 800c140:	20000034 	.word	0x20000034

0800c144 <__libc_init_array>:
 800c144:	b570      	push	{r4, r5, r6, lr}
 800c146:	4d0d      	ldr	r5, [pc, #52]	@ (800c17c <__libc_init_array+0x38>)
 800c148:	4c0d      	ldr	r4, [pc, #52]	@ (800c180 <__libc_init_array+0x3c>)
 800c14a:	1b64      	subs	r4, r4, r5
 800c14c:	10a4      	asrs	r4, r4, #2
 800c14e:	2600      	movs	r6, #0
 800c150:	42a6      	cmp	r6, r4
 800c152:	d109      	bne.n	800c168 <__libc_init_array+0x24>
 800c154:	4d0b      	ldr	r5, [pc, #44]	@ (800c184 <__libc_init_array+0x40>)
 800c156:	4c0c      	ldr	r4, [pc, #48]	@ (800c188 <__libc_init_array+0x44>)
 800c158:	f001 ff58 	bl	800e00c <_init>
 800c15c:	1b64      	subs	r4, r4, r5
 800c15e:	10a4      	asrs	r4, r4, #2
 800c160:	2600      	movs	r6, #0
 800c162:	42a6      	cmp	r6, r4
 800c164:	d105      	bne.n	800c172 <__libc_init_array+0x2e>
 800c166:	bd70      	pop	{r4, r5, r6, pc}
 800c168:	f855 3b04 	ldr.w	r3, [r5], #4
 800c16c:	4798      	blx	r3
 800c16e:	3601      	adds	r6, #1
 800c170:	e7ee      	b.n	800c150 <__libc_init_array+0xc>
 800c172:	f855 3b04 	ldr.w	r3, [r5], #4
 800c176:	4798      	blx	r3
 800c178:	3601      	adds	r6, #1
 800c17a:	e7f2      	b.n	800c162 <__libc_init_array+0x1e>
 800c17c:	0800ea10 	.word	0x0800ea10
 800c180:	0800ea10 	.word	0x0800ea10
 800c184:	0800ea10 	.word	0x0800ea10
 800c188:	0800ea14 	.word	0x0800ea14

0800c18c <__retarget_lock_init_recursive>:
 800c18c:	4770      	bx	lr

0800c18e <__retarget_lock_acquire_recursive>:
 800c18e:	4770      	bx	lr

0800c190 <__retarget_lock_release_recursive>:
 800c190:	4770      	bx	lr

0800c192 <strcpy>:
 800c192:	4603      	mov	r3, r0
 800c194:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c198:	f803 2b01 	strb.w	r2, [r3], #1
 800c19c:	2a00      	cmp	r2, #0
 800c19e:	d1f9      	bne.n	800c194 <strcpy+0x2>
 800c1a0:	4770      	bx	lr
	...

0800c1a4 <__assert_func>:
 800c1a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1a6:	4614      	mov	r4, r2
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	4b09      	ldr	r3, [pc, #36]	@ (800c1d0 <__assert_func+0x2c>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4605      	mov	r5, r0
 800c1b0:	68d8      	ldr	r0, [r3, #12]
 800c1b2:	b954      	cbnz	r4, 800c1ca <__assert_func+0x26>
 800c1b4:	4b07      	ldr	r3, [pc, #28]	@ (800c1d4 <__assert_func+0x30>)
 800c1b6:	461c      	mov	r4, r3
 800c1b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1bc:	9100      	str	r1, [sp, #0]
 800c1be:	462b      	mov	r3, r5
 800c1c0:	4905      	ldr	r1, [pc, #20]	@ (800c1d8 <__assert_func+0x34>)
 800c1c2:	f000 fc9f 	bl	800cb04 <fiprintf>
 800c1c6:	f000 fce7 	bl	800cb98 <abort>
 800c1ca:	4b04      	ldr	r3, [pc, #16]	@ (800c1dc <__assert_func+0x38>)
 800c1cc:	e7f4      	b.n	800c1b8 <__assert_func+0x14>
 800c1ce:	bf00      	nop
 800c1d0:	20000034 	.word	0x20000034
 800c1d4:	0800e9a1 	.word	0x0800e9a1
 800c1d8:	0800e973 	.word	0x0800e973
 800c1dc:	0800e966 	.word	0x0800e966

0800c1e0 <_free_r>:
 800c1e0:	b538      	push	{r3, r4, r5, lr}
 800c1e2:	4605      	mov	r5, r0
 800c1e4:	2900      	cmp	r1, #0
 800c1e6:	d041      	beq.n	800c26c <_free_r+0x8c>
 800c1e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1ec:	1f0c      	subs	r4, r1, #4
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	bfb8      	it	lt
 800c1f2:	18e4      	addlt	r4, r4, r3
 800c1f4:	f000 f8e8 	bl	800c3c8 <__malloc_lock>
 800c1f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c270 <_free_r+0x90>)
 800c1fa:	6813      	ldr	r3, [r2, #0]
 800c1fc:	b933      	cbnz	r3, 800c20c <_free_r+0x2c>
 800c1fe:	6063      	str	r3, [r4, #4]
 800c200:	6014      	str	r4, [r2, #0]
 800c202:	4628      	mov	r0, r5
 800c204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c208:	f000 b8e4 	b.w	800c3d4 <__malloc_unlock>
 800c20c:	42a3      	cmp	r3, r4
 800c20e:	d908      	bls.n	800c222 <_free_r+0x42>
 800c210:	6820      	ldr	r0, [r4, #0]
 800c212:	1821      	adds	r1, r4, r0
 800c214:	428b      	cmp	r3, r1
 800c216:	bf01      	itttt	eq
 800c218:	6819      	ldreq	r1, [r3, #0]
 800c21a:	685b      	ldreq	r3, [r3, #4]
 800c21c:	1809      	addeq	r1, r1, r0
 800c21e:	6021      	streq	r1, [r4, #0]
 800c220:	e7ed      	b.n	800c1fe <_free_r+0x1e>
 800c222:	461a      	mov	r2, r3
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	b10b      	cbz	r3, 800c22c <_free_r+0x4c>
 800c228:	42a3      	cmp	r3, r4
 800c22a:	d9fa      	bls.n	800c222 <_free_r+0x42>
 800c22c:	6811      	ldr	r1, [r2, #0]
 800c22e:	1850      	adds	r0, r2, r1
 800c230:	42a0      	cmp	r0, r4
 800c232:	d10b      	bne.n	800c24c <_free_r+0x6c>
 800c234:	6820      	ldr	r0, [r4, #0]
 800c236:	4401      	add	r1, r0
 800c238:	1850      	adds	r0, r2, r1
 800c23a:	4283      	cmp	r3, r0
 800c23c:	6011      	str	r1, [r2, #0]
 800c23e:	d1e0      	bne.n	800c202 <_free_r+0x22>
 800c240:	6818      	ldr	r0, [r3, #0]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	6053      	str	r3, [r2, #4]
 800c246:	4408      	add	r0, r1
 800c248:	6010      	str	r0, [r2, #0]
 800c24a:	e7da      	b.n	800c202 <_free_r+0x22>
 800c24c:	d902      	bls.n	800c254 <_free_r+0x74>
 800c24e:	230c      	movs	r3, #12
 800c250:	602b      	str	r3, [r5, #0]
 800c252:	e7d6      	b.n	800c202 <_free_r+0x22>
 800c254:	6820      	ldr	r0, [r4, #0]
 800c256:	1821      	adds	r1, r4, r0
 800c258:	428b      	cmp	r3, r1
 800c25a:	bf04      	itt	eq
 800c25c:	6819      	ldreq	r1, [r3, #0]
 800c25e:	685b      	ldreq	r3, [r3, #4]
 800c260:	6063      	str	r3, [r4, #4]
 800c262:	bf04      	itt	eq
 800c264:	1809      	addeq	r1, r1, r0
 800c266:	6021      	streq	r1, [r4, #0]
 800c268:	6054      	str	r4, [r2, #4]
 800c26a:	e7ca      	b.n	800c202 <_free_r+0x22>
 800c26c:	bd38      	pop	{r3, r4, r5, pc}
 800c26e:	bf00      	nop
 800c270:	20016d94 	.word	0x20016d94

0800c274 <malloc>:
 800c274:	4b02      	ldr	r3, [pc, #8]	@ (800c280 <malloc+0xc>)
 800c276:	4601      	mov	r1, r0
 800c278:	6818      	ldr	r0, [r3, #0]
 800c27a:	f000 b825 	b.w	800c2c8 <_malloc_r>
 800c27e:	bf00      	nop
 800c280:	20000034 	.word	0x20000034

0800c284 <sbrk_aligned>:
 800c284:	b570      	push	{r4, r5, r6, lr}
 800c286:	4e0f      	ldr	r6, [pc, #60]	@ (800c2c4 <sbrk_aligned+0x40>)
 800c288:	460c      	mov	r4, r1
 800c28a:	6831      	ldr	r1, [r6, #0]
 800c28c:	4605      	mov	r5, r0
 800c28e:	b911      	cbnz	r1, 800c296 <sbrk_aligned+0x12>
 800c290:	f000 fc64 	bl	800cb5c <_sbrk_r>
 800c294:	6030      	str	r0, [r6, #0]
 800c296:	4621      	mov	r1, r4
 800c298:	4628      	mov	r0, r5
 800c29a:	f000 fc5f 	bl	800cb5c <_sbrk_r>
 800c29e:	1c43      	adds	r3, r0, #1
 800c2a0:	d103      	bne.n	800c2aa <sbrk_aligned+0x26>
 800c2a2:	f04f 34ff 	mov.w	r4, #4294967295
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	bd70      	pop	{r4, r5, r6, pc}
 800c2aa:	1cc4      	adds	r4, r0, #3
 800c2ac:	f024 0403 	bic.w	r4, r4, #3
 800c2b0:	42a0      	cmp	r0, r4
 800c2b2:	d0f8      	beq.n	800c2a6 <sbrk_aligned+0x22>
 800c2b4:	1a21      	subs	r1, r4, r0
 800c2b6:	4628      	mov	r0, r5
 800c2b8:	f000 fc50 	bl	800cb5c <_sbrk_r>
 800c2bc:	3001      	adds	r0, #1
 800c2be:	d1f2      	bne.n	800c2a6 <sbrk_aligned+0x22>
 800c2c0:	e7ef      	b.n	800c2a2 <sbrk_aligned+0x1e>
 800c2c2:	bf00      	nop
 800c2c4:	20016d90 	.word	0x20016d90

0800c2c8 <_malloc_r>:
 800c2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2cc:	1ccd      	adds	r5, r1, #3
 800c2ce:	f025 0503 	bic.w	r5, r5, #3
 800c2d2:	3508      	adds	r5, #8
 800c2d4:	2d0c      	cmp	r5, #12
 800c2d6:	bf38      	it	cc
 800c2d8:	250c      	movcc	r5, #12
 800c2da:	2d00      	cmp	r5, #0
 800c2dc:	4606      	mov	r6, r0
 800c2de:	db01      	blt.n	800c2e4 <_malloc_r+0x1c>
 800c2e0:	42a9      	cmp	r1, r5
 800c2e2:	d904      	bls.n	800c2ee <_malloc_r+0x26>
 800c2e4:	230c      	movs	r3, #12
 800c2e6:	6033      	str	r3, [r6, #0]
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3c4 <_malloc_r+0xfc>
 800c2f2:	f000 f869 	bl	800c3c8 <__malloc_lock>
 800c2f6:	f8d8 3000 	ldr.w	r3, [r8]
 800c2fa:	461c      	mov	r4, r3
 800c2fc:	bb44      	cbnz	r4, 800c350 <_malloc_r+0x88>
 800c2fe:	4629      	mov	r1, r5
 800c300:	4630      	mov	r0, r6
 800c302:	f7ff ffbf 	bl	800c284 <sbrk_aligned>
 800c306:	1c43      	adds	r3, r0, #1
 800c308:	4604      	mov	r4, r0
 800c30a:	d158      	bne.n	800c3be <_malloc_r+0xf6>
 800c30c:	f8d8 4000 	ldr.w	r4, [r8]
 800c310:	4627      	mov	r7, r4
 800c312:	2f00      	cmp	r7, #0
 800c314:	d143      	bne.n	800c39e <_malloc_r+0xd6>
 800c316:	2c00      	cmp	r4, #0
 800c318:	d04b      	beq.n	800c3b2 <_malloc_r+0xea>
 800c31a:	6823      	ldr	r3, [r4, #0]
 800c31c:	4639      	mov	r1, r7
 800c31e:	4630      	mov	r0, r6
 800c320:	eb04 0903 	add.w	r9, r4, r3
 800c324:	f000 fc1a 	bl	800cb5c <_sbrk_r>
 800c328:	4581      	cmp	r9, r0
 800c32a:	d142      	bne.n	800c3b2 <_malloc_r+0xea>
 800c32c:	6821      	ldr	r1, [r4, #0]
 800c32e:	1a6d      	subs	r5, r5, r1
 800c330:	4629      	mov	r1, r5
 800c332:	4630      	mov	r0, r6
 800c334:	f7ff ffa6 	bl	800c284 <sbrk_aligned>
 800c338:	3001      	adds	r0, #1
 800c33a:	d03a      	beq.n	800c3b2 <_malloc_r+0xea>
 800c33c:	6823      	ldr	r3, [r4, #0]
 800c33e:	442b      	add	r3, r5
 800c340:	6023      	str	r3, [r4, #0]
 800c342:	f8d8 3000 	ldr.w	r3, [r8]
 800c346:	685a      	ldr	r2, [r3, #4]
 800c348:	bb62      	cbnz	r2, 800c3a4 <_malloc_r+0xdc>
 800c34a:	f8c8 7000 	str.w	r7, [r8]
 800c34e:	e00f      	b.n	800c370 <_malloc_r+0xa8>
 800c350:	6822      	ldr	r2, [r4, #0]
 800c352:	1b52      	subs	r2, r2, r5
 800c354:	d420      	bmi.n	800c398 <_malloc_r+0xd0>
 800c356:	2a0b      	cmp	r2, #11
 800c358:	d917      	bls.n	800c38a <_malloc_r+0xc2>
 800c35a:	1961      	adds	r1, r4, r5
 800c35c:	42a3      	cmp	r3, r4
 800c35e:	6025      	str	r5, [r4, #0]
 800c360:	bf18      	it	ne
 800c362:	6059      	strne	r1, [r3, #4]
 800c364:	6863      	ldr	r3, [r4, #4]
 800c366:	bf08      	it	eq
 800c368:	f8c8 1000 	streq.w	r1, [r8]
 800c36c:	5162      	str	r2, [r4, r5]
 800c36e:	604b      	str	r3, [r1, #4]
 800c370:	4630      	mov	r0, r6
 800c372:	f000 f82f 	bl	800c3d4 <__malloc_unlock>
 800c376:	f104 000b 	add.w	r0, r4, #11
 800c37a:	1d23      	adds	r3, r4, #4
 800c37c:	f020 0007 	bic.w	r0, r0, #7
 800c380:	1ac2      	subs	r2, r0, r3
 800c382:	bf1c      	itt	ne
 800c384:	1a1b      	subne	r3, r3, r0
 800c386:	50a3      	strne	r3, [r4, r2]
 800c388:	e7af      	b.n	800c2ea <_malloc_r+0x22>
 800c38a:	6862      	ldr	r2, [r4, #4]
 800c38c:	42a3      	cmp	r3, r4
 800c38e:	bf0c      	ite	eq
 800c390:	f8c8 2000 	streq.w	r2, [r8]
 800c394:	605a      	strne	r2, [r3, #4]
 800c396:	e7eb      	b.n	800c370 <_malloc_r+0xa8>
 800c398:	4623      	mov	r3, r4
 800c39a:	6864      	ldr	r4, [r4, #4]
 800c39c:	e7ae      	b.n	800c2fc <_malloc_r+0x34>
 800c39e:	463c      	mov	r4, r7
 800c3a0:	687f      	ldr	r7, [r7, #4]
 800c3a2:	e7b6      	b.n	800c312 <_malloc_r+0x4a>
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	42a3      	cmp	r3, r4
 800c3aa:	d1fb      	bne.n	800c3a4 <_malloc_r+0xdc>
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	6053      	str	r3, [r2, #4]
 800c3b0:	e7de      	b.n	800c370 <_malloc_r+0xa8>
 800c3b2:	230c      	movs	r3, #12
 800c3b4:	6033      	str	r3, [r6, #0]
 800c3b6:	4630      	mov	r0, r6
 800c3b8:	f000 f80c 	bl	800c3d4 <__malloc_unlock>
 800c3bc:	e794      	b.n	800c2e8 <_malloc_r+0x20>
 800c3be:	6005      	str	r5, [r0, #0]
 800c3c0:	e7d6      	b.n	800c370 <_malloc_r+0xa8>
 800c3c2:	bf00      	nop
 800c3c4:	20016d94 	.word	0x20016d94

0800c3c8 <__malloc_lock>:
 800c3c8:	4801      	ldr	r0, [pc, #4]	@ (800c3d0 <__malloc_lock+0x8>)
 800c3ca:	f7ff bee0 	b.w	800c18e <__retarget_lock_acquire_recursive>
 800c3ce:	bf00      	nop
 800c3d0:	20016d8c 	.word	0x20016d8c

0800c3d4 <__malloc_unlock>:
 800c3d4:	4801      	ldr	r0, [pc, #4]	@ (800c3dc <__malloc_unlock+0x8>)
 800c3d6:	f7ff bedb 	b.w	800c190 <__retarget_lock_release_recursive>
 800c3da:	bf00      	nop
 800c3dc:	20016d8c 	.word	0x20016d8c

0800c3e0 <__ssputs_r>:
 800c3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3e4:	688e      	ldr	r6, [r1, #8]
 800c3e6:	461f      	mov	r7, r3
 800c3e8:	42be      	cmp	r6, r7
 800c3ea:	680b      	ldr	r3, [r1, #0]
 800c3ec:	4682      	mov	sl, r0
 800c3ee:	460c      	mov	r4, r1
 800c3f0:	4690      	mov	r8, r2
 800c3f2:	d82d      	bhi.n	800c450 <__ssputs_r+0x70>
 800c3f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c3fc:	d026      	beq.n	800c44c <__ssputs_r+0x6c>
 800c3fe:	6965      	ldr	r5, [r4, #20]
 800c400:	6909      	ldr	r1, [r1, #16]
 800c402:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c406:	eba3 0901 	sub.w	r9, r3, r1
 800c40a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c40e:	1c7b      	adds	r3, r7, #1
 800c410:	444b      	add	r3, r9
 800c412:	106d      	asrs	r5, r5, #1
 800c414:	429d      	cmp	r5, r3
 800c416:	bf38      	it	cc
 800c418:	461d      	movcc	r5, r3
 800c41a:	0553      	lsls	r3, r2, #21
 800c41c:	d527      	bpl.n	800c46e <__ssputs_r+0x8e>
 800c41e:	4629      	mov	r1, r5
 800c420:	f7ff ff52 	bl	800c2c8 <_malloc_r>
 800c424:	4606      	mov	r6, r0
 800c426:	b360      	cbz	r0, 800c482 <__ssputs_r+0xa2>
 800c428:	6921      	ldr	r1, [r4, #16]
 800c42a:	464a      	mov	r2, r9
 800c42c:	f000 fba6 	bl	800cb7c <memcpy>
 800c430:	89a3      	ldrh	r3, [r4, #12]
 800c432:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c43a:	81a3      	strh	r3, [r4, #12]
 800c43c:	6126      	str	r6, [r4, #16]
 800c43e:	6165      	str	r5, [r4, #20]
 800c440:	444e      	add	r6, r9
 800c442:	eba5 0509 	sub.w	r5, r5, r9
 800c446:	6026      	str	r6, [r4, #0]
 800c448:	60a5      	str	r5, [r4, #8]
 800c44a:	463e      	mov	r6, r7
 800c44c:	42be      	cmp	r6, r7
 800c44e:	d900      	bls.n	800c452 <__ssputs_r+0x72>
 800c450:	463e      	mov	r6, r7
 800c452:	6820      	ldr	r0, [r4, #0]
 800c454:	4632      	mov	r2, r6
 800c456:	4641      	mov	r1, r8
 800c458:	f000 fb66 	bl	800cb28 <memmove>
 800c45c:	68a3      	ldr	r3, [r4, #8]
 800c45e:	1b9b      	subs	r3, r3, r6
 800c460:	60a3      	str	r3, [r4, #8]
 800c462:	6823      	ldr	r3, [r4, #0]
 800c464:	4433      	add	r3, r6
 800c466:	6023      	str	r3, [r4, #0]
 800c468:	2000      	movs	r0, #0
 800c46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c46e:	462a      	mov	r2, r5
 800c470:	f000 fb99 	bl	800cba6 <_realloc_r>
 800c474:	4606      	mov	r6, r0
 800c476:	2800      	cmp	r0, #0
 800c478:	d1e0      	bne.n	800c43c <__ssputs_r+0x5c>
 800c47a:	6921      	ldr	r1, [r4, #16]
 800c47c:	4650      	mov	r0, sl
 800c47e:	f7ff feaf 	bl	800c1e0 <_free_r>
 800c482:	230c      	movs	r3, #12
 800c484:	f8ca 3000 	str.w	r3, [sl]
 800c488:	89a3      	ldrh	r3, [r4, #12]
 800c48a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c48e:	81a3      	strh	r3, [r4, #12]
 800c490:	f04f 30ff 	mov.w	r0, #4294967295
 800c494:	e7e9      	b.n	800c46a <__ssputs_r+0x8a>
	...

0800c498 <_svfiprintf_r>:
 800c498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49c:	4698      	mov	r8, r3
 800c49e:	898b      	ldrh	r3, [r1, #12]
 800c4a0:	061b      	lsls	r3, r3, #24
 800c4a2:	b09d      	sub	sp, #116	@ 0x74
 800c4a4:	4607      	mov	r7, r0
 800c4a6:	460d      	mov	r5, r1
 800c4a8:	4614      	mov	r4, r2
 800c4aa:	d510      	bpl.n	800c4ce <_svfiprintf_r+0x36>
 800c4ac:	690b      	ldr	r3, [r1, #16]
 800c4ae:	b973      	cbnz	r3, 800c4ce <_svfiprintf_r+0x36>
 800c4b0:	2140      	movs	r1, #64	@ 0x40
 800c4b2:	f7ff ff09 	bl	800c2c8 <_malloc_r>
 800c4b6:	6028      	str	r0, [r5, #0]
 800c4b8:	6128      	str	r0, [r5, #16]
 800c4ba:	b930      	cbnz	r0, 800c4ca <_svfiprintf_r+0x32>
 800c4bc:	230c      	movs	r3, #12
 800c4be:	603b      	str	r3, [r7, #0]
 800c4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c4:	b01d      	add	sp, #116	@ 0x74
 800c4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ca:	2340      	movs	r3, #64	@ 0x40
 800c4cc:	616b      	str	r3, [r5, #20]
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4d2:	2320      	movs	r3, #32
 800c4d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4dc:	2330      	movs	r3, #48	@ 0x30
 800c4de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c67c <_svfiprintf_r+0x1e4>
 800c4e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4e6:	f04f 0901 	mov.w	r9, #1
 800c4ea:	4623      	mov	r3, r4
 800c4ec:	469a      	mov	sl, r3
 800c4ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4f2:	b10a      	cbz	r2, 800c4f8 <_svfiprintf_r+0x60>
 800c4f4:	2a25      	cmp	r2, #37	@ 0x25
 800c4f6:	d1f9      	bne.n	800c4ec <_svfiprintf_r+0x54>
 800c4f8:	ebba 0b04 	subs.w	fp, sl, r4
 800c4fc:	d00b      	beq.n	800c516 <_svfiprintf_r+0x7e>
 800c4fe:	465b      	mov	r3, fp
 800c500:	4622      	mov	r2, r4
 800c502:	4629      	mov	r1, r5
 800c504:	4638      	mov	r0, r7
 800c506:	f7ff ff6b 	bl	800c3e0 <__ssputs_r>
 800c50a:	3001      	adds	r0, #1
 800c50c:	f000 80a7 	beq.w	800c65e <_svfiprintf_r+0x1c6>
 800c510:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c512:	445a      	add	r2, fp
 800c514:	9209      	str	r2, [sp, #36]	@ 0x24
 800c516:	f89a 3000 	ldrb.w	r3, [sl]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	f000 809f 	beq.w	800c65e <_svfiprintf_r+0x1c6>
 800c520:	2300      	movs	r3, #0
 800c522:	f04f 32ff 	mov.w	r2, #4294967295
 800c526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c52a:	f10a 0a01 	add.w	sl, sl, #1
 800c52e:	9304      	str	r3, [sp, #16]
 800c530:	9307      	str	r3, [sp, #28]
 800c532:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c536:	931a      	str	r3, [sp, #104]	@ 0x68
 800c538:	4654      	mov	r4, sl
 800c53a:	2205      	movs	r2, #5
 800c53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c540:	484e      	ldr	r0, [pc, #312]	@ (800c67c <_svfiprintf_r+0x1e4>)
 800c542:	f7f3 fe4d 	bl	80001e0 <memchr>
 800c546:	9a04      	ldr	r2, [sp, #16]
 800c548:	b9d8      	cbnz	r0, 800c582 <_svfiprintf_r+0xea>
 800c54a:	06d0      	lsls	r0, r2, #27
 800c54c:	bf44      	itt	mi
 800c54e:	2320      	movmi	r3, #32
 800c550:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c554:	0711      	lsls	r1, r2, #28
 800c556:	bf44      	itt	mi
 800c558:	232b      	movmi	r3, #43	@ 0x2b
 800c55a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c55e:	f89a 3000 	ldrb.w	r3, [sl]
 800c562:	2b2a      	cmp	r3, #42	@ 0x2a
 800c564:	d015      	beq.n	800c592 <_svfiprintf_r+0xfa>
 800c566:	9a07      	ldr	r2, [sp, #28]
 800c568:	4654      	mov	r4, sl
 800c56a:	2000      	movs	r0, #0
 800c56c:	f04f 0c0a 	mov.w	ip, #10
 800c570:	4621      	mov	r1, r4
 800c572:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c576:	3b30      	subs	r3, #48	@ 0x30
 800c578:	2b09      	cmp	r3, #9
 800c57a:	d94b      	bls.n	800c614 <_svfiprintf_r+0x17c>
 800c57c:	b1b0      	cbz	r0, 800c5ac <_svfiprintf_r+0x114>
 800c57e:	9207      	str	r2, [sp, #28]
 800c580:	e014      	b.n	800c5ac <_svfiprintf_r+0x114>
 800c582:	eba0 0308 	sub.w	r3, r0, r8
 800c586:	fa09 f303 	lsl.w	r3, r9, r3
 800c58a:	4313      	orrs	r3, r2
 800c58c:	9304      	str	r3, [sp, #16]
 800c58e:	46a2      	mov	sl, r4
 800c590:	e7d2      	b.n	800c538 <_svfiprintf_r+0xa0>
 800c592:	9b03      	ldr	r3, [sp, #12]
 800c594:	1d19      	adds	r1, r3, #4
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	9103      	str	r1, [sp, #12]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	bfbb      	ittet	lt
 800c59e:	425b      	neglt	r3, r3
 800c5a0:	f042 0202 	orrlt.w	r2, r2, #2
 800c5a4:	9307      	strge	r3, [sp, #28]
 800c5a6:	9307      	strlt	r3, [sp, #28]
 800c5a8:	bfb8      	it	lt
 800c5aa:	9204      	strlt	r2, [sp, #16]
 800c5ac:	7823      	ldrb	r3, [r4, #0]
 800c5ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5b0:	d10a      	bne.n	800c5c8 <_svfiprintf_r+0x130>
 800c5b2:	7863      	ldrb	r3, [r4, #1]
 800c5b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5b6:	d132      	bne.n	800c61e <_svfiprintf_r+0x186>
 800c5b8:	9b03      	ldr	r3, [sp, #12]
 800c5ba:	1d1a      	adds	r2, r3, #4
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	9203      	str	r2, [sp, #12]
 800c5c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5c4:	3402      	adds	r4, #2
 800c5c6:	9305      	str	r3, [sp, #20]
 800c5c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c68c <_svfiprintf_r+0x1f4>
 800c5cc:	7821      	ldrb	r1, [r4, #0]
 800c5ce:	2203      	movs	r2, #3
 800c5d0:	4650      	mov	r0, sl
 800c5d2:	f7f3 fe05 	bl	80001e0 <memchr>
 800c5d6:	b138      	cbz	r0, 800c5e8 <_svfiprintf_r+0x150>
 800c5d8:	9b04      	ldr	r3, [sp, #16]
 800c5da:	eba0 000a 	sub.w	r0, r0, sl
 800c5de:	2240      	movs	r2, #64	@ 0x40
 800c5e0:	4082      	lsls	r2, r0
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	3401      	adds	r4, #1
 800c5e6:	9304      	str	r3, [sp, #16]
 800c5e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ec:	4824      	ldr	r0, [pc, #144]	@ (800c680 <_svfiprintf_r+0x1e8>)
 800c5ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c5f2:	2206      	movs	r2, #6
 800c5f4:	f7f3 fdf4 	bl	80001e0 <memchr>
 800c5f8:	2800      	cmp	r0, #0
 800c5fa:	d036      	beq.n	800c66a <_svfiprintf_r+0x1d2>
 800c5fc:	4b21      	ldr	r3, [pc, #132]	@ (800c684 <_svfiprintf_r+0x1ec>)
 800c5fe:	bb1b      	cbnz	r3, 800c648 <_svfiprintf_r+0x1b0>
 800c600:	9b03      	ldr	r3, [sp, #12]
 800c602:	3307      	adds	r3, #7
 800c604:	f023 0307 	bic.w	r3, r3, #7
 800c608:	3308      	adds	r3, #8
 800c60a:	9303      	str	r3, [sp, #12]
 800c60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c60e:	4433      	add	r3, r6
 800c610:	9309      	str	r3, [sp, #36]	@ 0x24
 800c612:	e76a      	b.n	800c4ea <_svfiprintf_r+0x52>
 800c614:	fb0c 3202 	mla	r2, ip, r2, r3
 800c618:	460c      	mov	r4, r1
 800c61a:	2001      	movs	r0, #1
 800c61c:	e7a8      	b.n	800c570 <_svfiprintf_r+0xd8>
 800c61e:	2300      	movs	r3, #0
 800c620:	3401      	adds	r4, #1
 800c622:	9305      	str	r3, [sp, #20]
 800c624:	4619      	mov	r1, r3
 800c626:	f04f 0c0a 	mov.w	ip, #10
 800c62a:	4620      	mov	r0, r4
 800c62c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c630:	3a30      	subs	r2, #48	@ 0x30
 800c632:	2a09      	cmp	r2, #9
 800c634:	d903      	bls.n	800c63e <_svfiprintf_r+0x1a6>
 800c636:	2b00      	cmp	r3, #0
 800c638:	d0c6      	beq.n	800c5c8 <_svfiprintf_r+0x130>
 800c63a:	9105      	str	r1, [sp, #20]
 800c63c:	e7c4      	b.n	800c5c8 <_svfiprintf_r+0x130>
 800c63e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c642:	4604      	mov	r4, r0
 800c644:	2301      	movs	r3, #1
 800c646:	e7f0      	b.n	800c62a <_svfiprintf_r+0x192>
 800c648:	ab03      	add	r3, sp, #12
 800c64a:	9300      	str	r3, [sp, #0]
 800c64c:	462a      	mov	r2, r5
 800c64e:	4b0e      	ldr	r3, [pc, #56]	@ (800c688 <_svfiprintf_r+0x1f0>)
 800c650:	a904      	add	r1, sp, #16
 800c652:	4638      	mov	r0, r7
 800c654:	f3af 8000 	nop.w
 800c658:	1c42      	adds	r2, r0, #1
 800c65a:	4606      	mov	r6, r0
 800c65c:	d1d6      	bne.n	800c60c <_svfiprintf_r+0x174>
 800c65e:	89ab      	ldrh	r3, [r5, #12]
 800c660:	065b      	lsls	r3, r3, #25
 800c662:	f53f af2d 	bmi.w	800c4c0 <_svfiprintf_r+0x28>
 800c666:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c668:	e72c      	b.n	800c4c4 <_svfiprintf_r+0x2c>
 800c66a:	ab03      	add	r3, sp, #12
 800c66c:	9300      	str	r3, [sp, #0]
 800c66e:	462a      	mov	r2, r5
 800c670:	4b05      	ldr	r3, [pc, #20]	@ (800c688 <_svfiprintf_r+0x1f0>)
 800c672:	a904      	add	r1, sp, #16
 800c674:	4638      	mov	r0, r7
 800c676:	f000 f879 	bl	800c76c <_printf_i>
 800c67a:	e7ed      	b.n	800c658 <_svfiprintf_r+0x1c0>
 800c67c:	0800e9a2 	.word	0x0800e9a2
 800c680:	0800e9ac 	.word	0x0800e9ac
 800c684:	00000000 	.word	0x00000000
 800c688:	0800c3e1 	.word	0x0800c3e1
 800c68c:	0800e9a8 	.word	0x0800e9a8

0800c690 <_printf_common>:
 800c690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c694:	4616      	mov	r6, r2
 800c696:	4698      	mov	r8, r3
 800c698:	688a      	ldr	r2, [r1, #8]
 800c69a:	690b      	ldr	r3, [r1, #16]
 800c69c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	bfb8      	it	lt
 800c6a4:	4613      	movlt	r3, r2
 800c6a6:	6033      	str	r3, [r6, #0]
 800c6a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c6ac:	4607      	mov	r7, r0
 800c6ae:	460c      	mov	r4, r1
 800c6b0:	b10a      	cbz	r2, 800c6b6 <_printf_common+0x26>
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	6033      	str	r3, [r6, #0]
 800c6b6:	6823      	ldr	r3, [r4, #0]
 800c6b8:	0699      	lsls	r1, r3, #26
 800c6ba:	bf42      	ittt	mi
 800c6bc:	6833      	ldrmi	r3, [r6, #0]
 800c6be:	3302      	addmi	r3, #2
 800c6c0:	6033      	strmi	r3, [r6, #0]
 800c6c2:	6825      	ldr	r5, [r4, #0]
 800c6c4:	f015 0506 	ands.w	r5, r5, #6
 800c6c8:	d106      	bne.n	800c6d8 <_printf_common+0x48>
 800c6ca:	f104 0a19 	add.w	sl, r4, #25
 800c6ce:	68e3      	ldr	r3, [r4, #12]
 800c6d0:	6832      	ldr	r2, [r6, #0]
 800c6d2:	1a9b      	subs	r3, r3, r2
 800c6d4:	42ab      	cmp	r3, r5
 800c6d6:	dc26      	bgt.n	800c726 <_printf_common+0x96>
 800c6d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c6dc:	6822      	ldr	r2, [r4, #0]
 800c6de:	3b00      	subs	r3, #0
 800c6e0:	bf18      	it	ne
 800c6e2:	2301      	movne	r3, #1
 800c6e4:	0692      	lsls	r2, r2, #26
 800c6e6:	d42b      	bmi.n	800c740 <_printf_common+0xb0>
 800c6e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c6ec:	4641      	mov	r1, r8
 800c6ee:	4638      	mov	r0, r7
 800c6f0:	47c8      	blx	r9
 800c6f2:	3001      	adds	r0, #1
 800c6f4:	d01e      	beq.n	800c734 <_printf_common+0xa4>
 800c6f6:	6823      	ldr	r3, [r4, #0]
 800c6f8:	6922      	ldr	r2, [r4, #16]
 800c6fa:	f003 0306 	and.w	r3, r3, #6
 800c6fe:	2b04      	cmp	r3, #4
 800c700:	bf02      	ittt	eq
 800c702:	68e5      	ldreq	r5, [r4, #12]
 800c704:	6833      	ldreq	r3, [r6, #0]
 800c706:	1aed      	subeq	r5, r5, r3
 800c708:	68a3      	ldr	r3, [r4, #8]
 800c70a:	bf0c      	ite	eq
 800c70c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c710:	2500      	movne	r5, #0
 800c712:	4293      	cmp	r3, r2
 800c714:	bfc4      	itt	gt
 800c716:	1a9b      	subgt	r3, r3, r2
 800c718:	18ed      	addgt	r5, r5, r3
 800c71a:	2600      	movs	r6, #0
 800c71c:	341a      	adds	r4, #26
 800c71e:	42b5      	cmp	r5, r6
 800c720:	d11a      	bne.n	800c758 <_printf_common+0xc8>
 800c722:	2000      	movs	r0, #0
 800c724:	e008      	b.n	800c738 <_printf_common+0xa8>
 800c726:	2301      	movs	r3, #1
 800c728:	4652      	mov	r2, sl
 800c72a:	4641      	mov	r1, r8
 800c72c:	4638      	mov	r0, r7
 800c72e:	47c8      	blx	r9
 800c730:	3001      	adds	r0, #1
 800c732:	d103      	bne.n	800c73c <_printf_common+0xac>
 800c734:	f04f 30ff 	mov.w	r0, #4294967295
 800c738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c73c:	3501      	adds	r5, #1
 800c73e:	e7c6      	b.n	800c6ce <_printf_common+0x3e>
 800c740:	18e1      	adds	r1, r4, r3
 800c742:	1c5a      	adds	r2, r3, #1
 800c744:	2030      	movs	r0, #48	@ 0x30
 800c746:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c74a:	4422      	add	r2, r4
 800c74c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c750:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c754:	3302      	adds	r3, #2
 800c756:	e7c7      	b.n	800c6e8 <_printf_common+0x58>
 800c758:	2301      	movs	r3, #1
 800c75a:	4622      	mov	r2, r4
 800c75c:	4641      	mov	r1, r8
 800c75e:	4638      	mov	r0, r7
 800c760:	47c8      	blx	r9
 800c762:	3001      	adds	r0, #1
 800c764:	d0e6      	beq.n	800c734 <_printf_common+0xa4>
 800c766:	3601      	adds	r6, #1
 800c768:	e7d9      	b.n	800c71e <_printf_common+0x8e>
	...

0800c76c <_printf_i>:
 800c76c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c770:	7e0f      	ldrb	r7, [r1, #24]
 800c772:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c774:	2f78      	cmp	r7, #120	@ 0x78
 800c776:	4691      	mov	r9, r2
 800c778:	4680      	mov	r8, r0
 800c77a:	460c      	mov	r4, r1
 800c77c:	469a      	mov	sl, r3
 800c77e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c782:	d807      	bhi.n	800c794 <_printf_i+0x28>
 800c784:	2f62      	cmp	r7, #98	@ 0x62
 800c786:	d80a      	bhi.n	800c79e <_printf_i+0x32>
 800c788:	2f00      	cmp	r7, #0
 800c78a:	f000 80d2 	beq.w	800c932 <_printf_i+0x1c6>
 800c78e:	2f58      	cmp	r7, #88	@ 0x58
 800c790:	f000 80b9 	beq.w	800c906 <_printf_i+0x19a>
 800c794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c798:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c79c:	e03a      	b.n	800c814 <_printf_i+0xa8>
 800c79e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c7a2:	2b15      	cmp	r3, #21
 800c7a4:	d8f6      	bhi.n	800c794 <_printf_i+0x28>
 800c7a6:	a101      	add	r1, pc, #4	@ (adr r1, 800c7ac <_printf_i+0x40>)
 800c7a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c7ac:	0800c805 	.word	0x0800c805
 800c7b0:	0800c819 	.word	0x0800c819
 800c7b4:	0800c795 	.word	0x0800c795
 800c7b8:	0800c795 	.word	0x0800c795
 800c7bc:	0800c795 	.word	0x0800c795
 800c7c0:	0800c795 	.word	0x0800c795
 800c7c4:	0800c819 	.word	0x0800c819
 800c7c8:	0800c795 	.word	0x0800c795
 800c7cc:	0800c795 	.word	0x0800c795
 800c7d0:	0800c795 	.word	0x0800c795
 800c7d4:	0800c795 	.word	0x0800c795
 800c7d8:	0800c919 	.word	0x0800c919
 800c7dc:	0800c843 	.word	0x0800c843
 800c7e0:	0800c8d3 	.word	0x0800c8d3
 800c7e4:	0800c795 	.word	0x0800c795
 800c7e8:	0800c795 	.word	0x0800c795
 800c7ec:	0800c93b 	.word	0x0800c93b
 800c7f0:	0800c795 	.word	0x0800c795
 800c7f4:	0800c843 	.word	0x0800c843
 800c7f8:	0800c795 	.word	0x0800c795
 800c7fc:	0800c795 	.word	0x0800c795
 800c800:	0800c8db 	.word	0x0800c8db
 800c804:	6833      	ldr	r3, [r6, #0]
 800c806:	1d1a      	adds	r2, r3, #4
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	6032      	str	r2, [r6, #0]
 800c80c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c810:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c814:	2301      	movs	r3, #1
 800c816:	e09d      	b.n	800c954 <_printf_i+0x1e8>
 800c818:	6833      	ldr	r3, [r6, #0]
 800c81a:	6820      	ldr	r0, [r4, #0]
 800c81c:	1d19      	adds	r1, r3, #4
 800c81e:	6031      	str	r1, [r6, #0]
 800c820:	0606      	lsls	r6, r0, #24
 800c822:	d501      	bpl.n	800c828 <_printf_i+0xbc>
 800c824:	681d      	ldr	r5, [r3, #0]
 800c826:	e003      	b.n	800c830 <_printf_i+0xc4>
 800c828:	0645      	lsls	r5, r0, #25
 800c82a:	d5fb      	bpl.n	800c824 <_printf_i+0xb8>
 800c82c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c830:	2d00      	cmp	r5, #0
 800c832:	da03      	bge.n	800c83c <_printf_i+0xd0>
 800c834:	232d      	movs	r3, #45	@ 0x2d
 800c836:	426d      	negs	r5, r5
 800c838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c83c:	4859      	ldr	r0, [pc, #356]	@ (800c9a4 <_printf_i+0x238>)
 800c83e:	230a      	movs	r3, #10
 800c840:	e011      	b.n	800c866 <_printf_i+0xfa>
 800c842:	6821      	ldr	r1, [r4, #0]
 800c844:	6833      	ldr	r3, [r6, #0]
 800c846:	0608      	lsls	r0, r1, #24
 800c848:	f853 5b04 	ldr.w	r5, [r3], #4
 800c84c:	d402      	bmi.n	800c854 <_printf_i+0xe8>
 800c84e:	0649      	lsls	r1, r1, #25
 800c850:	bf48      	it	mi
 800c852:	b2ad      	uxthmi	r5, r5
 800c854:	2f6f      	cmp	r7, #111	@ 0x6f
 800c856:	4853      	ldr	r0, [pc, #332]	@ (800c9a4 <_printf_i+0x238>)
 800c858:	6033      	str	r3, [r6, #0]
 800c85a:	bf14      	ite	ne
 800c85c:	230a      	movne	r3, #10
 800c85e:	2308      	moveq	r3, #8
 800c860:	2100      	movs	r1, #0
 800c862:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c866:	6866      	ldr	r6, [r4, #4]
 800c868:	60a6      	str	r6, [r4, #8]
 800c86a:	2e00      	cmp	r6, #0
 800c86c:	bfa2      	ittt	ge
 800c86e:	6821      	ldrge	r1, [r4, #0]
 800c870:	f021 0104 	bicge.w	r1, r1, #4
 800c874:	6021      	strge	r1, [r4, #0]
 800c876:	b90d      	cbnz	r5, 800c87c <_printf_i+0x110>
 800c878:	2e00      	cmp	r6, #0
 800c87a:	d04b      	beq.n	800c914 <_printf_i+0x1a8>
 800c87c:	4616      	mov	r6, r2
 800c87e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c882:	fb03 5711 	mls	r7, r3, r1, r5
 800c886:	5dc7      	ldrb	r7, [r0, r7]
 800c888:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c88c:	462f      	mov	r7, r5
 800c88e:	42bb      	cmp	r3, r7
 800c890:	460d      	mov	r5, r1
 800c892:	d9f4      	bls.n	800c87e <_printf_i+0x112>
 800c894:	2b08      	cmp	r3, #8
 800c896:	d10b      	bne.n	800c8b0 <_printf_i+0x144>
 800c898:	6823      	ldr	r3, [r4, #0]
 800c89a:	07df      	lsls	r7, r3, #31
 800c89c:	d508      	bpl.n	800c8b0 <_printf_i+0x144>
 800c89e:	6923      	ldr	r3, [r4, #16]
 800c8a0:	6861      	ldr	r1, [r4, #4]
 800c8a2:	4299      	cmp	r1, r3
 800c8a4:	bfde      	ittt	le
 800c8a6:	2330      	movle	r3, #48	@ 0x30
 800c8a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c8ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c8b0:	1b92      	subs	r2, r2, r6
 800c8b2:	6122      	str	r2, [r4, #16]
 800c8b4:	f8cd a000 	str.w	sl, [sp]
 800c8b8:	464b      	mov	r3, r9
 800c8ba:	aa03      	add	r2, sp, #12
 800c8bc:	4621      	mov	r1, r4
 800c8be:	4640      	mov	r0, r8
 800c8c0:	f7ff fee6 	bl	800c690 <_printf_common>
 800c8c4:	3001      	adds	r0, #1
 800c8c6:	d14a      	bne.n	800c95e <_printf_i+0x1f2>
 800c8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8cc:	b004      	add	sp, #16
 800c8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8d2:	6823      	ldr	r3, [r4, #0]
 800c8d4:	f043 0320 	orr.w	r3, r3, #32
 800c8d8:	6023      	str	r3, [r4, #0]
 800c8da:	4833      	ldr	r0, [pc, #204]	@ (800c9a8 <_printf_i+0x23c>)
 800c8dc:	2778      	movs	r7, #120	@ 0x78
 800c8de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c8e2:	6823      	ldr	r3, [r4, #0]
 800c8e4:	6831      	ldr	r1, [r6, #0]
 800c8e6:	061f      	lsls	r7, r3, #24
 800c8e8:	f851 5b04 	ldr.w	r5, [r1], #4
 800c8ec:	d402      	bmi.n	800c8f4 <_printf_i+0x188>
 800c8ee:	065f      	lsls	r7, r3, #25
 800c8f0:	bf48      	it	mi
 800c8f2:	b2ad      	uxthmi	r5, r5
 800c8f4:	6031      	str	r1, [r6, #0]
 800c8f6:	07d9      	lsls	r1, r3, #31
 800c8f8:	bf44      	itt	mi
 800c8fa:	f043 0320 	orrmi.w	r3, r3, #32
 800c8fe:	6023      	strmi	r3, [r4, #0]
 800c900:	b11d      	cbz	r5, 800c90a <_printf_i+0x19e>
 800c902:	2310      	movs	r3, #16
 800c904:	e7ac      	b.n	800c860 <_printf_i+0xf4>
 800c906:	4827      	ldr	r0, [pc, #156]	@ (800c9a4 <_printf_i+0x238>)
 800c908:	e7e9      	b.n	800c8de <_printf_i+0x172>
 800c90a:	6823      	ldr	r3, [r4, #0]
 800c90c:	f023 0320 	bic.w	r3, r3, #32
 800c910:	6023      	str	r3, [r4, #0]
 800c912:	e7f6      	b.n	800c902 <_printf_i+0x196>
 800c914:	4616      	mov	r6, r2
 800c916:	e7bd      	b.n	800c894 <_printf_i+0x128>
 800c918:	6833      	ldr	r3, [r6, #0]
 800c91a:	6825      	ldr	r5, [r4, #0]
 800c91c:	6961      	ldr	r1, [r4, #20]
 800c91e:	1d18      	adds	r0, r3, #4
 800c920:	6030      	str	r0, [r6, #0]
 800c922:	062e      	lsls	r6, r5, #24
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	d501      	bpl.n	800c92c <_printf_i+0x1c0>
 800c928:	6019      	str	r1, [r3, #0]
 800c92a:	e002      	b.n	800c932 <_printf_i+0x1c6>
 800c92c:	0668      	lsls	r0, r5, #25
 800c92e:	d5fb      	bpl.n	800c928 <_printf_i+0x1bc>
 800c930:	8019      	strh	r1, [r3, #0]
 800c932:	2300      	movs	r3, #0
 800c934:	6123      	str	r3, [r4, #16]
 800c936:	4616      	mov	r6, r2
 800c938:	e7bc      	b.n	800c8b4 <_printf_i+0x148>
 800c93a:	6833      	ldr	r3, [r6, #0]
 800c93c:	1d1a      	adds	r2, r3, #4
 800c93e:	6032      	str	r2, [r6, #0]
 800c940:	681e      	ldr	r6, [r3, #0]
 800c942:	6862      	ldr	r2, [r4, #4]
 800c944:	2100      	movs	r1, #0
 800c946:	4630      	mov	r0, r6
 800c948:	f7f3 fc4a 	bl	80001e0 <memchr>
 800c94c:	b108      	cbz	r0, 800c952 <_printf_i+0x1e6>
 800c94e:	1b80      	subs	r0, r0, r6
 800c950:	6060      	str	r0, [r4, #4]
 800c952:	6863      	ldr	r3, [r4, #4]
 800c954:	6123      	str	r3, [r4, #16]
 800c956:	2300      	movs	r3, #0
 800c958:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c95c:	e7aa      	b.n	800c8b4 <_printf_i+0x148>
 800c95e:	6923      	ldr	r3, [r4, #16]
 800c960:	4632      	mov	r2, r6
 800c962:	4649      	mov	r1, r9
 800c964:	4640      	mov	r0, r8
 800c966:	47d0      	blx	sl
 800c968:	3001      	adds	r0, #1
 800c96a:	d0ad      	beq.n	800c8c8 <_printf_i+0x15c>
 800c96c:	6823      	ldr	r3, [r4, #0]
 800c96e:	079b      	lsls	r3, r3, #30
 800c970:	d413      	bmi.n	800c99a <_printf_i+0x22e>
 800c972:	68e0      	ldr	r0, [r4, #12]
 800c974:	9b03      	ldr	r3, [sp, #12]
 800c976:	4298      	cmp	r0, r3
 800c978:	bfb8      	it	lt
 800c97a:	4618      	movlt	r0, r3
 800c97c:	e7a6      	b.n	800c8cc <_printf_i+0x160>
 800c97e:	2301      	movs	r3, #1
 800c980:	4632      	mov	r2, r6
 800c982:	4649      	mov	r1, r9
 800c984:	4640      	mov	r0, r8
 800c986:	47d0      	blx	sl
 800c988:	3001      	adds	r0, #1
 800c98a:	d09d      	beq.n	800c8c8 <_printf_i+0x15c>
 800c98c:	3501      	adds	r5, #1
 800c98e:	68e3      	ldr	r3, [r4, #12]
 800c990:	9903      	ldr	r1, [sp, #12]
 800c992:	1a5b      	subs	r3, r3, r1
 800c994:	42ab      	cmp	r3, r5
 800c996:	dcf2      	bgt.n	800c97e <_printf_i+0x212>
 800c998:	e7eb      	b.n	800c972 <_printf_i+0x206>
 800c99a:	2500      	movs	r5, #0
 800c99c:	f104 0619 	add.w	r6, r4, #25
 800c9a0:	e7f5      	b.n	800c98e <_printf_i+0x222>
 800c9a2:	bf00      	nop
 800c9a4:	0800e9b3 	.word	0x0800e9b3
 800c9a8:	0800e9c4 	.word	0x0800e9c4

0800c9ac <__sflush_r>:
 800c9ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b4:	0716      	lsls	r6, r2, #28
 800c9b6:	4605      	mov	r5, r0
 800c9b8:	460c      	mov	r4, r1
 800c9ba:	d454      	bmi.n	800ca66 <__sflush_r+0xba>
 800c9bc:	684b      	ldr	r3, [r1, #4]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	dc02      	bgt.n	800c9c8 <__sflush_r+0x1c>
 800c9c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	dd48      	ble.n	800ca5a <__sflush_r+0xae>
 800c9c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c9ca:	2e00      	cmp	r6, #0
 800c9cc:	d045      	beq.n	800ca5a <__sflush_r+0xae>
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c9d4:	682f      	ldr	r7, [r5, #0]
 800c9d6:	6a21      	ldr	r1, [r4, #32]
 800c9d8:	602b      	str	r3, [r5, #0]
 800c9da:	d030      	beq.n	800ca3e <__sflush_r+0x92>
 800c9dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c9de:	89a3      	ldrh	r3, [r4, #12]
 800c9e0:	0759      	lsls	r1, r3, #29
 800c9e2:	d505      	bpl.n	800c9f0 <__sflush_r+0x44>
 800c9e4:	6863      	ldr	r3, [r4, #4]
 800c9e6:	1ad2      	subs	r2, r2, r3
 800c9e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c9ea:	b10b      	cbz	r3, 800c9f0 <__sflush_r+0x44>
 800c9ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c9ee:	1ad2      	subs	r2, r2, r3
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c9f4:	6a21      	ldr	r1, [r4, #32]
 800c9f6:	4628      	mov	r0, r5
 800c9f8:	47b0      	blx	r6
 800c9fa:	1c43      	adds	r3, r0, #1
 800c9fc:	89a3      	ldrh	r3, [r4, #12]
 800c9fe:	d106      	bne.n	800ca0e <__sflush_r+0x62>
 800ca00:	6829      	ldr	r1, [r5, #0]
 800ca02:	291d      	cmp	r1, #29
 800ca04:	d82b      	bhi.n	800ca5e <__sflush_r+0xb2>
 800ca06:	4a2a      	ldr	r2, [pc, #168]	@ (800cab0 <__sflush_r+0x104>)
 800ca08:	410a      	asrs	r2, r1
 800ca0a:	07d6      	lsls	r6, r2, #31
 800ca0c:	d427      	bmi.n	800ca5e <__sflush_r+0xb2>
 800ca0e:	2200      	movs	r2, #0
 800ca10:	6062      	str	r2, [r4, #4]
 800ca12:	04d9      	lsls	r1, r3, #19
 800ca14:	6922      	ldr	r2, [r4, #16]
 800ca16:	6022      	str	r2, [r4, #0]
 800ca18:	d504      	bpl.n	800ca24 <__sflush_r+0x78>
 800ca1a:	1c42      	adds	r2, r0, #1
 800ca1c:	d101      	bne.n	800ca22 <__sflush_r+0x76>
 800ca1e:	682b      	ldr	r3, [r5, #0]
 800ca20:	b903      	cbnz	r3, 800ca24 <__sflush_r+0x78>
 800ca22:	6560      	str	r0, [r4, #84]	@ 0x54
 800ca24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca26:	602f      	str	r7, [r5, #0]
 800ca28:	b1b9      	cbz	r1, 800ca5a <__sflush_r+0xae>
 800ca2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca2e:	4299      	cmp	r1, r3
 800ca30:	d002      	beq.n	800ca38 <__sflush_r+0x8c>
 800ca32:	4628      	mov	r0, r5
 800ca34:	f7ff fbd4 	bl	800c1e0 <_free_r>
 800ca38:	2300      	movs	r3, #0
 800ca3a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca3c:	e00d      	b.n	800ca5a <__sflush_r+0xae>
 800ca3e:	2301      	movs	r3, #1
 800ca40:	4628      	mov	r0, r5
 800ca42:	47b0      	blx	r6
 800ca44:	4602      	mov	r2, r0
 800ca46:	1c50      	adds	r0, r2, #1
 800ca48:	d1c9      	bne.n	800c9de <__sflush_r+0x32>
 800ca4a:	682b      	ldr	r3, [r5, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d0c6      	beq.n	800c9de <__sflush_r+0x32>
 800ca50:	2b1d      	cmp	r3, #29
 800ca52:	d001      	beq.n	800ca58 <__sflush_r+0xac>
 800ca54:	2b16      	cmp	r3, #22
 800ca56:	d11e      	bne.n	800ca96 <__sflush_r+0xea>
 800ca58:	602f      	str	r7, [r5, #0]
 800ca5a:	2000      	movs	r0, #0
 800ca5c:	e022      	b.n	800caa4 <__sflush_r+0xf8>
 800ca5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca62:	b21b      	sxth	r3, r3
 800ca64:	e01b      	b.n	800ca9e <__sflush_r+0xf2>
 800ca66:	690f      	ldr	r7, [r1, #16]
 800ca68:	2f00      	cmp	r7, #0
 800ca6a:	d0f6      	beq.n	800ca5a <__sflush_r+0xae>
 800ca6c:	0793      	lsls	r3, r2, #30
 800ca6e:	680e      	ldr	r6, [r1, #0]
 800ca70:	bf08      	it	eq
 800ca72:	694b      	ldreq	r3, [r1, #20]
 800ca74:	600f      	str	r7, [r1, #0]
 800ca76:	bf18      	it	ne
 800ca78:	2300      	movne	r3, #0
 800ca7a:	eba6 0807 	sub.w	r8, r6, r7
 800ca7e:	608b      	str	r3, [r1, #8]
 800ca80:	f1b8 0f00 	cmp.w	r8, #0
 800ca84:	dde9      	ble.n	800ca5a <__sflush_r+0xae>
 800ca86:	6a21      	ldr	r1, [r4, #32]
 800ca88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ca8a:	4643      	mov	r3, r8
 800ca8c:	463a      	mov	r2, r7
 800ca8e:	4628      	mov	r0, r5
 800ca90:	47b0      	blx	r6
 800ca92:	2800      	cmp	r0, #0
 800ca94:	dc08      	bgt.n	800caa8 <__sflush_r+0xfc>
 800ca96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca9e:	81a3      	strh	r3, [r4, #12]
 800caa0:	f04f 30ff 	mov.w	r0, #4294967295
 800caa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa8:	4407      	add	r7, r0
 800caaa:	eba8 0800 	sub.w	r8, r8, r0
 800caae:	e7e7      	b.n	800ca80 <__sflush_r+0xd4>
 800cab0:	dfbffffe 	.word	0xdfbffffe

0800cab4 <_fflush_r>:
 800cab4:	b538      	push	{r3, r4, r5, lr}
 800cab6:	690b      	ldr	r3, [r1, #16]
 800cab8:	4605      	mov	r5, r0
 800caba:	460c      	mov	r4, r1
 800cabc:	b913      	cbnz	r3, 800cac4 <_fflush_r+0x10>
 800cabe:	2500      	movs	r5, #0
 800cac0:	4628      	mov	r0, r5
 800cac2:	bd38      	pop	{r3, r4, r5, pc}
 800cac4:	b118      	cbz	r0, 800cace <_fflush_r+0x1a>
 800cac6:	6a03      	ldr	r3, [r0, #32]
 800cac8:	b90b      	cbnz	r3, 800cace <_fflush_r+0x1a>
 800caca:	f7ff f9ad 	bl	800be28 <__sinit>
 800cace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d0f3      	beq.n	800cabe <_fflush_r+0xa>
 800cad6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cad8:	07d0      	lsls	r0, r2, #31
 800cada:	d404      	bmi.n	800cae6 <_fflush_r+0x32>
 800cadc:	0599      	lsls	r1, r3, #22
 800cade:	d402      	bmi.n	800cae6 <_fflush_r+0x32>
 800cae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cae2:	f7ff fb54 	bl	800c18e <__retarget_lock_acquire_recursive>
 800cae6:	4628      	mov	r0, r5
 800cae8:	4621      	mov	r1, r4
 800caea:	f7ff ff5f 	bl	800c9ac <__sflush_r>
 800caee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800caf0:	07da      	lsls	r2, r3, #31
 800caf2:	4605      	mov	r5, r0
 800caf4:	d4e4      	bmi.n	800cac0 <_fflush_r+0xc>
 800caf6:	89a3      	ldrh	r3, [r4, #12]
 800caf8:	059b      	lsls	r3, r3, #22
 800cafa:	d4e1      	bmi.n	800cac0 <_fflush_r+0xc>
 800cafc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cafe:	f7ff fb47 	bl	800c190 <__retarget_lock_release_recursive>
 800cb02:	e7dd      	b.n	800cac0 <_fflush_r+0xc>

0800cb04 <fiprintf>:
 800cb04:	b40e      	push	{r1, r2, r3}
 800cb06:	b503      	push	{r0, r1, lr}
 800cb08:	4601      	mov	r1, r0
 800cb0a:	ab03      	add	r3, sp, #12
 800cb0c:	4805      	ldr	r0, [pc, #20]	@ (800cb24 <fiprintf+0x20>)
 800cb0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb12:	6800      	ldr	r0, [r0, #0]
 800cb14:	9301      	str	r3, [sp, #4]
 800cb16:	f000 f89d 	bl	800cc54 <_vfiprintf_r>
 800cb1a:	b002      	add	sp, #8
 800cb1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb20:	b003      	add	sp, #12
 800cb22:	4770      	bx	lr
 800cb24:	20000034 	.word	0x20000034

0800cb28 <memmove>:
 800cb28:	4288      	cmp	r0, r1
 800cb2a:	b510      	push	{r4, lr}
 800cb2c:	eb01 0402 	add.w	r4, r1, r2
 800cb30:	d902      	bls.n	800cb38 <memmove+0x10>
 800cb32:	4284      	cmp	r4, r0
 800cb34:	4623      	mov	r3, r4
 800cb36:	d807      	bhi.n	800cb48 <memmove+0x20>
 800cb38:	1e43      	subs	r3, r0, #1
 800cb3a:	42a1      	cmp	r1, r4
 800cb3c:	d008      	beq.n	800cb50 <memmove+0x28>
 800cb3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb46:	e7f8      	b.n	800cb3a <memmove+0x12>
 800cb48:	4402      	add	r2, r0
 800cb4a:	4601      	mov	r1, r0
 800cb4c:	428a      	cmp	r2, r1
 800cb4e:	d100      	bne.n	800cb52 <memmove+0x2a>
 800cb50:	bd10      	pop	{r4, pc}
 800cb52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb5a:	e7f7      	b.n	800cb4c <memmove+0x24>

0800cb5c <_sbrk_r>:
 800cb5c:	b538      	push	{r3, r4, r5, lr}
 800cb5e:	4d06      	ldr	r5, [pc, #24]	@ (800cb78 <_sbrk_r+0x1c>)
 800cb60:	2300      	movs	r3, #0
 800cb62:	4604      	mov	r4, r0
 800cb64:	4608      	mov	r0, r1
 800cb66:	602b      	str	r3, [r5, #0]
 800cb68:	f7fa ff40 	bl	80079ec <_sbrk>
 800cb6c:	1c43      	adds	r3, r0, #1
 800cb6e:	d102      	bne.n	800cb76 <_sbrk_r+0x1a>
 800cb70:	682b      	ldr	r3, [r5, #0]
 800cb72:	b103      	cbz	r3, 800cb76 <_sbrk_r+0x1a>
 800cb74:	6023      	str	r3, [r4, #0]
 800cb76:	bd38      	pop	{r3, r4, r5, pc}
 800cb78:	20016d88 	.word	0x20016d88

0800cb7c <memcpy>:
 800cb7c:	440a      	add	r2, r1
 800cb7e:	4291      	cmp	r1, r2
 800cb80:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb84:	d100      	bne.n	800cb88 <memcpy+0xc>
 800cb86:	4770      	bx	lr
 800cb88:	b510      	push	{r4, lr}
 800cb8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb92:	4291      	cmp	r1, r2
 800cb94:	d1f9      	bne.n	800cb8a <memcpy+0xe>
 800cb96:	bd10      	pop	{r4, pc}

0800cb98 <abort>:
 800cb98:	b508      	push	{r3, lr}
 800cb9a:	2006      	movs	r0, #6
 800cb9c:	f000 fa2e 	bl	800cffc <raise>
 800cba0:	2001      	movs	r0, #1
 800cba2:	f7fa feab 	bl	80078fc <_exit>

0800cba6 <_realloc_r>:
 800cba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbaa:	4680      	mov	r8, r0
 800cbac:	4615      	mov	r5, r2
 800cbae:	460c      	mov	r4, r1
 800cbb0:	b921      	cbnz	r1, 800cbbc <_realloc_r+0x16>
 800cbb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb6:	4611      	mov	r1, r2
 800cbb8:	f7ff bb86 	b.w	800c2c8 <_malloc_r>
 800cbbc:	b92a      	cbnz	r2, 800cbca <_realloc_r+0x24>
 800cbbe:	f7ff fb0f 	bl	800c1e0 <_free_r>
 800cbc2:	2400      	movs	r4, #0
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbca:	f000 fa33 	bl	800d034 <_malloc_usable_size_r>
 800cbce:	4285      	cmp	r5, r0
 800cbd0:	4606      	mov	r6, r0
 800cbd2:	d802      	bhi.n	800cbda <_realloc_r+0x34>
 800cbd4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cbd8:	d8f4      	bhi.n	800cbc4 <_realloc_r+0x1e>
 800cbda:	4629      	mov	r1, r5
 800cbdc:	4640      	mov	r0, r8
 800cbde:	f7ff fb73 	bl	800c2c8 <_malloc_r>
 800cbe2:	4607      	mov	r7, r0
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	d0ec      	beq.n	800cbc2 <_realloc_r+0x1c>
 800cbe8:	42b5      	cmp	r5, r6
 800cbea:	462a      	mov	r2, r5
 800cbec:	4621      	mov	r1, r4
 800cbee:	bf28      	it	cs
 800cbf0:	4632      	movcs	r2, r6
 800cbf2:	f7ff ffc3 	bl	800cb7c <memcpy>
 800cbf6:	4621      	mov	r1, r4
 800cbf8:	4640      	mov	r0, r8
 800cbfa:	f7ff faf1 	bl	800c1e0 <_free_r>
 800cbfe:	463c      	mov	r4, r7
 800cc00:	e7e0      	b.n	800cbc4 <_realloc_r+0x1e>

0800cc02 <__sfputc_r>:
 800cc02:	6893      	ldr	r3, [r2, #8]
 800cc04:	3b01      	subs	r3, #1
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	b410      	push	{r4}
 800cc0a:	6093      	str	r3, [r2, #8]
 800cc0c:	da08      	bge.n	800cc20 <__sfputc_r+0x1e>
 800cc0e:	6994      	ldr	r4, [r2, #24]
 800cc10:	42a3      	cmp	r3, r4
 800cc12:	db01      	blt.n	800cc18 <__sfputc_r+0x16>
 800cc14:	290a      	cmp	r1, #10
 800cc16:	d103      	bne.n	800cc20 <__sfputc_r+0x1e>
 800cc18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc1c:	f000 b932 	b.w	800ce84 <__swbuf_r>
 800cc20:	6813      	ldr	r3, [r2, #0]
 800cc22:	1c58      	adds	r0, r3, #1
 800cc24:	6010      	str	r0, [r2, #0]
 800cc26:	7019      	strb	r1, [r3, #0]
 800cc28:	4608      	mov	r0, r1
 800cc2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <__sfputs_r>:
 800cc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc32:	4606      	mov	r6, r0
 800cc34:	460f      	mov	r7, r1
 800cc36:	4614      	mov	r4, r2
 800cc38:	18d5      	adds	r5, r2, r3
 800cc3a:	42ac      	cmp	r4, r5
 800cc3c:	d101      	bne.n	800cc42 <__sfputs_r+0x12>
 800cc3e:	2000      	movs	r0, #0
 800cc40:	e007      	b.n	800cc52 <__sfputs_r+0x22>
 800cc42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc46:	463a      	mov	r2, r7
 800cc48:	4630      	mov	r0, r6
 800cc4a:	f7ff ffda 	bl	800cc02 <__sfputc_r>
 800cc4e:	1c43      	adds	r3, r0, #1
 800cc50:	d1f3      	bne.n	800cc3a <__sfputs_r+0xa>
 800cc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc54 <_vfiprintf_r>:
 800cc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc58:	460d      	mov	r5, r1
 800cc5a:	b09d      	sub	sp, #116	@ 0x74
 800cc5c:	4614      	mov	r4, r2
 800cc5e:	4698      	mov	r8, r3
 800cc60:	4606      	mov	r6, r0
 800cc62:	b118      	cbz	r0, 800cc6c <_vfiprintf_r+0x18>
 800cc64:	6a03      	ldr	r3, [r0, #32]
 800cc66:	b90b      	cbnz	r3, 800cc6c <_vfiprintf_r+0x18>
 800cc68:	f7ff f8de 	bl	800be28 <__sinit>
 800cc6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc6e:	07d9      	lsls	r1, r3, #31
 800cc70:	d405      	bmi.n	800cc7e <_vfiprintf_r+0x2a>
 800cc72:	89ab      	ldrh	r3, [r5, #12]
 800cc74:	059a      	lsls	r2, r3, #22
 800cc76:	d402      	bmi.n	800cc7e <_vfiprintf_r+0x2a>
 800cc78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc7a:	f7ff fa88 	bl	800c18e <__retarget_lock_acquire_recursive>
 800cc7e:	89ab      	ldrh	r3, [r5, #12]
 800cc80:	071b      	lsls	r3, r3, #28
 800cc82:	d501      	bpl.n	800cc88 <_vfiprintf_r+0x34>
 800cc84:	692b      	ldr	r3, [r5, #16]
 800cc86:	b99b      	cbnz	r3, 800ccb0 <_vfiprintf_r+0x5c>
 800cc88:	4629      	mov	r1, r5
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	f000 f938 	bl	800cf00 <__swsetup_r>
 800cc90:	b170      	cbz	r0, 800ccb0 <_vfiprintf_r+0x5c>
 800cc92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc94:	07dc      	lsls	r4, r3, #31
 800cc96:	d504      	bpl.n	800cca2 <_vfiprintf_r+0x4e>
 800cc98:	f04f 30ff 	mov.w	r0, #4294967295
 800cc9c:	b01d      	add	sp, #116	@ 0x74
 800cc9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca2:	89ab      	ldrh	r3, [r5, #12]
 800cca4:	0598      	lsls	r0, r3, #22
 800cca6:	d4f7      	bmi.n	800cc98 <_vfiprintf_r+0x44>
 800cca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccaa:	f7ff fa71 	bl	800c190 <__retarget_lock_release_recursive>
 800ccae:	e7f3      	b.n	800cc98 <_vfiprintf_r+0x44>
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccb4:	2320      	movs	r3, #32
 800ccb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ccba:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccbe:	2330      	movs	r3, #48	@ 0x30
 800ccc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ce70 <_vfiprintf_r+0x21c>
 800ccc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ccc8:	f04f 0901 	mov.w	r9, #1
 800cccc:	4623      	mov	r3, r4
 800ccce:	469a      	mov	sl, r3
 800ccd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccd4:	b10a      	cbz	r2, 800ccda <_vfiprintf_r+0x86>
 800ccd6:	2a25      	cmp	r2, #37	@ 0x25
 800ccd8:	d1f9      	bne.n	800ccce <_vfiprintf_r+0x7a>
 800ccda:	ebba 0b04 	subs.w	fp, sl, r4
 800ccde:	d00b      	beq.n	800ccf8 <_vfiprintf_r+0xa4>
 800cce0:	465b      	mov	r3, fp
 800cce2:	4622      	mov	r2, r4
 800cce4:	4629      	mov	r1, r5
 800cce6:	4630      	mov	r0, r6
 800cce8:	f7ff ffa2 	bl	800cc30 <__sfputs_r>
 800ccec:	3001      	adds	r0, #1
 800ccee:	f000 80a7 	beq.w	800ce40 <_vfiprintf_r+0x1ec>
 800ccf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccf4:	445a      	add	r2, fp
 800ccf6:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccf8:	f89a 3000 	ldrb.w	r3, [sl]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	f000 809f 	beq.w	800ce40 <_vfiprintf_r+0x1ec>
 800cd02:	2300      	movs	r3, #0
 800cd04:	f04f 32ff 	mov.w	r2, #4294967295
 800cd08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd0c:	f10a 0a01 	add.w	sl, sl, #1
 800cd10:	9304      	str	r3, [sp, #16]
 800cd12:	9307      	str	r3, [sp, #28]
 800cd14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd18:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd1a:	4654      	mov	r4, sl
 800cd1c:	2205      	movs	r2, #5
 800cd1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd22:	4853      	ldr	r0, [pc, #332]	@ (800ce70 <_vfiprintf_r+0x21c>)
 800cd24:	f7f3 fa5c 	bl	80001e0 <memchr>
 800cd28:	9a04      	ldr	r2, [sp, #16]
 800cd2a:	b9d8      	cbnz	r0, 800cd64 <_vfiprintf_r+0x110>
 800cd2c:	06d1      	lsls	r1, r2, #27
 800cd2e:	bf44      	itt	mi
 800cd30:	2320      	movmi	r3, #32
 800cd32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd36:	0713      	lsls	r3, r2, #28
 800cd38:	bf44      	itt	mi
 800cd3a:	232b      	movmi	r3, #43	@ 0x2b
 800cd3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd40:	f89a 3000 	ldrb.w	r3, [sl]
 800cd44:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd46:	d015      	beq.n	800cd74 <_vfiprintf_r+0x120>
 800cd48:	9a07      	ldr	r2, [sp, #28]
 800cd4a:	4654      	mov	r4, sl
 800cd4c:	2000      	movs	r0, #0
 800cd4e:	f04f 0c0a 	mov.w	ip, #10
 800cd52:	4621      	mov	r1, r4
 800cd54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd58:	3b30      	subs	r3, #48	@ 0x30
 800cd5a:	2b09      	cmp	r3, #9
 800cd5c:	d94b      	bls.n	800cdf6 <_vfiprintf_r+0x1a2>
 800cd5e:	b1b0      	cbz	r0, 800cd8e <_vfiprintf_r+0x13a>
 800cd60:	9207      	str	r2, [sp, #28]
 800cd62:	e014      	b.n	800cd8e <_vfiprintf_r+0x13a>
 800cd64:	eba0 0308 	sub.w	r3, r0, r8
 800cd68:	fa09 f303 	lsl.w	r3, r9, r3
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	9304      	str	r3, [sp, #16]
 800cd70:	46a2      	mov	sl, r4
 800cd72:	e7d2      	b.n	800cd1a <_vfiprintf_r+0xc6>
 800cd74:	9b03      	ldr	r3, [sp, #12]
 800cd76:	1d19      	adds	r1, r3, #4
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	9103      	str	r1, [sp, #12]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	bfbb      	ittet	lt
 800cd80:	425b      	neglt	r3, r3
 800cd82:	f042 0202 	orrlt.w	r2, r2, #2
 800cd86:	9307      	strge	r3, [sp, #28]
 800cd88:	9307      	strlt	r3, [sp, #28]
 800cd8a:	bfb8      	it	lt
 800cd8c:	9204      	strlt	r2, [sp, #16]
 800cd8e:	7823      	ldrb	r3, [r4, #0]
 800cd90:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd92:	d10a      	bne.n	800cdaa <_vfiprintf_r+0x156>
 800cd94:	7863      	ldrb	r3, [r4, #1]
 800cd96:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd98:	d132      	bne.n	800ce00 <_vfiprintf_r+0x1ac>
 800cd9a:	9b03      	ldr	r3, [sp, #12]
 800cd9c:	1d1a      	adds	r2, r3, #4
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	9203      	str	r2, [sp, #12]
 800cda2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cda6:	3402      	adds	r4, #2
 800cda8:	9305      	str	r3, [sp, #20]
 800cdaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ce80 <_vfiprintf_r+0x22c>
 800cdae:	7821      	ldrb	r1, [r4, #0]
 800cdb0:	2203      	movs	r2, #3
 800cdb2:	4650      	mov	r0, sl
 800cdb4:	f7f3 fa14 	bl	80001e0 <memchr>
 800cdb8:	b138      	cbz	r0, 800cdca <_vfiprintf_r+0x176>
 800cdba:	9b04      	ldr	r3, [sp, #16]
 800cdbc:	eba0 000a 	sub.w	r0, r0, sl
 800cdc0:	2240      	movs	r2, #64	@ 0x40
 800cdc2:	4082      	lsls	r2, r0
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	3401      	adds	r4, #1
 800cdc8:	9304      	str	r3, [sp, #16]
 800cdca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdce:	4829      	ldr	r0, [pc, #164]	@ (800ce74 <_vfiprintf_r+0x220>)
 800cdd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cdd4:	2206      	movs	r2, #6
 800cdd6:	f7f3 fa03 	bl	80001e0 <memchr>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d03f      	beq.n	800ce5e <_vfiprintf_r+0x20a>
 800cdde:	4b26      	ldr	r3, [pc, #152]	@ (800ce78 <_vfiprintf_r+0x224>)
 800cde0:	bb1b      	cbnz	r3, 800ce2a <_vfiprintf_r+0x1d6>
 800cde2:	9b03      	ldr	r3, [sp, #12]
 800cde4:	3307      	adds	r3, #7
 800cde6:	f023 0307 	bic.w	r3, r3, #7
 800cdea:	3308      	adds	r3, #8
 800cdec:	9303      	str	r3, [sp, #12]
 800cdee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdf0:	443b      	add	r3, r7
 800cdf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdf4:	e76a      	b.n	800cccc <_vfiprintf_r+0x78>
 800cdf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdfa:	460c      	mov	r4, r1
 800cdfc:	2001      	movs	r0, #1
 800cdfe:	e7a8      	b.n	800cd52 <_vfiprintf_r+0xfe>
 800ce00:	2300      	movs	r3, #0
 800ce02:	3401      	adds	r4, #1
 800ce04:	9305      	str	r3, [sp, #20]
 800ce06:	4619      	mov	r1, r3
 800ce08:	f04f 0c0a 	mov.w	ip, #10
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce12:	3a30      	subs	r2, #48	@ 0x30
 800ce14:	2a09      	cmp	r2, #9
 800ce16:	d903      	bls.n	800ce20 <_vfiprintf_r+0x1cc>
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d0c6      	beq.n	800cdaa <_vfiprintf_r+0x156>
 800ce1c:	9105      	str	r1, [sp, #20]
 800ce1e:	e7c4      	b.n	800cdaa <_vfiprintf_r+0x156>
 800ce20:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce24:	4604      	mov	r4, r0
 800ce26:	2301      	movs	r3, #1
 800ce28:	e7f0      	b.n	800ce0c <_vfiprintf_r+0x1b8>
 800ce2a:	ab03      	add	r3, sp, #12
 800ce2c:	9300      	str	r3, [sp, #0]
 800ce2e:	462a      	mov	r2, r5
 800ce30:	4b12      	ldr	r3, [pc, #72]	@ (800ce7c <_vfiprintf_r+0x228>)
 800ce32:	a904      	add	r1, sp, #16
 800ce34:	4630      	mov	r0, r6
 800ce36:	f3af 8000 	nop.w
 800ce3a:	4607      	mov	r7, r0
 800ce3c:	1c78      	adds	r0, r7, #1
 800ce3e:	d1d6      	bne.n	800cdee <_vfiprintf_r+0x19a>
 800ce40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce42:	07d9      	lsls	r1, r3, #31
 800ce44:	d405      	bmi.n	800ce52 <_vfiprintf_r+0x1fe>
 800ce46:	89ab      	ldrh	r3, [r5, #12]
 800ce48:	059a      	lsls	r2, r3, #22
 800ce4a:	d402      	bmi.n	800ce52 <_vfiprintf_r+0x1fe>
 800ce4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce4e:	f7ff f99f 	bl	800c190 <__retarget_lock_release_recursive>
 800ce52:	89ab      	ldrh	r3, [r5, #12]
 800ce54:	065b      	lsls	r3, r3, #25
 800ce56:	f53f af1f 	bmi.w	800cc98 <_vfiprintf_r+0x44>
 800ce5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce5c:	e71e      	b.n	800cc9c <_vfiprintf_r+0x48>
 800ce5e:	ab03      	add	r3, sp, #12
 800ce60:	9300      	str	r3, [sp, #0]
 800ce62:	462a      	mov	r2, r5
 800ce64:	4b05      	ldr	r3, [pc, #20]	@ (800ce7c <_vfiprintf_r+0x228>)
 800ce66:	a904      	add	r1, sp, #16
 800ce68:	4630      	mov	r0, r6
 800ce6a:	f7ff fc7f 	bl	800c76c <_printf_i>
 800ce6e:	e7e4      	b.n	800ce3a <_vfiprintf_r+0x1e6>
 800ce70:	0800e9a2 	.word	0x0800e9a2
 800ce74:	0800e9ac 	.word	0x0800e9ac
 800ce78:	00000000 	.word	0x00000000
 800ce7c:	0800cc31 	.word	0x0800cc31
 800ce80:	0800e9a8 	.word	0x0800e9a8

0800ce84 <__swbuf_r>:
 800ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce86:	460e      	mov	r6, r1
 800ce88:	4614      	mov	r4, r2
 800ce8a:	4605      	mov	r5, r0
 800ce8c:	b118      	cbz	r0, 800ce96 <__swbuf_r+0x12>
 800ce8e:	6a03      	ldr	r3, [r0, #32]
 800ce90:	b90b      	cbnz	r3, 800ce96 <__swbuf_r+0x12>
 800ce92:	f7fe ffc9 	bl	800be28 <__sinit>
 800ce96:	69a3      	ldr	r3, [r4, #24]
 800ce98:	60a3      	str	r3, [r4, #8]
 800ce9a:	89a3      	ldrh	r3, [r4, #12]
 800ce9c:	071a      	lsls	r2, r3, #28
 800ce9e:	d501      	bpl.n	800cea4 <__swbuf_r+0x20>
 800cea0:	6923      	ldr	r3, [r4, #16]
 800cea2:	b943      	cbnz	r3, 800ceb6 <__swbuf_r+0x32>
 800cea4:	4621      	mov	r1, r4
 800cea6:	4628      	mov	r0, r5
 800cea8:	f000 f82a 	bl	800cf00 <__swsetup_r>
 800ceac:	b118      	cbz	r0, 800ceb6 <__swbuf_r+0x32>
 800ceae:	f04f 37ff 	mov.w	r7, #4294967295
 800ceb2:	4638      	mov	r0, r7
 800ceb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceb6:	6823      	ldr	r3, [r4, #0]
 800ceb8:	6922      	ldr	r2, [r4, #16]
 800ceba:	1a98      	subs	r0, r3, r2
 800cebc:	6963      	ldr	r3, [r4, #20]
 800cebe:	b2f6      	uxtb	r6, r6
 800cec0:	4283      	cmp	r3, r0
 800cec2:	4637      	mov	r7, r6
 800cec4:	dc05      	bgt.n	800ced2 <__swbuf_r+0x4e>
 800cec6:	4621      	mov	r1, r4
 800cec8:	4628      	mov	r0, r5
 800ceca:	f7ff fdf3 	bl	800cab4 <_fflush_r>
 800cece:	2800      	cmp	r0, #0
 800ced0:	d1ed      	bne.n	800ceae <__swbuf_r+0x2a>
 800ced2:	68a3      	ldr	r3, [r4, #8]
 800ced4:	3b01      	subs	r3, #1
 800ced6:	60a3      	str	r3, [r4, #8]
 800ced8:	6823      	ldr	r3, [r4, #0]
 800ceda:	1c5a      	adds	r2, r3, #1
 800cedc:	6022      	str	r2, [r4, #0]
 800cede:	701e      	strb	r6, [r3, #0]
 800cee0:	6962      	ldr	r2, [r4, #20]
 800cee2:	1c43      	adds	r3, r0, #1
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d004      	beq.n	800cef2 <__swbuf_r+0x6e>
 800cee8:	89a3      	ldrh	r3, [r4, #12]
 800ceea:	07db      	lsls	r3, r3, #31
 800ceec:	d5e1      	bpl.n	800ceb2 <__swbuf_r+0x2e>
 800ceee:	2e0a      	cmp	r6, #10
 800cef0:	d1df      	bne.n	800ceb2 <__swbuf_r+0x2e>
 800cef2:	4621      	mov	r1, r4
 800cef4:	4628      	mov	r0, r5
 800cef6:	f7ff fddd 	bl	800cab4 <_fflush_r>
 800cefa:	2800      	cmp	r0, #0
 800cefc:	d0d9      	beq.n	800ceb2 <__swbuf_r+0x2e>
 800cefe:	e7d6      	b.n	800ceae <__swbuf_r+0x2a>

0800cf00 <__swsetup_r>:
 800cf00:	b538      	push	{r3, r4, r5, lr}
 800cf02:	4b29      	ldr	r3, [pc, #164]	@ (800cfa8 <__swsetup_r+0xa8>)
 800cf04:	4605      	mov	r5, r0
 800cf06:	6818      	ldr	r0, [r3, #0]
 800cf08:	460c      	mov	r4, r1
 800cf0a:	b118      	cbz	r0, 800cf14 <__swsetup_r+0x14>
 800cf0c:	6a03      	ldr	r3, [r0, #32]
 800cf0e:	b90b      	cbnz	r3, 800cf14 <__swsetup_r+0x14>
 800cf10:	f7fe ff8a 	bl	800be28 <__sinit>
 800cf14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf18:	0719      	lsls	r1, r3, #28
 800cf1a:	d422      	bmi.n	800cf62 <__swsetup_r+0x62>
 800cf1c:	06da      	lsls	r2, r3, #27
 800cf1e:	d407      	bmi.n	800cf30 <__swsetup_r+0x30>
 800cf20:	2209      	movs	r2, #9
 800cf22:	602a      	str	r2, [r5, #0]
 800cf24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf28:	81a3      	strh	r3, [r4, #12]
 800cf2a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf2e:	e033      	b.n	800cf98 <__swsetup_r+0x98>
 800cf30:	0758      	lsls	r0, r3, #29
 800cf32:	d512      	bpl.n	800cf5a <__swsetup_r+0x5a>
 800cf34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf36:	b141      	cbz	r1, 800cf4a <__swsetup_r+0x4a>
 800cf38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf3c:	4299      	cmp	r1, r3
 800cf3e:	d002      	beq.n	800cf46 <__swsetup_r+0x46>
 800cf40:	4628      	mov	r0, r5
 800cf42:	f7ff f94d 	bl	800c1e0 <_free_r>
 800cf46:	2300      	movs	r3, #0
 800cf48:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf4a:	89a3      	ldrh	r3, [r4, #12]
 800cf4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cf50:	81a3      	strh	r3, [r4, #12]
 800cf52:	2300      	movs	r3, #0
 800cf54:	6063      	str	r3, [r4, #4]
 800cf56:	6923      	ldr	r3, [r4, #16]
 800cf58:	6023      	str	r3, [r4, #0]
 800cf5a:	89a3      	ldrh	r3, [r4, #12]
 800cf5c:	f043 0308 	orr.w	r3, r3, #8
 800cf60:	81a3      	strh	r3, [r4, #12]
 800cf62:	6923      	ldr	r3, [r4, #16]
 800cf64:	b94b      	cbnz	r3, 800cf7a <__swsetup_r+0x7a>
 800cf66:	89a3      	ldrh	r3, [r4, #12]
 800cf68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cf6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf70:	d003      	beq.n	800cf7a <__swsetup_r+0x7a>
 800cf72:	4621      	mov	r1, r4
 800cf74:	4628      	mov	r0, r5
 800cf76:	f000 f88b 	bl	800d090 <__smakebuf_r>
 800cf7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf7e:	f013 0201 	ands.w	r2, r3, #1
 800cf82:	d00a      	beq.n	800cf9a <__swsetup_r+0x9a>
 800cf84:	2200      	movs	r2, #0
 800cf86:	60a2      	str	r2, [r4, #8]
 800cf88:	6962      	ldr	r2, [r4, #20]
 800cf8a:	4252      	negs	r2, r2
 800cf8c:	61a2      	str	r2, [r4, #24]
 800cf8e:	6922      	ldr	r2, [r4, #16]
 800cf90:	b942      	cbnz	r2, 800cfa4 <__swsetup_r+0xa4>
 800cf92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cf96:	d1c5      	bne.n	800cf24 <__swsetup_r+0x24>
 800cf98:	bd38      	pop	{r3, r4, r5, pc}
 800cf9a:	0799      	lsls	r1, r3, #30
 800cf9c:	bf58      	it	pl
 800cf9e:	6962      	ldrpl	r2, [r4, #20]
 800cfa0:	60a2      	str	r2, [r4, #8]
 800cfa2:	e7f4      	b.n	800cf8e <__swsetup_r+0x8e>
 800cfa4:	2000      	movs	r0, #0
 800cfa6:	e7f7      	b.n	800cf98 <__swsetup_r+0x98>
 800cfa8:	20000034 	.word	0x20000034

0800cfac <_raise_r>:
 800cfac:	291f      	cmp	r1, #31
 800cfae:	b538      	push	{r3, r4, r5, lr}
 800cfb0:	4605      	mov	r5, r0
 800cfb2:	460c      	mov	r4, r1
 800cfb4:	d904      	bls.n	800cfc0 <_raise_r+0x14>
 800cfb6:	2316      	movs	r3, #22
 800cfb8:	6003      	str	r3, [r0, #0]
 800cfba:	f04f 30ff 	mov.w	r0, #4294967295
 800cfbe:	bd38      	pop	{r3, r4, r5, pc}
 800cfc0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cfc2:	b112      	cbz	r2, 800cfca <_raise_r+0x1e>
 800cfc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfc8:	b94b      	cbnz	r3, 800cfde <_raise_r+0x32>
 800cfca:	4628      	mov	r0, r5
 800cfcc:	f000 f830 	bl	800d030 <_getpid_r>
 800cfd0:	4622      	mov	r2, r4
 800cfd2:	4601      	mov	r1, r0
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfda:	f000 b817 	b.w	800d00c <_kill_r>
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d00a      	beq.n	800cff8 <_raise_r+0x4c>
 800cfe2:	1c59      	adds	r1, r3, #1
 800cfe4:	d103      	bne.n	800cfee <_raise_r+0x42>
 800cfe6:	2316      	movs	r3, #22
 800cfe8:	6003      	str	r3, [r0, #0]
 800cfea:	2001      	movs	r0, #1
 800cfec:	e7e7      	b.n	800cfbe <_raise_r+0x12>
 800cfee:	2100      	movs	r1, #0
 800cff0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cff4:	4620      	mov	r0, r4
 800cff6:	4798      	blx	r3
 800cff8:	2000      	movs	r0, #0
 800cffa:	e7e0      	b.n	800cfbe <_raise_r+0x12>

0800cffc <raise>:
 800cffc:	4b02      	ldr	r3, [pc, #8]	@ (800d008 <raise+0xc>)
 800cffe:	4601      	mov	r1, r0
 800d000:	6818      	ldr	r0, [r3, #0]
 800d002:	f7ff bfd3 	b.w	800cfac <_raise_r>
 800d006:	bf00      	nop
 800d008:	20000034 	.word	0x20000034

0800d00c <_kill_r>:
 800d00c:	b538      	push	{r3, r4, r5, lr}
 800d00e:	4d07      	ldr	r5, [pc, #28]	@ (800d02c <_kill_r+0x20>)
 800d010:	2300      	movs	r3, #0
 800d012:	4604      	mov	r4, r0
 800d014:	4608      	mov	r0, r1
 800d016:	4611      	mov	r1, r2
 800d018:	602b      	str	r3, [r5, #0]
 800d01a:	f7fa fc5f 	bl	80078dc <_kill>
 800d01e:	1c43      	adds	r3, r0, #1
 800d020:	d102      	bne.n	800d028 <_kill_r+0x1c>
 800d022:	682b      	ldr	r3, [r5, #0]
 800d024:	b103      	cbz	r3, 800d028 <_kill_r+0x1c>
 800d026:	6023      	str	r3, [r4, #0]
 800d028:	bd38      	pop	{r3, r4, r5, pc}
 800d02a:	bf00      	nop
 800d02c:	20016d88 	.word	0x20016d88

0800d030 <_getpid_r>:
 800d030:	f7fa bc4c 	b.w	80078cc <_getpid>

0800d034 <_malloc_usable_size_r>:
 800d034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d038:	1f18      	subs	r0, r3, #4
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	bfbc      	itt	lt
 800d03e:	580b      	ldrlt	r3, [r1, r0]
 800d040:	18c0      	addlt	r0, r0, r3
 800d042:	4770      	bx	lr

0800d044 <__swhatbuf_r>:
 800d044:	b570      	push	{r4, r5, r6, lr}
 800d046:	460c      	mov	r4, r1
 800d048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d04c:	2900      	cmp	r1, #0
 800d04e:	b096      	sub	sp, #88	@ 0x58
 800d050:	4615      	mov	r5, r2
 800d052:	461e      	mov	r6, r3
 800d054:	da0d      	bge.n	800d072 <__swhatbuf_r+0x2e>
 800d056:	89a3      	ldrh	r3, [r4, #12]
 800d058:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d05c:	f04f 0100 	mov.w	r1, #0
 800d060:	bf14      	ite	ne
 800d062:	2340      	movne	r3, #64	@ 0x40
 800d064:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d068:	2000      	movs	r0, #0
 800d06a:	6031      	str	r1, [r6, #0]
 800d06c:	602b      	str	r3, [r5, #0]
 800d06e:	b016      	add	sp, #88	@ 0x58
 800d070:	bd70      	pop	{r4, r5, r6, pc}
 800d072:	466a      	mov	r2, sp
 800d074:	f000 f848 	bl	800d108 <_fstat_r>
 800d078:	2800      	cmp	r0, #0
 800d07a:	dbec      	blt.n	800d056 <__swhatbuf_r+0x12>
 800d07c:	9901      	ldr	r1, [sp, #4]
 800d07e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d082:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d086:	4259      	negs	r1, r3
 800d088:	4159      	adcs	r1, r3
 800d08a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d08e:	e7eb      	b.n	800d068 <__swhatbuf_r+0x24>

0800d090 <__smakebuf_r>:
 800d090:	898b      	ldrh	r3, [r1, #12]
 800d092:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d094:	079d      	lsls	r5, r3, #30
 800d096:	4606      	mov	r6, r0
 800d098:	460c      	mov	r4, r1
 800d09a:	d507      	bpl.n	800d0ac <__smakebuf_r+0x1c>
 800d09c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d0a0:	6023      	str	r3, [r4, #0]
 800d0a2:	6123      	str	r3, [r4, #16]
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	6163      	str	r3, [r4, #20]
 800d0a8:	b003      	add	sp, #12
 800d0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0ac:	ab01      	add	r3, sp, #4
 800d0ae:	466a      	mov	r2, sp
 800d0b0:	f7ff ffc8 	bl	800d044 <__swhatbuf_r>
 800d0b4:	9f00      	ldr	r7, [sp, #0]
 800d0b6:	4605      	mov	r5, r0
 800d0b8:	4639      	mov	r1, r7
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	f7ff f904 	bl	800c2c8 <_malloc_r>
 800d0c0:	b948      	cbnz	r0, 800d0d6 <__smakebuf_r+0x46>
 800d0c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0c6:	059a      	lsls	r2, r3, #22
 800d0c8:	d4ee      	bmi.n	800d0a8 <__smakebuf_r+0x18>
 800d0ca:	f023 0303 	bic.w	r3, r3, #3
 800d0ce:	f043 0302 	orr.w	r3, r3, #2
 800d0d2:	81a3      	strh	r3, [r4, #12]
 800d0d4:	e7e2      	b.n	800d09c <__smakebuf_r+0xc>
 800d0d6:	89a3      	ldrh	r3, [r4, #12]
 800d0d8:	6020      	str	r0, [r4, #0]
 800d0da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0de:	81a3      	strh	r3, [r4, #12]
 800d0e0:	9b01      	ldr	r3, [sp, #4]
 800d0e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d0e6:	b15b      	cbz	r3, 800d100 <__smakebuf_r+0x70>
 800d0e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	f000 f81d 	bl	800d12c <_isatty_r>
 800d0f2:	b128      	cbz	r0, 800d100 <__smakebuf_r+0x70>
 800d0f4:	89a3      	ldrh	r3, [r4, #12]
 800d0f6:	f023 0303 	bic.w	r3, r3, #3
 800d0fa:	f043 0301 	orr.w	r3, r3, #1
 800d0fe:	81a3      	strh	r3, [r4, #12]
 800d100:	89a3      	ldrh	r3, [r4, #12]
 800d102:	431d      	orrs	r5, r3
 800d104:	81a5      	strh	r5, [r4, #12]
 800d106:	e7cf      	b.n	800d0a8 <__smakebuf_r+0x18>

0800d108 <_fstat_r>:
 800d108:	b538      	push	{r3, r4, r5, lr}
 800d10a:	4d07      	ldr	r5, [pc, #28]	@ (800d128 <_fstat_r+0x20>)
 800d10c:	2300      	movs	r3, #0
 800d10e:	4604      	mov	r4, r0
 800d110:	4608      	mov	r0, r1
 800d112:	4611      	mov	r1, r2
 800d114:	602b      	str	r3, [r5, #0]
 800d116:	f7fa fc41 	bl	800799c <_fstat>
 800d11a:	1c43      	adds	r3, r0, #1
 800d11c:	d102      	bne.n	800d124 <_fstat_r+0x1c>
 800d11e:	682b      	ldr	r3, [r5, #0]
 800d120:	b103      	cbz	r3, 800d124 <_fstat_r+0x1c>
 800d122:	6023      	str	r3, [r4, #0]
 800d124:	bd38      	pop	{r3, r4, r5, pc}
 800d126:	bf00      	nop
 800d128:	20016d88 	.word	0x20016d88

0800d12c <_isatty_r>:
 800d12c:	b538      	push	{r3, r4, r5, lr}
 800d12e:	4d06      	ldr	r5, [pc, #24]	@ (800d148 <_isatty_r+0x1c>)
 800d130:	2300      	movs	r3, #0
 800d132:	4604      	mov	r4, r0
 800d134:	4608      	mov	r0, r1
 800d136:	602b      	str	r3, [r5, #0]
 800d138:	f7fa fc40 	bl	80079bc <_isatty>
 800d13c:	1c43      	adds	r3, r0, #1
 800d13e:	d102      	bne.n	800d146 <_isatty_r+0x1a>
 800d140:	682b      	ldr	r3, [r5, #0]
 800d142:	b103      	cbz	r3, 800d146 <_isatty_r+0x1a>
 800d144:	6023      	str	r3, [r4, #0]
 800d146:	bd38      	pop	{r3, r4, r5, pc}
 800d148:	20016d88 	.word	0x20016d88

0800d14c <pow>:
 800d14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14e:	ed2d 8b02 	vpush	{d8}
 800d152:	eeb0 8a40 	vmov.f32	s16, s0
 800d156:	eef0 8a60 	vmov.f32	s17, s1
 800d15a:	ec55 4b11 	vmov	r4, r5, d1
 800d15e:	f000 f873 	bl	800d248 <__ieee754_pow>
 800d162:	4622      	mov	r2, r4
 800d164:	462b      	mov	r3, r5
 800d166:	4620      	mov	r0, r4
 800d168:	4629      	mov	r1, r5
 800d16a:	ec57 6b10 	vmov	r6, r7, d0
 800d16e:	f7f3 fcdd 	bl	8000b2c <__aeabi_dcmpun>
 800d172:	2800      	cmp	r0, #0
 800d174:	d13b      	bne.n	800d1ee <pow+0xa2>
 800d176:	ec51 0b18 	vmov	r0, r1, d8
 800d17a:	2200      	movs	r2, #0
 800d17c:	2300      	movs	r3, #0
 800d17e:	f7f3 fca3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d182:	b1b8      	cbz	r0, 800d1b4 <pow+0x68>
 800d184:	2200      	movs	r2, #0
 800d186:	2300      	movs	r3, #0
 800d188:	4620      	mov	r0, r4
 800d18a:	4629      	mov	r1, r5
 800d18c:	f7f3 fc9c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d190:	2800      	cmp	r0, #0
 800d192:	d146      	bne.n	800d222 <pow+0xd6>
 800d194:	ec45 4b10 	vmov	d0, r4, r5
 800d198:	f000 f848 	bl	800d22c <finite>
 800d19c:	b338      	cbz	r0, 800d1ee <pow+0xa2>
 800d19e:	2200      	movs	r2, #0
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	4629      	mov	r1, r5
 800d1a6:	f7f3 fc99 	bl	8000adc <__aeabi_dcmplt>
 800d1aa:	b300      	cbz	r0, 800d1ee <pow+0xa2>
 800d1ac:	f7fe ffc4 	bl	800c138 <__errno>
 800d1b0:	2322      	movs	r3, #34	@ 0x22
 800d1b2:	e01b      	b.n	800d1ec <pow+0xa0>
 800d1b4:	ec47 6b10 	vmov	d0, r6, r7
 800d1b8:	f000 f838 	bl	800d22c <finite>
 800d1bc:	b9e0      	cbnz	r0, 800d1f8 <pow+0xac>
 800d1be:	eeb0 0a48 	vmov.f32	s0, s16
 800d1c2:	eef0 0a68 	vmov.f32	s1, s17
 800d1c6:	f000 f831 	bl	800d22c <finite>
 800d1ca:	b1a8      	cbz	r0, 800d1f8 <pow+0xac>
 800d1cc:	ec45 4b10 	vmov	d0, r4, r5
 800d1d0:	f000 f82c 	bl	800d22c <finite>
 800d1d4:	b180      	cbz	r0, 800d1f8 <pow+0xac>
 800d1d6:	4632      	mov	r2, r6
 800d1d8:	463b      	mov	r3, r7
 800d1da:	4630      	mov	r0, r6
 800d1dc:	4639      	mov	r1, r7
 800d1de:	f7f3 fca5 	bl	8000b2c <__aeabi_dcmpun>
 800d1e2:	2800      	cmp	r0, #0
 800d1e4:	d0e2      	beq.n	800d1ac <pow+0x60>
 800d1e6:	f7fe ffa7 	bl	800c138 <__errno>
 800d1ea:	2321      	movs	r3, #33	@ 0x21
 800d1ec:	6003      	str	r3, [r0, #0]
 800d1ee:	ecbd 8b02 	vpop	{d8}
 800d1f2:	ec47 6b10 	vmov	d0, r6, r7
 800d1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	4630      	mov	r0, r6
 800d1fe:	4639      	mov	r1, r7
 800d200:	f7f3 fc62 	bl	8000ac8 <__aeabi_dcmpeq>
 800d204:	2800      	cmp	r0, #0
 800d206:	d0f2      	beq.n	800d1ee <pow+0xa2>
 800d208:	eeb0 0a48 	vmov.f32	s0, s16
 800d20c:	eef0 0a68 	vmov.f32	s1, s17
 800d210:	f000 f80c 	bl	800d22c <finite>
 800d214:	2800      	cmp	r0, #0
 800d216:	d0ea      	beq.n	800d1ee <pow+0xa2>
 800d218:	ec45 4b10 	vmov	d0, r4, r5
 800d21c:	f000 f806 	bl	800d22c <finite>
 800d220:	e7c3      	b.n	800d1aa <pow+0x5e>
 800d222:	4f01      	ldr	r7, [pc, #4]	@ (800d228 <pow+0xdc>)
 800d224:	2600      	movs	r6, #0
 800d226:	e7e2      	b.n	800d1ee <pow+0xa2>
 800d228:	3ff00000 	.word	0x3ff00000

0800d22c <finite>:
 800d22c:	b082      	sub	sp, #8
 800d22e:	ed8d 0b00 	vstr	d0, [sp]
 800d232:	9801      	ldr	r0, [sp, #4]
 800d234:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800d238:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800d23c:	0fc0      	lsrs	r0, r0, #31
 800d23e:	b002      	add	sp, #8
 800d240:	4770      	bx	lr
 800d242:	0000      	movs	r0, r0
 800d244:	0000      	movs	r0, r0
	...

0800d248 <__ieee754_pow>:
 800d248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d24c:	b091      	sub	sp, #68	@ 0x44
 800d24e:	ed8d 1b00 	vstr	d1, [sp]
 800d252:	e9dd 1900 	ldrd	r1, r9, [sp]
 800d256:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800d25a:	ea5a 0001 	orrs.w	r0, sl, r1
 800d25e:	ec57 6b10 	vmov	r6, r7, d0
 800d262:	d113      	bne.n	800d28c <__ieee754_pow+0x44>
 800d264:	19b3      	adds	r3, r6, r6
 800d266:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800d26a:	4152      	adcs	r2, r2
 800d26c:	4298      	cmp	r0, r3
 800d26e:	4b98      	ldr	r3, [pc, #608]	@ (800d4d0 <__ieee754_pow+0x288>)
 800d270:	4193      	sbcs	r3, r2
 800d272:	f080 84ea 	bcs.w	800dc4a <__ieee754_pow+0xa02>
 800d276:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d27a:	4630      	mov	r0, r6
 800d27c:	4639      	mov	r1, r7
 800d27e:	f7f3 f805 	bl	800028c <__adddf3>
 800d282:	ec41 0b10 	vmov	d0, r0, r1
 800d286:	b011      	add	sp, #68	@ 0x44
 800d288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d28c:	4a91      	ldr	r2, [pc, #580]	@ (800d4d4 <__ieee754_pow+0x28c>)
 800d28e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d292:	4590      	cmp	r8, r2
 800d294:	463d      	mov	r5, r7
 800d296:	4633      	mov	r3, r6
 800d298:	d806      	bhi.n	800d2a8 <__ieee754_pow+0x60>
 800d29a:	d101      	bne.n	800d2a0 <__ieee754_pow+0x58>
 800d29c:	2e00      	cmp	r6, #0
 800d29e:	d1ea      	bne.n	800d276 <__ieee754_pow+0x2e>
 800d2a0:	4592      	cmp	sl, r2
 800d2a2:	d801      	bhi.n	800d2a8 <__ieee754_pow+0x60>
 800d2a4:	d10e      	bne.n	800d2c4 <__ieee754_pow+0x7c>
 800d2a6:	b169      	cbz	r1, 800d2c4 <__ieee754_pow+0x7c>
 800d2a8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800d2ac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800d2b0:	431d      	orrs	r5, r3
 800d2b2:	d1e0      	bne.n	800d276 <__ieee754_pow+0x2e>
 800d2b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d2b8:	18db      	adds	r3, r3, r3
 800d2ba:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800d2be:	4152      	adcs	r2, r2
 800d2c0:	429d      	cmp	r5, r3
 800d2c2:	e7d4      	b.n	800d26e <__ieee754_pow+0x26>
 800d2c4:	2d00      	cmp	r5, #0
 800d2c6:	46c3      	mov	fp, r8
 800d2c8:	da3a      	bge.n	800d340 <__ieee754_pow+0xf8>
 800d2ca:	4a83      	ldr	r2, [pc, #524]	@ (800d4d8 <__ieee754_pow+0x290>)
 800d2cc:	4592      	cmp	sl, r2
 800d2ce:	d84d      	bhi.n	800d36c <__ieee754_pow+0x124>
 800d2d0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800d2d4:	4592      	cmp	sl, r2
 800d2d6:	f240 84c7 	bls.w	800dc68 <__ieee754_pow+0xa20>
 800d2da:	ea4f 522a 	mov.w	r2, sl, asr #20
 800d2de:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800d2e2:	2a14      	cmp	r2, #20
 800d2e4:	dd0f      	ble.n	800d306 <__ieee754_pow+0xbe>
 800d2e6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800d2ea:	fa21 f402 	lsr.w	r4, r1, r2
 800d2ee:	fa04 f202 	lsl.w	r2, r4, r2
 800d2f2:	428a      	cmp	r2, r1
 800d2f4:	f040 84b8 	bne.w	800dc68 <__ieee754_pow+0xa20>
 800d2f8:	f004 0401 	and.w	r4, r4, #1
 800d2fc:	f1c4 0402 	rsb	r4, r4, #2
 800d300:	2900      	cmp	r1, #0
 800d302:	d158      	bne.n	800d3b6 <__ieee754_pow+0x16e>
 800d304:	e00e      	b.n	800d324 <__ieee754_pow+0xdc>
 800d306:	2900      	cmp	r1, #0
 800d308:	d154      	bne.n	800d3b4 <__ieee754_pow+0x16c>
 800d30a:	f1c2 0214 	rsb	r2, r2, #20
 800d30e:	fa4a f402 	asr.w	r4, sl, r2
 800d312:	fa04 f202 	lsl.w	r2, r4, r2
 800d316:	4552      	cmp	r2, sl
 800d318:	f040 84a3 	bne.w	800dc62 <__ieee754_pow+0xa1a>
 800d31c:	f004 0401 	and.w	r4, r4, #1
 800d320:	f1c4 0402 	rsb	r4, r4, #2
 800d324:	4a6d      	ldr	r2, [pc, #436]	@ (800d4dc <__ieee754_pow+0x294>)
 800d326:	4592      	cmp	sl, r2
 800d328:	d12e      	bne.n	800d388 <__ieee754_pow+0x140>
 800d32a:	f1b9 0f00 	cmp.w	r9, #0
 800d32e:	f280 8494 	bge.w	800dc5a <__ieee754_pow+0xa12>
 800d332:	496a      	ldr	r1, [pc, #424]	@ (800d4dc <__ieee754_pow+0x294>)
 800d334:	4632      	mov	r2, r6
 800d336:	463b      	mov	r3, r7
 800d338:	2000      	movs	r0, #0
 800d33a:	f7f3 fa87 	bl	800084c <__aeabi_ddiv>
 800d33e:	e7a0      	b.n	800d282 <__ieee754_pow+0x3a>
 800d340:	2400      	movs	r4, #0
 800d342:	bbc1      	cbnz	r1, 800d3b6 <__ieee754_pow+0x16e>
 800d344:	4a63      	ldr	r2, [pc, #396]	@ (800d4d4 <__ieee754_pow+0x28c>)
 800d346:	4592      	cmp	sl, r2
 800d348:	d1ec      	bne.n	800d324 <__ieee754_pow+0xdc>
 800d34a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800d34e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800d352:	431a      	orrs	r2, r3
 800d354:	f000 8479 	beq.w	800dc4a <__ieee754_pow+0xa02>
 800d358:	4b61      	ldr	r3, [pc, #388]	@ (800d4e0 <__ieee754_pow+0x298>)
 800d35a:	4598      	cmp	r8, r3
 800d35c:	d908      	bls.n	800d370 <__ieee754_pow+0x128>
 800d35e:	f1b9 0f00 	cmp.w	r9, #0
 800d362:	f2c0 8476 	blt.w	800dc52 <__ieee754_pow+0xa0a>
 800d366:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d36a:	e78a      	b.n	800d282 <__ieee754_pow+0x3a>
 800d36c:	2402      	movs	r4, #2
 800d36e:	e7e8      	b.n	800d342 <__ieee754_pow+0xfa>
 800d370:	f1b9 0f00 	cmp.w	r9, #0
 800d374:	f04f 0000 	mov.w	r0, #0
 800d378:	f04f 0100 	mov.w	r1, #0
 800d37c:	da81      	bge.n	800d282 <__ieee754_pow+0x3a>
 800d37e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d382:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d386:	e77c      	b.n	800d282 <__ieee754_pow+0x3a>
 800d388:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800d38c:	d106      	bne.n	800d39c <__ieee754_pow+0x154>
 800d38e:	4632      	mov	r2, r6
 800d390:	463b      	mov	r3, r7
 800d392:	4630      	mov	r0, r6
 800d394:	4639      	mov	r1, r7
 800d396:	f7f3 f92f 	bl	80005f8 <__aeabi_dmul>
 800d39a:	e772      	b.n	800d282 <__ieee754_pow+0x3a>
 800d39c:	4a51      	ldr	r2, [pc, #324]	@ (800d4e4 <__ieee754_pow+0x29c>)
 800d39e:	4591      	cmp	r9, r2
 800d3a0:	d109      	bne.n	800d3b6 <__ieee754_pow+0x16e>
 800d3a2:	2d00      	cmp	r5, #0
 800d3a4:	db07      	blt.n	800d3b6 <__ieee754_pow+0x16e>
 800d3a6:	ec47 6b10 	vmov	d0, r6, r7
 800d3aa:	b011      	add	sp, #68	@ 0x44
 800d3ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b0:	f000 bd52 	b.w	800de58 <__ieee754_sqrt>
 800d3b4:	2400      	movs	r4, #0
 800d3b6:	ec47 6b10 	vmov	d0, r6, r7
 800d3ba:	9302      	str	r3, [sp, #8]
 800d3bc:	f000 fc88 	bl	800dcd0 <fabs>
 800d3c0:	9b02      	ldr	r3, [sp, #8]
 800d3c2:	ec51 0b10 	vmov	r0, r1, d0
 800d3c6:	bb53      	cbnz	r3, 800d41e <__ieee754_pow+0x1d6>
 800d3c8:	4b44      	ldr	r3, [pc, #272]	@ (800d4dc <__ieee754_pow+0x294>)
 800d3ca:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d002      	beq.n	800d3d8 <__ieee754_pow+0x190>
 800d3d2:	f1b8 0f00 	cmp.w	r8, #0
 800d3d6:	d122      	bne.n	800d41e <__ieee754_pow+0x1d6>
 800d3d8:	f1b9 0f00 	cmp.w	r9, #0
 800d3dc:	da05      	bge.n	800d3ea <__ieee754_pow+0x1a2>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	493d      	ldr	r1, [pc, #244]	@ (800d4dc <__ieee754_pow+0x294>)
 800d3e6:	f7f3 fa31 	bl	800084c <__aeabi_ddiv>
 800d3ea:	2d00      	cmp	r5, #0
 800d3ec:	f6bf af49 	bge.w	800d282 <__ieee754_pow+0x3a>
 800d3f0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800d3f4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800d3f8:	ea58 0804 	orrs.w	r8, r8, r4
 800d3fc:	d108      	bne.n	800d410 <__ieee754_pow+0x1c8>
 800d3fe:	4602      	mov	r2, r0
 800d400:	460b      	mov	r3, r1
 800d402:	4610      	mov	r0, r2
 800d404:	4619      	mov	r1, r3
 800d406:	f7f2 ff3f 	bl	8000288 <__aeabi_dsub>
 800d40a:	4602      	mov	r2, r0
 800d40c:	460b      	mov	r3, r1
 800d40e:	e794      	b.n	800d33a <__ieee754_pow+0xf2>
 800d410:	2c01      	cmp	r4, #1
 800d412:	f47f af36 	bne.w	800d282 <__ieee754_pow+0x3a>
 800d416:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d41a:	4619      	mov	r1, r3
 800d41c:	e731      	b.n	800d282 <__ieee754_pow+0x3a>
 800d41e:	0feb      	lsrs	r3, r5, #31
 800d420:	3b01      	subs	r3, #1
 800d422:	ea53 0204 	orrs.w	r2, r3, r4
 800d426:	d102      	bne.n	800d42e <__ieee754_pow+0x1e6>
 800d428:	4632      	mov	r2, r6
 800d42a:	463b      	mov	r3, r7
 800d42c:	e7e9      	b.n	800d402 <__ieee754_pow+0x1ba>
 800d42e:	3c01      	subs	r4, #1
 800d430:	431c      	orrs	r4, r3
 800d432:	d016      	beq.n	800d462 <__ieee754_pow+0x21a>
 800d434:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800d4c0 <__ieee754_pow+0x278>
 800d438:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800d43c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d440:	f240 8112 	bls.w	800d668 <__ieee754_pow+0x420>
 800d444:	4b28      	ldr	r3, [pc, #160]	@ (800d4e8 <__ieee754_pow+0x2a0>)
 800d446:	459a      	cmp	sl, r3
 800d448:	4b25      	ldr	r3, [pc, #148]	@ (800d4e0 <__ieee754_pow+0x298>)
 800d44a:	d916      	bls.n	800d47a <__ieee754_pow+0x232>
 800d44c:	4598      	cmp	r8, r3
 800d44e:	d80b      	bhi.n	800d468 <__ieee754_pow+0x220>
 800d450:	f1b9 0f00 	cmp.w	r9, #0
 800d454:	da0b      	bge.n	800d46e <__ieee754_pow+0x226>
 800d456:	2000      	movs	r0, #0
 800d458:	b011      	add	sp, #68	@ 0x44
 800d45a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d45e:	f000 bcf3 	b.w	800de48 <__math_oflow>
 800d462:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800d4c8 <__ieee754_pow+0x280>
 800d466:	e7e7      	b.n	800d438 <__ieee754_pow+0x1f0>
 800d468:	f1b9 0f00 	cmp.w	r9, #0
 800d46c:	dcf3      	bgt.n	800d456 <__ieee754_pow+0x20e>
 800d46e:	2000      	movs	r0, #0
 800d470:	b011      	add	sp, #68	@ 0x44
 800d472:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d476:	f000 bcdf 	b.w	800de38 <__math_uflow>
 800d47a:	4598      	cmp	r8, r3
 800d47c:	d20c      	bcs.n	800d498 <__ieee754_pow+0x250>
 800d47e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d482:	2200      	movs	r2, #0
 800d484:	2300      	movs	r3, #0
 800d486:	f7f3 fb29 	bl	8000adc <__aeabi_dcmplt>
 800d48a:	3800      	subs	r0, #0
 800d48c:	bf18      	it	ne
 800d48e:	2001      	movne	r0, #1
 800d490:	f1b9 0f00 	cmp.w	r9, #0
 800d494:	daec      	bge.n	800d470 <__ieee754_pow+0x228>
 800d496:	e7df      	b.n	800d458 <__ieee754_pow+0x210>
 800d498:	4b10      	ldr	r3, [pc, #64]	@ (800d4dc <__ieee754_pow+0x294>)
 800d49a:	4598      	cmp	r8, r3
 800d49c:	f04f 0200 	mov.w	r2, #0
 800d4a0:	d924      	bls.n	800d4ec <__ieee754_pow+0x2a4>
 800d4a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	f7f3 fb18 	bl	8000adc <__aeabi_dcmplt>
 800d4ac:	3800      	subs	r0, #0
 800d4ae:	bf18      	it	ne
 800d4b0:	2001      	movne	r0, #1
 800d4b2:	f1b9 0f00 	cmp.w	r9, #0
 800d4b6:	dccf      	bgt.n	800d458 <__ieee754_pow+0x210>
 800d4b8:	e7da      	b.n	800d470 <__ieee754_pow+0x228>
 800d4ba:	bf00      	nop
 800d4bc:	f3af 8000 	nop.w
 800d4c0:	00000000 	.word	0x00000000
 800d4c4:	3ff00000 	.word	0x3ff00000
 800d4c8:	00000000 	.word	0x00000000
 800d4cc:	bff00000 	.word	0xbff00000
 800d4d0:	fff00000 	.word	0xfff00000
 800d4d4:	7ff00000 	.word	0x7ff00000
 800d4d8:	433fffff 	.word	0x433fffff
 800d4dc:	3ff00000 	.word	0x3ff00000
 800d4e0:	3fefffff 	.word	0x3fefffff
 800d4e4:	3fe00000 	.word	0x3fe00000
 800d4e8:	43f00000 	.word	0x43f00000
 800d4ec:	4b5a      	ldr	r3, [pc, #360]	@ (800d658 <__ieee754_pow+0x410>)
 800d4ee:	f7f2 fecb 	bl	8000288 <__aeabi_dsub>
 800d4f2:	a351      	add	r3, pc, #324	@ (adr r3, 800d638 <__ieee754_pow+0x3f0>)
 800d4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f8:	4604      	mov	r4, r0
 800d4fa:	460d      	mov	r5, r1
 800d4fc:	f7f3 f87c 	bl	80005f8 <__aeabi_dmul>
 800d500:	a34f      	add	r3, pc, #316	@ (adr r3, 800d640 <__ieee754_pow+0x3f8>)
 800d502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d506:	4606      	mov	r6, r0
 800d508:	460f      	mov	r7, r1
 800d50a:	4620      	mov	r0, r4
 800d50c:	4629      	mov	r1, r5
 800d50e:	f7f3 f873 	bl	80005f8 <__aeabi_dmul>
 800d512:	4b52      	ldr	r3, [pc, #328]	@ (800d65c <__ieee754_pow+0x414>)
 800d514:	4682      	mov	sl, r0
 800d516:	468b      	mov	fp, r1
 800d518:	2200      	movs	r2, #0
 800d51a:	4620      	mov	r0, r4
 800d51c:	4629      	mov	r1, r5
 800d51e:	f7f3 f86b 	bl	80005f8 <__aeabi_dmul>
 800d522:	4602      	mov	r2, r0
 800d524:	460b      	mov	r3, r1
 800d526:	a148      	add	r1, pc, #288	@ (adr r1, 800d648 <__ieee754_pow+0x400>)
 800d528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d52c:	f7f2 feac 	bl	8000288 <__aeabi_dsub>
 800d530:	4622      	mov	r2, r4
 800d532:	462b      	mov	r3, r5
 800d534:	f7f3 f860 	bl	80005f8 <__aeabi_dmul>
 800d538:	4602      	mov	r2, r0
 800d53a:	460b      	mov	r3, r1
 800d53c:	2000      	movs	r0, #0
 800d53e:	4948      	ldr	r1, [pc, #288]	@ (800d660 <__ieee754_pow+0x418>)
 800d540:	f7f2 fea2 	bl	8000288 <__aeabi_dsub>
 800d544:	4622      	mov	r2, r4
 800d546:	4680      	mov	r8, r0
 800d548:	4689      	mov	r9, r1
 800d54a:	462b      	mov	r3, r5
 800d54c:	4620      	mov	r0, r4
 800d54e:	4629      	mov	r1, r5
 800d550:	f7f3 f852 	bl	80005f8 <__aeabi_dmul>
 800d554:	4602      	mov	r2, r0
 800d556:	460b      	mov	r3, r1
 800d558:	4640      	mov	r0, r8
 800d55a:	4649      	mov	r1, r9
 800d55c:	f7f3 f84c 	bl	80005f8 <__aeabi_dmul>
 800d560:	a33b      	add	r3, pc, #236	@ (adr r3, 800d650 <__ieee754_pow+0x408>)
 800d562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d566:	f7f3 f847 	bl	80005f8 <__aeabi_dmul>
 800d56a:	4602      	mov	r2, r0
 800d56c:	460b      	mov	r3, r1
 800d56e:	4650      	mov	r0, sl
 800d570:	4659      	mov	r1, fp
 800d572:	f7f2 fe89 	bl	8000288 <__aeabi_dsub>
 800d576:	4602      	mov	r2, r0
 800d578:	460b      	mov	r3, r1
 800d57a:	4680      	mov	r8, r0
 800d57c:	4689      	mov	r9, r1
 800d57e:	4630      	mov	r0, r6
 800d580:	4639      	mov	r1, r7
 800d582:	f7f2 fe83 	bl	800028c <__adddf3>
 800d586:	2400      	movs	r4, #0
 800d588:	4632      	mov	r2, r6
 800d58a:	463b      	mov	r3, r7
 800d58c:	4620      	mov	r0, r4
 800d58e:	460d      	mov	r5, r1
 800d590:	f7f2 fe7a 	bl	8000288 <__aeabi_dsub>
 800d594:	4602      	mov	r2, r0
 800d596:	460b      	mov	r3, r1
 800d598:	4640      	mov	r0, r8
 800d59a:	4649      	mov	r1, r9
 800d59c:	f7f2 fe74 	bl	8000288 <__aeabi_dsub>
 800d5a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	9304      	str	r3, [sp, #16]
 800d5ac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d5b0:	4606      	mov	r6, r0
 800d5b2:	460f      	mov	r7, r1
 800d5b4:	4652      	mov	r2, sl
 800d5b6:	465b      	mov	r3, fp
 800d5b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5bc:	f7f2 fe64 	bl	8000288 <__aeabi_dsub>
 800d5c0:	4622      	mov	r2, r4
 800d5c2:	462b      	mov	r3, r5
 800d5c4:	f7f3 f818 	bl	80005f8 <__aeabi_dmul>
 800d5c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5cc:	4680      	mov	r8, r0
 800d5ce:	4689      	mov	r9, r1
 800d5d0:	4630      	mov	r0, r6
 800d5d2:	4639      	mov	r1, r7
 800d5d4:	f7f3 f810 	bl	80005f8 <__aeabi_dmul>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	460b      	mov	r3, r1
 800d5dc:	4640      	mov	r0, r8
 800d5de:	4649      	mov	r1, r9
 800d5e0:	f7f2 fe54 	bl	800028c <__adddf3>
 800d5e4:	4652      	mov	r2, sl
 800d5e6:	465b      	mov	r3, fp
 800d5e8:	4606      	mov	r6, r0
 800d5ea:	460f      	mov	r7, r1
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	4629      	mov	r1, r5
 800d5f0:	f7f3 f802 	bl	80005f8 <__aeabi_dmul>
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	4680      	mov	r8, r0
 800d5fa:	4689      	mov	r9, r1
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	4639      	mov	r1, r7
 800d600:	f7f2 fe44 	bl	800028c <__adddf3>
 800d604:	4b17      	ldr	r3, [pc, #92]	@ (800d664 <__ieee754_pow+0x41c>)
 800d606:	4299      	cmp	r1, r3
 800d608:	4604      	mov	r4, r0
 800d60a:	460d      	mov	r5, r1
 800d60c:	468a      	mov	sl, r1
 800d60e:	468b      	mov	fp, r1
 800d610:	f340 82ef 	ble.w	800dbf2 <__ieee754_pow+0x9aa>
 800d614:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800d618:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800d61c:	4303      	orrs	r3, r0
 800d61e:	f000 81e8 	beq.w	800d9f2 <__ieee754_pow+0x7aa>
 800d622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d626:	2200      	movs	r2, #0
 800d628:	2300      	movs	r3, #0
 800d62a:	f7f3 fa57 	bl	8000adc <__aeabi_dcmplt>
 800d62e:	3800      	subs	r0, #0
 800d630:	bf18      	it	ne
 800d632:	2001      	movne	r0, #1
 800d634:	e710      	b.n	800d458 <__ieee754_pow+0x210>
 800d636:	bf00      	nop
 800d638:	60000000 	.word	0x60000000
 800d63c:	3ff71547 	.word	0x3ff71547
 800d640:	f85ddf44 	.word	0xf85ddf44
 800d644:	3e54ae0b 	.word	0x3e54ae0b
 800d648:	55555555 	.word	0x55555555
 800d64c:	3fd55555 	.word	0x3fd55555
 800d650:	652b82fe 	.word	0x652b82fe
 800d654:	3ff71547 	.word	0x3ff71547
 800d658:	3ff00000 	.word	0x3ff00000
 800d65c:	3fd00000 	.word	0x3fd00000
 800d660:	3fe00000 	.word	0x3fe00000
 800d664:	408fffff 	.word	0x408fffff
 800d668:	4bd5      	ldr	r3, [pc, #852]	@ (800d9c0 <__ieee754_pow+0x778>)
 800d66a:	402b      	ands	r3, r5
 800d66c:	2200      	movs	r2, #0
 800d66e:	b92b      	cbnz	r3, 800d67c <__ieee754_pow+0x434>
 800d670:	4bd4      	ldr	r3, [pc, #848]	@ (800d9c4 <__ieee754_pow+0x77c>)
 800d672:	f7f2 ffc1 	bl	80005f8 <__aeabi_dmul>
 800d676:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800d67a:	468b      	mov	fp, r1
 800d67c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800d680:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d684:	4413      	add	r3, r2
 800d686:	930a      	str	r3, [sp, #40]	@ 0x28
 800d688:	4bcf      	ldr	r3, [pc, #828]	@ (800d9c8 <__ieee754_pow+0x780>)
 800d68a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800d68e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800d692:	459b      	cmp	fp, r3
 800d694:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d698:	dd08      	ble.n	800d6ac <__ieee754_pow+0x464>
 800d69a:	4bcc      	ldr	r3, [pc, #816]	@ (800d9cc <__ieee754_pow+0x784>)
 800d69c:	459b      	cmp	fp, r3
 800d69e:	f340 81a5 	ble.w	800d9ec <__ieee754_pow+0x7a4>
 800d6a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6a8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800d6ac:	f04f 0a00 	mov.w	sl, #0
 800d6b0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d6b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6b6:	4bc6      	ldr	r3, [pc, #792]	@ (800d9d0 <__ieee754_pow+0x788>)
 800d6b8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d6bc:	ed93 7b00 	vldr	d7, [r3]
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	ec53 2b17 	vmov	r2, r3, d7
 800d6c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d6ca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d6ce:	f7f2 fddb 	bl	8000288 <__aeabi_dsub>
 800d6d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d6d6:	4606      	mov	r6, r0
 800d6d8:	460f      	mov	r7, r1
 800d6da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6de:	f7f2 fdd5 	bl	800028c <__adddf3>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	2000      	movs	r0, #0
 800d6e8:	49ba      	ldr	r1, [pc, #744]	@ (800d9d4 <__ieee754_pow+0x78c>)
 800d6ea:	f7f3 f8af 	bl	800084c <__aeabi_ddiv>
 800d6ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	4639      	mov	r1, r7
 800d6fa:	f7f2 ff7d 	bl	80005f8 <__aeabi_dmul>
 800d6fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d702:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800d706:	106d      	asrs	r5, r5, #1
 800d708:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800d70c:	f04f 0b00 	mov.w	fp, #0
 800d710:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800d714:	4661      	mov	r1, ip
 800d716:	2200      	movs	r2, #0
 800d718:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800d71c:	4658      	mov	r0, fp
 800d71e:	46e1      	mov	r9, ip
 800d720:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800d724:	4614      	mov	r4, r2
 800d726:	461d      	mov	r5, r3
 800d728:	f7f2 ff66 	bl	80005f8 <__aeabi_dmul>
 800d72c:	4602      	mov	r2, r0
 800d72e:	460b      	mov	r3, r1
 800d730:	4630      	mov	r0, r6
 800d732:	4639      	mov	r1, r7
 800d734:	f7f2 fda8 	bl	8000288 <__aeabi_dsub>
 800d738:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d73c:	4606      	mov	r6, r0
 800d73e:	460f      	mov	r7, r1
 800d740:	4620      	mov	r0, r4
 800d742:	4629      	mov	r1, r5
 800d744:	f7f2 fda0 	bl	8000288 <__aeabi_dsub>
 800d748:	4602      	mov	r2, r0
 800d74a:	460b      	mov	r3, r1
 800d74c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d750:	f7f2 fd9a 	bl	8000288 <__aeabi_dsub>
 800d754:	465a      	mov	r2, fp
 800d756:	464b      	mov	r3, r9
 800d758:	f7f2 ff4e 	bl	80005f8 <__aeabi_dmul>
 800d75c:	4602      	mov	r2, r0
 800d75e:	460b      	mov	r3, r1
 800d760:	4630      	mov	r0, r6
 800d762:	4639      	mov	r1, r7
 800d764:	f7f2 fd90 	bl	8000288 <__aeabi_dsub>
 800d768:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d76c:	f7f2 ff44 	bl	80005f8 <__aeabi_dmul>
 800d770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d774:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d778:	4610      	mov	r0, r2
 800d77a:	4619      	mov	r1, r3
 800d77c:	f7f2 ff3c 	bl	80005f8 <__aeabi_dmul>
 800d780:	a37d      	add	r3, pc, #500	@ (adr r3, 800d978 <__ieee754_pow+0x730>)
 800d782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d786:	4604      	mov	r4, r0
 800d788:	460d      	mov	r5, r1
 800d78a:	f7f2 ff35 	bl	80005f8 <__aeabi_dmul>
 800d78e:	a37c      	add	r3, pc, #496	@ (adr r3, 800d980 <__ieee754_pow+0x738>)
 800d790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d794:	f7f2 fd7a 	bl	800028c <__adddf3>
 800d798:	4622      	mov	r2, r4
 800d79a:	462b      	mov	r3, r5
 800d79c:	f7f2 ff2c 	bl	80005f8 <__aeabi_dmul>
 800d7a0:	a379      	add	r3, pc, #484	@ (adr r3, 800d988 <__ieee754_pow+0x740>)
 800d7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a6:	f7f2 fd71 	bl	800028c <__adddf3>
 800d7aa:	4622      	mov	r2, r4
 800d7ac:	462b      	mov	r3, r5
 800d7ae:	f7f2 ff23 	bl	80005f8 <__aeabi_dmul>
 800d7b2:	a377      	add	r3, pc, #476	@ (adr r3, 800d990 <__ieee754_pow+0x748>)
 800d7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b8:	f7f2 fd68 	bl	800028c <__adddf3>
 800d7bc:	4622      	mov	r2, r4
 800d7be:	462b      	mov	r3, r5
 800d7c0:	f7f2 ff1a 	bl	80005f8 <__aeabi_dmul>
 800d7c4:	a374      	add	r3, pc, #464	@ (adr r3, 800d998 <__ieee754_pow+0x750>)
 800d7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ca:	f7f2 fd5f 	bl	800028c <__adddf3>
 800d7ce:	4622      	mov	r2, r4
 800d7d0:	462b      	mov	r3, r5
 800d7d2:	f7f2 ff11 	bl	80005f8 <__aeabi_dmul>
 800d7d6:	a372      	add	r3, pc, #456	@ (adr r3, 800d9a0 <__ieee754_pow+0x758>)
 800d7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7dc:	f7f2 fd56 	bl	800028c <__adddf3>
 800d7e0:	4622      	mov	r2, r4
 800d7e2:	4606      	mov	r6, r0
 800d7e4:	460f      	mov	r7, r1
 800d7e6:	462b      	mov	r3, r5
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	4629      	mov	r1, r5
 800d7ec:	f7f2 ff04 	bl	80005f8 <__aeabi_dmul>
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	460b      	mov	r3, r1
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	4639      	mov	r1, r7
 800d7f8:	f7f2 fefe 	bl	80005f8 <__aeabi_dmul>
 800d7fc:	465a      	mov	r2, fp
 800d7fe:	4604      	mov	r4, r0
 800d800:	460d      	mov	r5, r1
 800d802:	464b      	mov	r3, r9
 800d804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d808:	f7f2 fd40 	bl	800028c <__adddf3>
 800d80c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d810:	f7f2 fef2 	bl	80005f8 <__aeabi_dmul>
 800d814:	4622      	mov	r2, r4
 800d816:	462b      	mov	r3, r5
 800d818:	f7f2 fd38 	bl	800028c <__adddf3>
 800d81c:	465a      	mov	r2, fp
 800d81e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d822:	464b      	mov	r3, r9
 800d824:	4658      	mov	r0, fp
 800d826:	4649      	mov	r1, r9
 800d828:	f7f2 fee6 	bl	80005f8 <__aeabi_dmul>
 800d82c:	4b6a      	ldr	r3, [pc, #424]	@ (800d9d8 <__ieee754_pow+0x790>)
 800d82e:	2200      	movs	r2, #0
 800d830:	4606      	mov	r6, r0
 800d832:	460f      	mov	r7, r1
 800d834:	f7f2 fd2a 	bl	800028c <__adddf3>
 800d838:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d83c:	f7f2 fd26 	bl	800028c <__adddf3>
 800d840:	46d8      	mov	r8, fp
 800d842:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800d846:	460d      	mov	r5, r1
 800d848:	465a      	mov	r2, fp
 800d84a:	460b      	mov	r3, r1
 800d84c:	4640      	mov	r0, r8
 800d84e:	4649      	mov	r1, r9
 800d850:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800d854:	f7f2 fed0 	bl	80005f8 <__aeabi_dmul>
 800d858:	465c      	mov	r4, fp
 800d85a:	4680      	mov	r8, r0
 800d85c:	4689      	mov	r9, r1
 800d85e:	4b5e      	ldr	r3, [pc, #376]	@ (800d9d8 <__ieee754_pow+0x790>)
 800d860:	2200      	movs	r2, #0
 800d862:	4620      	mov	r0, r4
 800d864:	4629      	mov	r1, r5
 800d866:	f7f2 fd0f 	bl	8000288 <__aeabi_dsub>
 800d86a:	4632      	mov	r2, r6
 800d86c:	463b      	mov	r3, r7
 800d86e:	f7f2 fd0b 	bl	8000288 <__aeabi_dsub>
 800d872:	4602      	mov	r2, r0
 800d874:	460b      	mov	r3, r1
 800d876:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d87a:	f7f2 fd05 	bl	8000288 <__aeabi_dsub>
 800d87e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d882:	f7f2 feb9 	bl	80005f8 <__aeabi_dmul>
 800d886:	4622      	mov	r2, r4
 800d888:	4606      	mov	r6, r0
 800d88a:	460f      	mov	r7, r1
 800d88c:	462b      	mov	r3, r5
 800d88e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d892:	f7f2 feb1 	bl	80005f8 <__aeabi_dmul>
 800d896:	4602      	mov	r2, r0
 800d898:	460b      	mov	r3, r1
 800d89a:	4630      	mov	r0, r6
 800d89c:	4639      	mov	r1, r7
 800d89e:	f7f2 fcf5 	bl	800028c <__adddf3>
 800d8a2:	4606      	mov	r6, r0
 800d8a4:	460f      	mov	r7, r1
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	4640      	mov	r0, r8
 800d8ac:	4649      	mov	r1, r9
 800d8ae:	f7f2 fced 	bl	800028c <__adddf3>
 800d8b2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800d8b6:	a33c      	add	r3, pc, #240	@ (adr r3, 800d9a8 <__ieee754_pow+0x760>)
 800d8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8bc:	4658      	mov	r0, fp
 800d8be:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800d8c2:	460d      	mov	r5, r1
 800d8c4:	f7f2 fe98 	bl	80005f8 <__aeabi_dmul>
 800d8c8:	465c      	mov	r4, fp
 800d8ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8ce:	4642      	mov	r2, r8
 800d8d0:	464b      	mov	r3, r9
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	4629      	mov	r1, r5
 800d8d6:	f7f2 fcd7 	bl	8000288 <__aeabi_dsub>
 800d8da:	4602      	mov	r2, r0
 800d8dc:	460b      	mov	r3, r1
 800d8de:	4630      	mov	r0, r6
 800d8e0:	4639      	mov	r1, r7
 800d8e2:	f7f2 fcd1 	bl	8000288 <__aeabi_dsub>
 800d8e6:	a332      	add	r3, pc, #200	@ (adr r3, 800d9b0 <__ieee754_pow+0x768>)
 800d8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ec:	f7f2 fe84 	bl	80005f8 <__aeabi_dmul>
 800d8f0:	a331      	add	r3, pc, #196	@ (adr r3, 800d9b8 <__ieee754_pow+0x770>)
 800d8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f6:	4606      	mov	r6, r0
 800d8f8:	460f      	mov	r7, r1
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	4629      	mov	r1, r5
 800d8fe:	f7f2 fe7b 	bl	80005f8 <__aeabi_dmul>
 800d902:	4602      	mov	r2, r0
 800d904:	460b      	mov	r3, r1
 800d906:	4630      	mov	r0, r6
 800d908:	4639      	mov	r1, r7
 800d90a:	f7f2 fcbf 	bl	800028c <__adddf3>
 800d90e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d910:	4b32      	ldr	r3, [pc, #200]	@ (800d9dc <__ieee754_pow+0x794>)
 800d912:	4413      	add	r3, r2
 800d914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d918:	f7f2 fcb8 	bl	800028c <__adddf3>
 800d91c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d920:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d922:	f7f2 fdff 	bl	8000524 <__aeabi_i2d>
 800d926:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d928:	4b2d      	ldr	r3, [pc, #180]	@ (800d9e0 <__ieee754_pow+0x798>)
 800d92a:	4413      	add	r3, r2
 800d92c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d930:	4606      	mov	r6, r0
 800d932:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d936:	460f      	mov	r7, r1
 800d938:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d93c:	f7f2 fca6 	bl	800028c <__adddf3>
 800d940:	4642      	mov	r2, r8
 800d942:	464b      	mov	r3, r9
 800d944:	f7f2 fca2 	bl	800028c <__adddf3>
 800d948:	4632      	mov	r2, r6
 800d94a:	463b      	mov	r3, r7
 800d94c:	f7f2 fc9e 	bl	800028c <__adddf3>
 800d950:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800d954:	4632      	mov	r2, r6
 800d956:	463b      	mov	r3, r7
 800d958:	4658      	mov	r0, fp
 800d95a:	460d      	mov	r5, r1
 800d95c:	f7f2 fc94 	bl	8000288 <__aeabi_dsub>
 800d960:	4642      	mov	r2, r8
 800d962:	464b      	mov	r3, r9
 800d964:	f7f2 fc90 	bl	8000288 <__aeabi_dsub>
 800d968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d96c:	f7f2 fc8c 	bl	8000288 <__aeabi_dsub>
 800d970:	465c      	mov	r4, fp
 800d972:	4602      	mov	r2, r0
 800d974:	e036      	b.n	800d9e4 <__ieee754_pow+0x79c>
 800d976:	bf00      	nop
 800d978:	4a454eef 	.word	0x4a454eef
 800d97c:	3fca7e28 	.word	0x3fca7e28
 800d980:	93c9db65 	.word	0x93c9db65
 800d984:	3fcd864a 	.word	0x3fcd864a
 800d988:	a91d4101 	.word	0xa91d4101
 800d98c:	3fd17460 	.word	0x3fd17460
 800d990:	518f264d 	.word	0x518f264d
 800d994:	3fd55555 	.word	0x3fd55555
 800d998:	db6fabff 	.word	0xdb6fabff
 800d99c:	3fdb6db6 	.word	0x3fdb6db6
 800d9a0:	33333303 	.word	0x33333303
 800d9a4:	3fe33333 	.word	0x3fe33333
 800d9a8:	e0000000 	.word	0xe0000000
 800d9ac:	3feec709 	.word	0x3feec709
 800d9b0:	dc3a03fd 	.word	0xdc3a03fd
 800d9b4:	3feec709 	.word	0x3feec709
 800d9b8:	145b01f5 	.word	0x145b01f5
 800d9bc:	be3e2fe0 	.word	0xbe3e2fe0
 800d9c0:	7ff00000 	.word	0x7ff00000
 800d9c4:	43400000 	.word	0x43400000
 800d9c8:	0003988e 	.word	0x0003988e
 800d9cc:	000bb679 	.word	0x000bb679
 800d9d0:	0800e9f8 	.word	0x0800e9f8
 800d9d4:	3ff00000 	.word	0x3ff00000
 800d9d8:	40080000 	.word	0x40080000
 800d9dc:	0800e9d8 	.word	0x0800e9d8
 800d9e0:	0800e9e8 	.word	0x0800e9e8
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9ea:	e5d7      	b.n	800d59c <__ieee754_pow+0x354>
 800d9ec:	f04f 0a01 	mov.w	sl, #1
 800d9f0:	e65e      	b.n	800d6b0 <__ieee754_pow+0x468>
 800d9f2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800dcc4 <__ieee754_pow+0xa7c>)
 800d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	4639      	mov	r1, r7
 800d9fc:	f7f2 fc46 	bl	800028c <__adddf3>
 800da00:	4642      	mov	r2, r8
 800da02:	e9cd 0100 	strd	r0, r1, [sp]
 800da06:	464b      	mov	r3, r9
 800da08:	4620      	mov	r0, r4
 800da0a:	4629      	mov	r1, r5
 800da0c:	f7f2 fc3c 	bl	8000288 <__aeabi_dsub>
 800da10:	4602      	mov	r2, r0
 800da12:	460b      	mov	r3, r1
 800da14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da18:	f7f3 f87e 	bl	8000b18 <__aeabi_dcmpgt>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	f47f ae00 	bne.w	800d622 <__ieee754_pow+0x3da>
 800da22:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800da26:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800da2a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800da2e:	fa43 fa0a 	asr.w	sl, r3, sl
 800da32:	44da      	add	sl, fp
 800da34:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800da38:	489d      	ldr	r0, [pc, #628]	@ (800dcb0 <__ieee754_pow+0xa68>)
 800da3a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800da3e:	4108      	asrs	r0, r1
 800da40:	ea00 030a 	and.w	r3, r0, sl
 800da44:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800da48:	f1c1 0114 	rsb	r1, r1, #20
 800da4c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800da50:	fa4a fa01 	asr.w	sl, sl, r1
 800da54:	f1bb 0f00 	cmp.w	fp, #0
 800da58:	4640      	mov	r0, r8
 800da5a:	4649      	mov	r1, r9
 800da5c:	f04f 0200 	mov.w	r2, #0
 800da60:	bfb8      	it	lt
 800da62:	f1ca 0a00 	rsblt	sl, sl, #0
 800da66:	f7f2 fc0f 	bl	8000288 <__aeabi_dsub>
 800da6a:	4680      	mov	r8, r0
 800da6c:	4689      	mov	r9, r1
 800da6e:	4632      	mov	r2, r6
 800da70:	463b      	mov	r3, r7
 800da72:	4640      	mov	r0, r8
 800da74:	4649      	mov	r1, r9
 800da76:	f7f2 fc09 	bl	800028c <__adddf3>
 800da7a:	2400      	movs	r4, #0
 800da7c:	a37c      	add	r3, pc, #496	@ (adr r3, 800dc70 <__ieee754_pow+0xa28>)
 800da7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da82:	4620      	mov	r0, r4
 800da84:	460d      	mov	r5, r1
 800da86:	f7f2 fdb7 	bl	80005f8 <__aeabi_dmul>
 800da8a:	4642      	mov	r2, r8
 800da8c:	e9cd 0100 	strd	r0, r1, [sp]
 800da90:	464b      	mov	r3, r9
 800da92:	4620      	mov	r0, r4
 800da94:	4629      	mov	r1, r5
 800da96:	f7f2 fbf7 	bl	8000288 <__aeabi_dsub>
 800da9a:	4602      	mov	r2, r0
 800da9c:	460b      	mov	r3, r1
 800da9e:	4630      	mov	r0, r6
 800daa0:	4639      	mov	r1, r7
 800daa2:	f7f2 fbf1 	bl	8000288 <__aeabi_dsub>
 800daa6:	a374      	add	r3, pc, #464	@ (adr r3, 800dc78 <__ieee754_pow+0xa30>)
 800daa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daac:	f7f2 fda4 	bl	80005f8 <__aeabi_dmul>
 800dab0:	a373      	add	r3, pc, #460	@ (adr r3, 800dc80 <__ieee754_pow+0xa38>)
 800dab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab6:	4680      	mov	r8, r0
 800dab8:	4689      	mov	r9, r1
 800daba:	4620      	mov	r0, r4
 800dabc:	4629      	mov	r1, r5
 800dabe:	f7f2 fd9b 	bl	80005f8 <__aeabi_dmul>
 800dac2:	4602      	mov	r2, r0
 800dac4:	460b      	mov	r3, r1
 800dac6:	4640      	mov	r0, r8
 800dac8:	4649      	mov	r1, r9
 800daca:	f7f2 fbdf 	bl	800028c <__adddf3>
 800dace:	4604      	mov	r4, r0
 800dad0:	460d      	mov	r5, r1
 800dad2:	4602      	mov	r2, r0
 800dad4:	460b      	mov	r3, r1
 800dad6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dada:	f7f2 fbd7 	bl	800028c <__adddf3>
 800dade:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dae2:	4680      	mov	r8, r0
 800dae4:	4689      	mov	r9, r1
 800dae6:	f7f2 fbcf 	bl	8000288 <__aeabi_dsub>
 800daea:	4602      	mov	r2, r0
 800daec:	460b      	mov	r3, r1
 800daee:	4620      	mov	r0, r4
 800daf0:	4629      	mov	r1, r5
 800daf2:	f7f2 fbc9 	bl	8000288 <__aeabi_dsub>
 800daf6:	4642      	mov	r2, r8
 800daf8:	4606      	mov	r6, r0
 800dafa:	460f      	mov	r7, r1
 800dafc:	464b      	mov	r3, r9
 800dafe:	4640      	mov	r0, r8
 800db00:	4649      	mov	r1, r9
 800db02:	f7f2 fd79 	bl	80005f8 <__aeabi_dmul>
 800db06:	a360      	add	r3, pc, #384	@ (adr r3, 800dc88 <__ieee754_pow+0xa40>)
 800db08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0c:	4604      	mov	r4, r0
 800db0e:	460d      	mov	r5, r1
 800db10:	f7f2 fd72 	bl	80005f8 <__aeabi_dmul>
 800db14:	a35e      	add	r3, pc, #376	@ (adr r3, 800dc90 <__ieee754_pow+0xa48>)
 800db16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1a:	f7f2 fbb5 	bl	8000288 <__aeabi_dsub>
 800db1e:	4622      	mov	r2, r4
 800db20:	462b      	mov	r3, r5
 800db22:	f7f2 fd69 	bl	80005f8 <__aeabi_dmul>
 800db26:	a35c      	add	r3, pc, #368	@ (adr r3, 800dc98 <__ieee754_pow+0xa50>)
 800db28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2c:	f7f2 fbae 	bl	800028c <__adddf3>
 800db30:	4622      	mov	r2, r4
 800db32:	462b      	mov	r3, r5
 800db34:	f7f2 fd60 	bl	80005f8 <__aeabi_dmul>
 800db38:	a359      	add	r3, pc, #356	@ (adr r3, 800dca0 <__ieee754_pow+0xa58>)
 800db3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3e:	f7f2 fba3 	bl	8000288 <__aeabi_dsub>
 800db42:	4622      	mov	r2, r4
 800db44:	462b      	mov	r3, r5
 800db46:	f7f2 fd57 	bl	80005f8 <__aeabi_dmul>
 800db4a:	a357      	add	r3, pc, #348	@ (adr r3, 800dca8 <__ieee754_pow+0xa60>)
 800db4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db50:	f7f2 fb9c 	bl	800028c <__adddf3>
 800db54:	4622      	mov	r2, r4
 800db56:	462b      	mov	r3, r5
 800db58:	f7f2 fd4e 	bl	80005f8 <__aeabi_dmul>
 800db5c:	4602      	mov	r2, r0
 800db5e:	460b      	mov	r3, r1
 800db60:	4640      	mov	r0, r8
 800db62:	4649      	mov	r1, r9
 800db64:	f7f2 fb90 	bl	8000288 <__aeabi_dsub>
 800db68:	4604      	mov	r4, r0
 800db6a:	460d      	mov	r5, r1
 800db6c:	4602      	mov	r2, r0
 800db6e:	460b      	mov	r3, r1
 800db70:	4640      	mov	r0, r8
 800db72:	4649      	mov	r1, r9
 800db74:	f7f2 fd40 	bl	80005f8 <__aeabi_dmul>
 800db78:	2200      	movs	r2, #0
 800db7a:	e9cd 0100 	strd	r0, r1, [sp]
 800db7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800db82:	4620      	mov	r0, r4
 800db84:	4629      	mov	r1, r5
 800db86:	f7f2 fb7f 	bl	8000288 <__aeabi_dsub>
 800db8a:	4602      	mov	r2, r0
 800db8c:	460b      	mov	r3, r1
 800db8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db92:	f7f2 fe5b 	bl	800084c <__aeabi_ddiv>
 800db96:	4632      	mov	r2, r6
 800db98:	4604      	mov	r4, r0
 800db9a:	460d      	mov	r5, r1
 800db9c:	463b      	mov	r3, r7
 800db9e:	4640      	mov	r0, r8
 800dba0:	4649      	mov	r1, r9
 800dba2:	f7f2 fd29 	bl	80005f8 <__aeabi_dmul>
 800dba6:	4632      	mov	r2, r6
 800dba8:	463b      	mov	r3, r7
 800dbaa:	f7f2 fb6f 	bl	800028c <__adddf3>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	4629      	mov	r1, r5
 800dbb6:	f7f2 fb67 	bl	8000288 <__aeabi_dsub>
 800dbba:	4642      	mov	r2, r8
 800dbbc:	464b      	mov	r3, r9
 800dbbe:	f7f2 fb63 	bl	8000288 <__aeabi_dsub>
 800dbc2:	460b      	mov	r3, r1
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	493b      	ldr	r1, [pc, #236]	@ (800dcb4 <__ieee754_pow+0xa6c>)
 800dbc8:	2000      	movs	r0, #0
 800dbca:	f7f2 fb5d 	bl	8000288 <__aeabi_dsub>
 800dbce:	ec41 0b10 	vmov	d0, r0, r1
 800dbd2:	ee10 3a90 	vmov	r3, s1
 800dbd6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800dbda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dbde:	da30      	bge.n	800dc42 <__ieee754_pow+0x9fa>
 800dbe0:	4650      	mov	r0, sl
 800dbe2:	f000 f87d 	bl	800dce0 <scalbn>
 800dbe6:	ec51 0b10 	vmov	r0, r1, d0
 800dbea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dbee:	f7ff bbd2 	b.w	800d396 <__ieee754_pow+0x14e>
 800dbf2:	4c31      	ldr	r4, [pc, #196]	@ (800dcb8 <__ieee754_pow+0xa70>)
 800dbf4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dbf8:	42a3      	cmp	r3, r4
 800dbfa:	d91a      	bls.n	800dc32 <__ieee754_pow+0x9ea>
 800dbfc:	4b2f      	ldr	r3, [pc, #188]	@ (800dcbc <__ieee754_pow+0xa74>)
 800dbfe:	440b      	add	r3, r1
 800dc00:	4303      	orrs	r3, r0
 800dc02:	d009      	beq.n	800dc18 <__ieee754_pow+0x9d0>
 800dc04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	f7f2 ff66 	bl	8000adc <__aeabi_dcmplt>
 800dc10:	3800      	subs	r0, #0
 800dc12:	bf18      	it	ne
 800dc14:	2001      	movne	r0, #1
 800dc16:	e42b      	b.n	800d470 <__ieee754_pow+0x228>
 800dc18:	4642      	mov	r2, r8
 800dc1a:	464b      	mov	r3, r9
 800dc1c:	f7f2 fb34 	bl	8000288 <__aeabi_dsub>
 800dc20:	4632      	mov	r2, r6
 800dc22:	463b      	mov	r3, r7
 800dc24:	f7f2 ff6e 	bl	8000b04 <__aeabi_dcmpge>
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	d1eb      	bne.n	800dc04 <__ieee754_pow+0x9bc>
 800dc2c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800dccc <__ieee754_pow+0xa84>
 800dc30:	e6f7      	b.n	800da22 <__ieee754_pow+0x7da>
 800dc32:	469a      	mov	sl, r3
 800dc34:	4b22      	ldr	r3, [pc, #136]	@ (800dcc0 <__ieee754_pow+0xa78>)
 800dc36:	459a      	cmp	sl, r3
 800dc38:	f63f aef3 	bhi.w	800da22 <__ieee754_pow+0x7da>
 800dc3c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800dc40:	e715      	b.n	800da6e <__ieee754_pow+0x826>
 800dc42:	ec51 0b10 	vmov	r0, r1, d0
 800dc46:	4619      	mov	r1, r3
 800dc48:	e7cf      	b.n	800dbea <__ieee754_pow+0x9a2>
 800dc4a:	491a      	ldr	r1, [pc, #104]	@ (800dcb4 <__ieee754_pow+0xa6c>)
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	f7ff bb18 	b.w	800d282 <__ieee754_pow+0x3a>
 800dc52:	2000      	movs	r0, #0
 800dc54:	2100      	movs	r1, #0
 800dc56:	f7ff bb14 	b.w	800d282 <__ieee754_pow+0x3a>
 800dc5a:	4630      	mov	r0, r6
 800dc5c:	4639      	mov	r1, r7
 800dc5e:	f7ff bb10 	b.w	800d282 <__ieee754_pow+0x3a>
 800dc62:	460c      	mov	r4, r1
 800dc64:	f7ff bb5e 	b.w	800d324 <__ieee754_pow+0xdc>
 800dc68:	2400      	movs	r4, #0
 800dc6a:	f7ff bb49 	b.w	800d300 <__ieee754_pow+0xb8>
 800dc6e:	bf00      	nop
 800dc70:	00000000 	.word	0x00000000
 800dc74:	3fe62e43 	.word	0x3fe62e43
 800dc78:	fefa39ef 	.word	0xfefa39ef
 800dc7c:	3fe62e42 	.word	0x3fe62e42
 800dc80:	0ca86c39 	.word	0x0ca86c39
 800dc84:	be205c61 	.word	0xbe205c61
 800dc88:	72bea4d0 	.word	0x72bea4d0
 800dc8c:	3e663769 	.word	0x3e663769
 800dc90:	c5d26bf1 	.word	0xc5d26bf1
 800dc94:	3ebbbd41 	.word	0x3ebbbd41
 800dc98:	af25de2c 	.word	0xaf25de2c
 800dc9c:	3f11566a 	.word	0x3f11566a
 800dca0:	16bebd93 	.word	0x16bebd93
 800dca4:	3f66c16c 	.word	0x3f66c16c
 800dca8:	5555553e 	.word	0x5555553e
 800dcac:	3fc55555 	.word	0x3fc55555
 800dcb0:	fff00000 	.word	0xfff00000
 800dcb4:	3ff00000 	.word	0x3ff00000
 800dcb8:	4090cbff 	.word	0x4090cbff
 800dcbc:	3f6f3400 	.word	0x3f6f3400
 800dcc0:	3fe00000 	.word	0x3fe00000
 800dcc4:	652b82fe 	.word	0x652b82fe
 800dcc8:	3c971547 	.word	0x3c971547
 800dccc:	4090cc00 	.word	0x4090cc00

0800dcd0 <fabs>:
 800dcd0:	ec51 0b10 	vmov	r0, r1, d0
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dcda:	ec43 2b10 	vmov	d0, r2, r3
 800dcde:	4770      	bx	lr

0800dce0 <scalbn>:
 800dce0:	b570      	push	{r4, r5, r6, lr}
 800dce2:	ec55 4b10 	vmov	r4, r5, d0
 800dce6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800dcea:	4606      	mov	r6, r0
 800dcec:	462b      	mov	r3, r5
 800dcee:	b991      	cbnz	r1, 800dd16 <scalbn+0x36>
 800dcf0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800dcf4:	4323      	orrs	r3, r4
 800dcf6:	d03d      	beq.n	800dd74 <scalbn+0x94>
 800dcf8:	4b35      	ldr	r3, [pc, #212]	@ (800ddd0 <scalbn+0xf0>)
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	4629      	mov	r1, r5
 800dcfe:	2200      	movs	r2, #0
 800dd00:	f7f2 fc7a 	bl	80005f8 <__aeabi_dmul>
 800dd04:	4b33      	ldr	r3, [pc, #204]	@ (800ddd4 <scalbn+0xf4>)
 800dd06:	429e      	cmp	r6, r3
 800dd08:	4604      	mov	r4, r0
 800dd0a:	460d      	mov	r5, r1
 800dd0c:	da0f      	bge.n	800dd2e <scalbn+0x4e>
 800dd0e:	a328      	add	r3, pc, #160	@ (adr r3, 800ddb0 <scalbn+0xd0>)
 800dd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd14:	e01e      	b.n	800dd54 <scalbn+0x74>
 800dd16:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800dd1a:	4291      	cmp	r1, r2
 800dd1c:	d10b      	bne.n	800dd36 <scalbn+0x56>
 800dd1e:	4622      	mov	r2, r4
 800dd20:	4620      	mov	r0, r4
 800dd22:	4629      	mov	r1, r5
 800dd24:	f7f2 fab2 	bl	800028c <__adddf3>
 800dd28:	4604      	mov	r4, r0
 800dd2a:	460d      	mov	r5, r1
 800dd2c:	e022      	b.n	800dd74 <scalbn+0x94>
 800dd2e:	460b      	mov	r3, r1
 800dd30:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800dd34:	3936      	subs	r1, #54	@ 0x36
 800dd36:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800dd3a:	4296      	cmp	r6, r2
 800dd3c:	dd0d      	ble.n	800dd5a <scalbn+0x7a>
 800dd3e:	2d00      	cmp	r5, #0
 800dd40:	a11d      	add	r1, pc, #116	@ (adr r1, 800ddb8 <scalbn+0xd8>)
 800dd42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd46:	da02      	bge.n	800dd4e <scalbn+0x6e>
 800dd48:	a11d      	add	r1, pc, #116	@ (adr r1, 800ddc0 <scalbn+0xe0>)
 800dd4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd4e:	a31a      	add	r3, pc, #104	@ (adr r3, 800ddb8 <scalbn+0xd8>)
 800dd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd54:	f7f2 fc50 	bl	80005f8 <__aeabi_dmul>
 800dd58:	e7e6      	b.n	800dd28 <scalbn+0x48>
 800dd5a:	1872      	adds	r2, r6, r1
 800dd5c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800dd60:	428a      	cmp	r2, r1
 800dd62:	dcec      	bgt.n	800dd3e <scalbn+0x5e>
 800dd64:	2a00      	cmp	r2, #0
 800dd66:	dd08      	ble.n	800dd7a <scalbn+0x9a>
 800dd68:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dd6c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800dd70:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dd74:	ec45 4b10 	vmov	d0, r4, r5
 800dd78:	bd70      	pop	{r4, r5, r6, pc}
 800dd7a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800dd7e:	da08      	bge.n	800dd92 <scalbn+0xb2>
 800dd80:	2d00      	cmp	r5, #0
 800dd82:	a10b      	add	r1, pc, #44	@ (adr r1, 800ddb0 <scalbn+0xd0>)
 800dd84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd88:	dac1      	bge.n	800dd0e <scalbn+0x2e>
 800dd8a:	a10f      	add	r1, pc, #60	@ (adr r1, 800ddc8 <scalbn+0xe8>)
 800dd8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd90:	e7bd      	b.n	800dd0e <scalbn+0x2e>
 800dd92:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dd96:	3236      	adds	r2, #54	@ 0x36
 800dd98:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800dd9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dda0:	4620      	mov	r0, r4
 800dda2:	4b0d      	ldr	r3, [pc, #52]	@ (800ddd8 <scalbn+0xf8>)
 800dda4:	4629      	mov	r1, r5
 800dda6:	2200      	movs	r2, #0
 800dda8:	e7d4      	b.n	800dd54 <scalbn+0x74>
 800ddaa:	bf00      	nop
 800ddac:	f3af 8000 	nop.w
 800ddb0:	c2f8f359 	.word	0xc2f8f359
 800ddb4:	01a56e1f 	.word	0x01a56e1f
 800ddb8:	8800759c 	.word	0x8800759c
 800ddbc:	7e37e43c 	.word	0x7e37e43c
 800ddc0:	8800759c 	.word	0x8800759c
 800ddc4:	fe37e43c 	.word	0xfe37e43c
 800ddc8:	c2f8f359 	.word	0xc2f8f359
 800ddcc:	81a56e1f 	.word	0x81a56e1f
 800ddd0:	43500000 	.word	0x43500000
 800ddd4:	ffff3cb0 	.word	0xffff3cb0
 800ddd8:	3c900000 	.word	0x3c900000

0800dddc <with_errno>:
 800dddc:	b510      	push	{r4, lr}
 800ddde:	ed2d 8b02 	vpush	{d8}
 800dde2:	eeb0 8a40 	vmov.f32	s16, s0
 800dde6:	eef0 8a60 	vmov.f32	s17, s1
 800ddea:	4604      	mov	r4, r0
 800ddec:	f7fe f9a4 	bl	800c138 <__errno>
 800ddf0:	eeb0 0a48 	vmov.f32	s0, s16
 800ddf4:	eef0 0a68 	vmov.f32	s1, s17
 800ddf8:	ecbd 8b02 	vpop	{d8}
 800ddfc:	6004      	str	r4, [r0, #0]
 800ddfe:	bd10      	pop	{r4, pc}

0800de00 <xflow>:
 800de00:	4603      	mov	r3, r0
 800de02:	b507      	push	{r0, r1, r2, lr}
 800de04:	ec51 0b10 	vmov	r0, r1, d0
 800de08:	b183      	cbz	r3, 800de2c <xflow+0x2c>
 800de0a:	4602      	mov	r2, r0
 800de0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800de10:	e9cd 2300 	strd	r2, r3, [sp]
 800de14:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de18:	f7f2 fbee 	bl	80005f8 <__aeabi_dmul>
 800de1c:	ec41 0b10 	vmov	d0, r0, r1
 800de20:	2022      	movs	r0, #34	@ 0x22
 800de22:	b003      	add	sp, #12
 800de24:	f85d eb04 	ldr.w	lr, [sp], #4
 800de28:	f7ff bfd8 	b.w	800dddc <with_errno>
 800de2c:	4602      	mov	r2, r0
 800de2e:	460b      	mov	r3, r1
 800de30:	e7ee      	b.n	800de10 <xflow+0x10>
 800de32:	0000      	movs	r0, r0
 800de34:	0000      	movs	r0, r0
	...

0800de38 <__math_uflow>:
 800de38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800de40 <__math_uflow+0x8>
 800de3c:	f7ff bfe0 	b.w	800de00 <xflow>
 800de40:	00000000 	.word	0x00000000
 800de44:	10000000 	.word	0x10000000

0800de48 <__math_oflow>:
 800de48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800de50 <__math_oflow+0x8>
 800de4c:	f7ff bfd8 	b.w	800de00 <xflow>
 800de50:	00000000 	.word	0x00000000
 800de54:	70000000 	.word	0x70000000

0800de58 <__ieee754_sqrt>:
 800de58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de5c:	4a68      	ldr	r2, [pc, #416]	@ (800e000 <__ieee754_sqrt+0x1a8>)
 800de5e:	ec55 4b10 	vmov	r4, r5, d0
 800de62:	43aa      	bics	r2, r5
 800de64:	462b      	mov	r3, r5
 800de66:	4621      	mov	r1, r4
 800de68:	d110      	bne.n	800de8c <__ieee754_sqrt+0x34>
 800de6a:	4622      	mov	r2, r4
 800de6c:	4620      	mov	r0, r4
 800de6e:	4629      	mov	r1, r5
 800de70:	f7f2 fbc2 	bl	80005f8 <__aeabi_dmul>
 800de74:	4602      	mov	r2, r0
 800de76:	460b      	mov	r3, r1
 800de78:	4620      	mov	r0, r4
 800de7a:	4629      	mov	r1, r5
 800de7c:	f7f2 fa06 	bl	800028c <__adddf3>
 800de80:	4604      	mov	r4, r0
 800de82:	460d      	mov	r5, r1
 800de84:	ec45 4b10 	vmov	d0, r4, r5
 800de88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de8c:	2d00      	cmp	r5, #0
 800de8e:	dc0e      	bgt.n	800deae <__ieee754_sqrt+0x56>
 800de90:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800de94:	4322      	orrs	r2, r4
 800de96:	d0f5      	beq.n	800de84 <__ieee754_sqrt+0x2c>
 800de98:	b19d      	cbz	r5, 800dec2 <__ieee754_sqrt+0x6a>
 800de9a:	4622      	mov	r2, r4
 800de9c:	4620      	mov	r0, r4
 800de9e:	4629      	mov	r1, r5
 800dea0:	f7f2 f9f2 	bl	8000288 <__aeabi_dsub>
 800dea4:	4602      	mov	r2, r0
 800dea6:	460b      	mov	r3, r1
 800dea8:	f7f2 fcd0 	bl	800084c <__aeabi_ddiv>
 800deac:	e7e8      	b.n	800de80 <__ieee754_sqrt+0x28>
 800deae:	152a      	asrs	r2, r5, #20
 800deb0:	d115      	bne.n	800dede <__ieee754_sqrt+0x86>
 800deb2:	2000      	movs	r0, #0
 800deb4:	e009      	b.n	800deca <__ieee754_sqrt+0x72>
 800deb6:	0acb      	lsrs	r3, r1, #11
 800deb8:	3a15      	subs	r2, #21
 800deba:	0549      	lsls	r1, r1, #21
 800debc:	2b00      	cmp	r3, #0
 800debe:	d0fa      	beq.n	800deb6 <__ieee754_sqrt+0x5e>
 800dec0:	e7f7      	b.n	800deb2 <__ieee754_sqrt+0x5a>
 800dec2:	462a      	mov	r2, r5
 800dec4:	e7fa      	b.n	800debc <__ieee754_sqrt+0x64>
 800dec6:	005b      	lsls	r3, r3, #1
 800dec8:	3001      	adds	r0, #1
 800deca:	02dc      	lsls	r4, r3, #11
 800decc:	d5fb      	bpl.n	800dec6 <__ieee754_sqrt+0x6e>
 800dece:	1e44      	subs	r4, r0, #1
 800ded0:	1b12      	subs	r2, r2, r4
 800ded2:	f1c0 0420 	rsb	r4, r0, #32
 800ded6:	fa21 f404 	lsr.w	r4, r1, r4
 800deda:	4323      	orrs	r3, r4
 800dedc:	4081      	lsls	r1, r0
 800dede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dee2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800dee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800deea:	07d2      	lsls	r2, r2, #31
 800deec:	bf5c      	itt	pl
 800deee:	005b      	lslpl	r3, r3, #1
 800def0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800def4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800def8:	bf58      	it	pl
 800defa:	0049      	lslpl	r1, r1, #1
 800defc:	2600      	movs	r6, #0
 800defe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800df02:	106d      	asrs	r5, r5, #1
 800df04:	0049      	lsls	r1, r1, #1
 800df06:	2016      	movs	r0, #22
 800df08:	4632      	mov	r2, r6
 800df0a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800df0e:	1917      	adds	r7, r2, r4
 800df10:	429f      	cmp	r7, r3
 800df12:	bfde      	ittt	le
 800df14:	193a      	addle	r2, r7, r4
 800df16:	1bdb      	suble	r3, r3, r7
 800df18:	1936      	addle	r6, r6, r4
 800df1a:	0fcf      	lsrs	r7, r1, #31
 800df1c:	3801      	subs	r0, #1
 800df1e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800df22:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800df26:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800df2a:	d1f0      	bne.n	800df0e <__ieee754_sqrt+0xb6>
 800df2c:	4604      	mov	r4, r0
 800df2e:	2720      	movs	r7, #32
 800df30:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800df34:	429a      	cmp	r2, r3
 800df36:	eb00 0e0c 	add.w	lr, r0, ip
 800df3a:	db02      	blt.n	800df42 <__ieee754_sqrt+0xea>
 800df3c:	d113      	bne.n	800df66 <__ieee754_sqrt+0x10e>
 800df3e:	458e      	cmp	lr, r1
 800df40:	d811      	bhi.n	800df66 <__ieee754_sqrt+0x10e>
 800df42:	f1be 0f00 	cmp.w	lr, #0
 800df46:	eb0e 000c 	add.w	r0, lr, ip
 800df4a:	da42      	bge.n	800dfd2 <__ieee754_sqrt+0x17a>
 800df4c:	2800      	cmp	r0, #0
 800df4e:	db40      	blt.n	800dfd2 <__ieee754_sqrt+0x17a>
 800df50:	f102 0801 	add.w	r8, r2, #1
 800df54:	1a9b      	subs	r3, r3, r2
 800df56:	458e      	cmp	lr, r1
 800df58:	bf88      	it	hi
 800df5a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800df5e:	eba1 010e 	sub.w	r1, r1, lr
 800df62:	4464      	add	r4, ip
 800df64:	4642      	mov	r2, r8
 800df66:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800df6a:	3f01      	subs	r7, #1
 800df6c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800df70:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800df74:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800df78:	d1dc      	bne.n	800df34 <__ieee754_sqrt+0xdc>
 800df7a:	4319      	orrs	r1, r3
 800df7c:	d01b      	beq.n	800dfb6 <__ieee754_sqrt+0x15e>
 800df7e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e004 <__ieee754_sqrt+0x1ac>
 800df82:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e008 <__ieee754_sqrt+0x1b0>
 800df86:	e9da 0100 	ldrd	r0, r1, [sl]
 800df8a:	e9db 2300 	ldrd	r2, r3, [fp]
 800df8e:	f7f2 f97b 	bl	8000288 <__aeabi_dsub>
 800df92:	e9da 8900 	ldrd	r8, r9, [sl]
 800df96:	4602      	mov	r2, r0
 800df98:	460b      	mov	r3, r1
 800df9a:	4640      	mov	r0, r8
 800df9c:	4649      	mov	r1, r9
 800df9e:	f7f2 fda7 	bl	8000af0 <__aeabi_dcmple>
 800dfa2:	b140      	cbz	r0, 800dfb6 <__ieee754_sqrt+0x15e>
 800dfa4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dfa8:	e9da 0100 	ldrd	r0, r1, [sl]
 800dfac:	e9db 2300 	ldrd	r2, r3, [fp]
 800dfb0:	d111      	bne.n	800dfd6 <__ieee754_sqrt+0x17e>
 800dfb2:	3601      	adds	r6, #1
 800dfb4:	463c      	mov	r4, r7
 800dfb6:	1072      	asrs	r2, r6, #1
 800dfb8:	0863      	lsrs	r3, r4, #1
 800dfba:	07f1      	lsls	r1, r6, #31
 800dfbc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800dfc0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800dfc4:	bf48      	it	mi
 800dfc6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800dfca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800dfce:	4618      	mov	r0, r3
 800dfd0:	e756      	b.n	800de80 <__ieee754_sqrt+0x28>
 800dfd2:	4690      	mov	r8, r2
 800dfd4:	e7be      	b.n	800df54 <__ieee754_sqrt+0xfc>
 800dfd6:	f7f2 f959 	bl	800028c <__adddf3>
 800dfda:	e9da 8900 	ldrd	r8, r9, [sl]
 800dfde:	4602      	mov	r2, r0
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	4640      	mov	r0, r8
 800dfe4:	4649      	mov	r1, r9
 800dfe6:	f7f2 fd79 	bl	8000adc <__aeabi_dcmplt>
 800dfea:	b120      	cbz	r0, 800dff6 <__ieee754_sqrt+0x19e>
 800dfec:	1ca0      	adds	r0, r4, #2
 800dfee:	bf08      	it	eq
 800dff0:	3601      	addeq	r6, #1
 800dff2:	3402      	adds	r4, #2
 800dff4:	e7df      	b.n	800dfb6 <__ieee754_sqrt+0x15e>
 800dff6:	1c63      	adds	r3, r4, #1
 800dff8:	f023 0401 	bic.w	r4, r3, #1
 800dffc:	e7db      	b.n	800dfb6 <__ieee754_sqrt+0x15e>
 800dffe:	bf00      	nop
 800e000:	7ff00000 	.word	0x7ff00000
 800e004:	20000090 	.word	0x20000090
 800e008:	20000088 	.word	0x20000088

0800e00c <_init>:
 800e00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e00e:	bf00      	nop
 800e010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e012:	bc08      	pop	{r3}
 800e014:	469e      	mov	lr, r3
 800e016:	4770      	bx	lr

0800e018 <_fini>:
 800e018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e01a:	bf00      	nop
 800e01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e01e:	bc08      	pop	{r3}
 800e020:	469e      	mov	lr, r3
 800e022:	4770      	bx	lr
